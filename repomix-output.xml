This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.editorconfig
.gitattributes
.gitignore
.vs/ProjectSettings.json
.vs/ShiftWork.Frontend/config/applicationhost.config
.vs/VSWorkspaceState.json
angular.json
Dockerfile
firebase.json
karma.conf.js
ngsw-config.json
package.json
README.md
src/app/app-routing.module.ts
src/app/app.component.css
src/app/app.component.html
src/app/app.component.spec.ts
src/app/app.component.ts
src/app/app.module.ts
src/app/components/company-switch/company-switch.component.css
src/app/components/company-switch/company-switch.component.html
src/app/components/company-switch/company-switch.component.spec.ts
src/app/components/company-switch/company-switch.component.ts
src/app/components/dashboard/area/area.component.html
src/app/components/dashboard/area/area.component.spec.ts
src/app/components/dashboard/area/area.component.ts
src/app/components/dashboard/areas/areas.component.css
src/app/components/dashboard/areas/areas.component.html
src/app/components/dashboard/areas/areas.component.spec.ts
src/app/components/dashboard/areas/areas.component.ts
src/app/components/dashboard/clock-shift/clock-shift.component.html
src/app/components/dashboard/clock-shift/clock-shift.component.spec.ts
src/app/components/dashboard/clock-shift/clock-shift.component.ts
src/app/components/dashboard/clock-shift/clock-shit.component-dialog.html
src/app/components/dashboard/companies/companies.component.html
src/app/components/dashboard/companies/companies.component.spec.ts
src/app/components/dashboard/companies/companies.component.ts
src/app/components/dashboard/dashboard.component.html
src/app/components/dashboard/dashboard.component.spec.ts
src/app/components/dashboard/dashboard.component.ts
src/app/components/dashboard/event-shift/event-shift.component.html
src/app/components/dashboard/event-shift/event-shift.component.spec.ts
src/app/components/dashboard/event-shift/event-shift.component.ts
src/app/components/dashboard/location/location.component.html
src/app/components/dashboard/location/location.component.spec.ts
src/app/components/dashboard/location/location.component.ts
src/app/components/dashboard/locations/locations.component.css
src/app/components/dashboard/locations/locations.component.html
src/app/components/dashboard/locations/locations.component.spec.ts
src/app/components/dashboard/locations/locations.component.ts
src/app/components/dashboard/nav-bar/nav-bar.component.html
src/app/components/dashboard/nav-bar/nav-bar.component.spec.ts
src/app/components/dashboard/nav-bar/nav-bar.component.ts
src/app/components/dashboard/people/people.component.html
src/app/components/dashboard/people/people.component.spec.ts
src/app/components/dashboard/people/people.component.ts
src/app/components/dashboard/profiles/profiles.component.css
src/app/components/dashboard/profiles/profiles.component.html
src/app/components/dashboard/profiles/profiles.component.spec.ts
src/app/components/dashboard/profiles/profiles.component.ts
src/app/components/dashboard/role/role.component.html
src/app/components/dashboard/role/role.component.spec.ts
src/app/components/dashboard/role/role.component.ts
src/app/components/dashboard/shedule/shedule.component.html
src/app/components/dashboard/shedule/shedule.component.spec.ts
src/app/components/dashboard/shedule/shedule.component.ts
src/app/components/dashboard/task-shift/task-shift.component.html
src/app/components/dashboard/task-shift/task-shift.component.spec.ts
src/app/components/dashboard/task-shift/task-shift.component.ts
src/app/components/dashboard/tasks/tasks.component.css
src/app/components/dashboard/tasks/tasks.component.html
src/app/components/dashboard/tasks/tasks.component.spec.ts
src/app/components/dashboard/tasks/tasks.component.ts
src/app/components/forgot-password/forgot-password.component.html
src/app/components/forgot-password/forgot-password.component.spec.ts
src/app/components/forgot-password/forgot-password.component.ts
src/app/components/fullcalendarlib/full-calendar.component.html
src/app/components/fullcalendarlib/full-calendar.component.spec.ts
src/app/components/fullcalendarlib/full-calendar.component.ts
src/app/components/fullcalendarlib/full-calendar.module.ts
src/app/components/fullcalendarlib/options.ts
src/app/components/fullcalendarlib/private-types.ts
src/app/components/fullcalendarlib/public-apis.ts
src/app/components/fullcalendarlib/utils/fast-deep-equal.ts
src/app/components/fullcalendarlib/utils/obj.ts
src/app/components/fullcalendarlib/utils/offscreen-fragment.component.ts
src/app/components/fullcalendarlib/utils/transport-container.component.html
src/app/components/fullcalendarlib/utils/transport-container.component.ts
src/app/components/inicio/inicio.component.css
src/app/components/inicio/inicio.component.html
src/app/components/inicio/inicio.component.spec.ts
src/app/components/inicio/inicio.component.ts
src/app/components/kiosk/components/employee-list/employee-list.component.css
src/app/components/kiosk/components/employee-list/employee-list.component.html
src/app/components/kiosk/components/employee-list/employee-list.component.spec.ts
src/app/components/kiosk/components/employee-list/employee-list.component.ts
src/app/components/kiosk/components/photo-schedule/photo-schedule.component.css
src/app/components/kiosk/components/photo-schedule/photo-schedule.component.html
src/app/components/kiosk/components/photo-schedule/photo-schedule.component.spec.ts
src/app/components/kiosk/components/photo-schedule/photo-schedule.component.ts
src/app/components/kiosk/components/todo-detail/todo-detail.component.html
src/app/components/kiosk/components/todo-detail/todo-detail.component.spec.ts
src/app/components/kiosk/components/todo-detail/todo-detail.component.ts
src/app/components/kiosk/components/todo-list/todo-list.component.html
src/app/components/kiosk/components/todo-list/todo-list.component.spec.ts
src/app/components/kiosk/components/todo-list/todo-list.component.ts
src/app/components/kiosk/core/models/area.model.ts
src/app/components/kiosk/core/models/employee.model.ts
src/app/components/kiosk/core/models/location.models.ts
src/app/components/kiosk/core/models/schedule.model.ts
src/app/components/kiosk/core/models/task.model.ts
src/app/components/kiosk/core/services/core-api.service.spec.ts
src/app/components/kiosk/core/services/core-api.service.ts
src/app/components/kiosk/core/services/data.service.spec.ts
src/app/components/kiosk/core/services/data.service.ts
src/app/components/kiosk/core/services/kiosk.service.spec.ts
src/app/components/kiosk/core/services/kiosk.service.ts
src/app/components/kiosk/core/services/kioskemployee.service.spec.ts
src/app/components/kiosk/core/services/kioskemployee.service.ts
src/app/components/kiosk/core/services/kiosklocation.service.spec.ts
src/app/components/kiosk/core/services/kiosklocation.service.ts
src/app/components/kiosk/core/services/query-options.service.spec.ts
src/app/components/kiosk/core/services/query-options.service.ts
src/app/components/kiosk/core/services/timer.service.spec.ts
src/app/components/kiosk/core/services/timer.service.ts
src/app/components/kiosk/core/services/to-do.service.spec.ts
src/app/components/kiosk/core/services/to-do.service.ts
src/app/components/kiosk/kiosk.component.css
src/app/components/kiosk/kiosk.component.html
src/app/components/kiosk/kiosk.component.spec.ts
src/app/components/kiosk/kiosk.component.ts
src/app/components/sign-in/sign-in.component.html
src/app/components/sign-in/sign-in.component.spec.ts
src/app/components/sign-in/sign-in.component.ts
src/app/components/sign-out/sign-out.component.html
src/app/components/sign-out/sign-out.component.spec.ts
src/app/components/sign-out/sign-out.component.ts
src/app/components/sign-up/sign-up.component.html
src/app/components/sign-up/sign-up.component.spec.ts
src/app/components/sign-up/sign-up.component.ts
src/app/components/verify-email/verify-email.component.html
src/app/components/verify-email/verify-email.component.spec.ts
src/app/components/verify-email/verify-email.component.ts
src/app/core/models/Activity.ts
src/app/core/models/Area.ts
src/app/core/models/Company.ts
src/app/core/models/Country.ts
src/app/core/models/Ilocation.ts
src/app/core/models/Location.ts
src/app/core/models/Login.ts
src/app/core/models/People.ts
src/app/core/models/Role.ts
src/app/core/models/Schedule.ts
src/app/core/models/ScheduleShift.ts
src/app/core/models/TaskShift.ts
src/app/core/models/Time_zone.ts
src/app/core/models/User.ts
src/app/core/models/UserCompany.ts
src/app/core/models/UserRole.ts
src/app/core/models/Weather.ts
src/app/core/services/activity.service.spec.ts
src/app/core/services/activity.service.ts
src/app/core/services/area.service.spec.ts
src/app/core/services/area.service.ts
src/app/core/services/areas.service.ts
src/app/core/services/auth.service.ts
src/app/core/services/company.service.spec.ts
src/app/core/services/company.service.ts
src/app/core/services/google-analytics.service.spec.ts
src/app/core/services/google-analytics.service.ts
src/app/core/services/location.service.spec.ts
src/app/core/services/location.service.ts
src/app/core/services/login-service.service.spec.ts
src/app/core/services/login-service.service.ts
src/app/core/services/people.service.spec.ts
src/app/core/services/people.service.ts
src/app/core/services/role.service.spec.ts
src/app/core/services/role.service.ts
src/app/core/services/schedule-clock.service.spec.ts
src/app/core/services/schedule-clock.service.ts
src/app/core/services/schedule.service.spec.ts
src/app/core/services/schedule.service.ts
src/app/core/services/task-shift.service.spec.ts
src/app/core/services/task-shift.service.ts
src/app/core/services/user-company.service.spec.ts
src/app/core/services/user-company.service.ts
src/app/core/services/user.service.ts
src/app/core/services/weather.service.spec.ts
src/app/core/services/weather.service.ts
src/app/data.ts
src/app/shared/guard/auth.guard.spec.ts
src/app/shared/guard/auth.guard.ts
src/app/Utils/calendar-header.component.ts
src/app/Utils/colors.ts
src/app/Utils/date-adapter.ts
src/app/Utils/module.ts
src/app/Utils/util.ts
src/custom-theme.scss
src/custom-webpack.config.ts
src/environments/environment.prod.ts
src/index.html
src/locale/messages.es.xlf
src/locale/messages.xlf
src/main.ts
src/manifest.webmanifest
src/polyfills.ts
src/styles.css
src/test.ts
tsconfig.app.json
tsconfig.json
tsconfig.spec.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".editorconfig">
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single

[*.md]
max_line_length = off
trim_trailing_whitespace = false
</file>

<file path=".gitattributes">
###############################################################################
# Set default behavior to automatically normalize line endings.
###############################################################################
* text=auto

###############################################################################
# Set default behavior for command prompt diff.
#
# This is need for earlier builds of msysgit that does not have it on by
# default for csharp files.
# Note: This is only used by command line
###############################################################################
#*.cs     diff=csharp

###############################################################################
# Set the merge driver for project and solution files
#
# Merging from the command prompt will add diff markers to the files if there
# are conflicts (Merging from VS is not affected by the settings below, in VS
# the diff markers are never inserted). Diff markers may cause the following 
# file extensions to fail to load in VS. An alternative would be to treat
# these files as binary and thus will always conflict and require user
# intervention with every merge. To do so, just uncomment the entries below
###############################################################################
#*.sln       merge=binary
#*.csproj    merge=binary
#*.vbproj    merge=binary
#*.vcxproj   merge=binary
#*.vcproj    merge=binary
#*.dbproj    merge=binary
#*.fsproj    merge=binary
#*.lsproj    merge=binary
#*.wixproj   merge=binary
#*.modelproj merge=binary
#*.sqlproj   merge=binary
#*.wwaproj   merge=binary

###############################################################################
# behavior for image files
#
# image files are treated as binary by default.
###############################################################################
#*.jpg   binary
#*.png   binary
#*.gif   binary

###############################################################################
# diff behavior for common document formats
# 
# Convert binary document formats to text before diffing them. This feature
# is only available from the command line. Turn it on by uncommenting the 
# entries below.
###############################################################################
#*.doc   diff=astextplain
#*.DOC   diff=astextplain
#*.docx  diff=astextplain
#*.DOCX  diff=astextplain
#*.dot   diff=astextplain
#*.DOT   diff=astextplain
#*.pdf   diff=astextplain
#*.PDF   diff=astextplain
#*.rtf   diff=astextplain
#*.RTF   diff=astextplain
</file>

<file path=".gitignore">
# See http://help.github.com/ignore-files/ for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db
src/environments/environment.ts
.env
</file>

<file path=".vs/ProjectSettings.json">
{
  "CurrentProjectSetting": null
}
</file>

<file path=".vs/ShiftWork.Frontend/config/applicationhost.config">
<?xml version="1.0" encoding="UTF-8"?>
<!--

    IIS configuration sections.

    For schema documentation, see
    %IIS_BIN%\config\schema\IIS_schema.xml.
    
    Please make a backup of this file before making any changes to it.

    NOTE: The following environment variables are available to be used
          within this file and are understood by the IIS Express.

          %IIS_USER_HOME% - The IIS Express home directory for the user
          %IIS_SITES_HOME% - The default home directory for sites
          %IIS_BIN% - The location of the IIS Express binaries
          %SYSTEMDRIVE% - The drive letter of %IIS_BIN%

-->
<configuration>
	<!--

        The <configSections> section controls the registration of sections.
        Section is the basic unit of deployment, locking, searching and
        containment for configuration settings.
        
        Every section belongs to one section group.
        A section group is a container of logically-related sections.
        
        Sections cannot be nested.
        Section groups may be nested.
        
        <section
            name=""  [Required, Collection Key] [XML name of the section]
            allowDefinition="Everywhere" [MachineOnly|MachineToApplication|AppHostOnly|Everywhere] [Level where it can be set]
            overrideModeDefault="Allow"  [Allow|Deny] [Default delegation mode]
            allowLocation="true"  [true|false] [Allowed in location tags]
        />
        
        The recommended way to unlock sections is by using a location tag:
        <location path="Default Web Site" overrideMode="Allow">
            <system.webServer>
                <asp />
            </system.webServer>
        </location>

    -->
	<configSections>
		<sectionGroup name="system.applicationHost">
			<section name="applicationPools" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
			<section name="configHistory" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
			<section name="customMetadata" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
			<section name="listenerAdapters" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
			<section name="log" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
			<section name="serviceAutoStartProviders" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
			<section name="sites" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
			<section name="webLimits" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
		</sectionGroup>
		<sectionGroup name="system.webServer">
			<section name="asp" overrideModeDefault="Deny" />
			<section name="caching" overrideModeDefault="Allow" />
			<section name="cgi" overrideModeDefault="Deny" />
			<section name="defaultDocument" overrideModeDefault="Allow" />
			<section name="directoryBrowse" overrideModeDefault="Allow" />
			<section name="fastCgi" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
			<section name="globalModules" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
			<section name="handlers" overrideModeDefault="Deny" />
			<section name="httpCompression" overrideModeDefault="Allow" allowDefinition="Everywhere" />
			<section name="httpErrors" overrideModeDefault="Allow" />
			<section name="httpLogging" overrideModeDefault="Deny" />
			<section name="httpProtocol" overrideModeDefault="Allow" />
			<section name="httpRedirect" overrideModeDefault="Allow" />
			<section name="httpTracing" overrideModeDefault="Deny" />
			<section name="isapiFilters" allowDefinition="MachineToApplication" overrideModeDefault="Deny" />
			<section name="modules" allowDefinition="MachineToApplication" overrideModeDefault="Deny" />
			<section name="applicationInitialization" allowDefinition="MachineToApplication" overrideModeDefault="Allow" />
			<section name="odbcLogging" overrideModeDefault="Deny" />
			<sectionGroup name="security">
				<section name="access" overrideModeDefault="Deny" />
				<section name="applicationDependencies" overrideModeDefault="Deny" />
				<sectionGroup name="authentication">
					<section name="anonymousAuthentication" overrideModeDefault="Deny" />
					<section name="basicAuthentication" overrideModeDefault="Deny" />
					<section name="clientCertificateMappingAuthentication" overrideModeDefault="Deny" />
					<section name="digestAuthentication" overrideModeDefault="Deny" />
					<section name="iisClientCertificateMappingAuthentication" overrideModeDefault="Deny" />
					<section name="windowsAuthentication" overrideModeDefault="Deny" />
				</sectionGroup>
				<section name="authorization" overrideModeDefault="Allow" />
				<section name="ipSecurity" overrideModeDefault="Deny" />
				<section name="dynamicIpSecurity" overrideModeDefault="Deny" />
				<section name="isapiCgiRestriction" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
				<section name="requestFiltering" overrideModeDefault="Allow" />
			</sectionGroup>
			<section name="serverRuntime" overrideModeDefault="Deny" />
			<section name="serverSideInclude" overrideModeDefault="Deny" />
			<section name="staticContent" overrideModeDefault="Allow" />
			<sectionGroup name="tracing">
				<section name="traceFailedRequests" overrideModeDefault="Allow" />
				<section name="traceProviderDefinitions" overrideModeDefault="Deny" />
			</sectionGroup>
			<section name="urlCompression" overrideModeDefault="Allow" />
			<section name="validation" overrideModeDefault="Allow" />
			<sectionGroup name="webdav">
				<section name="globalSettings" overrideModeDefault="Deny" />
				<section name="authoring" overrideModeDefault="Deny" />
				<section name="authoringRules" overrideModeDefault="Deny" />
			</sectionGroup>
			<sectionGroup name="rewrite">
				<section name="allowedServerVariables" overrideModeDefault="Deny" />
				<section name="rules" overrideModeDefault="Allow" />
				<section name="outboundRules" overrideModeDefault="Allow" />
				<section name="globalRules" overrideModeDefault="Deny" allowDefinition="AppHostOnly" />
				<section name="providers" overrideModeDefault="Allow" />
				<section name="rewriteMaps" overrideModeDefault="Allow" />
			</sectionGroup>
			<section name="webSocket" overrideModeDefault="Deny" />
			<section name="aspNetCore" overrideModeDefault="Allow" /></sectionGroup>
	</configSections>
	<configProtectedData>
		<providers>
			<add name="IISWASOnlyRsaProvider" type="" description="Uses RsaCryptoServiceProvider to encrypt and decrypt" keyContainerName="iisWasKey" cspProviderName="" useMachineContainer="true" useOAEP="false" />
			<add name="AesProvider" type="Microsoft.ApplicationHost.AesProtectedConfigurationProvider" description="Uses an AES session key to encrypt and decrypt" keyContainerName="iisConfigurationKey" cspProviderName="" useOAEP="false" useMachineContainer="true" sessionKey="AQIAAA5mAAAApAAA/HKxkz6alrlAPez0IUgujj/6k3WxCDriHp6jvpv3yEZmo7h6SMzGLxo4mTrIQVHSkB7tmElHKfUFTzE2BWF7nFWHY6Z6qmGBauFzwJMwESjril7Gjz69RBFH259HQ6aRDq9Xfx7U7H4HtdmnKNqGjgl/hwPQBGeIlWiDh+sYv3vKB0QU971tjX6H2B+9armlnC8UOuA6JYMDMI/VLLL16sng0fWAy5JYe0YVABVjiAWDW264RZW9Tr1Oax4qHZKg+SdjULxeOc2YmpX+d0yeITo1HkPF1hN1gHpIPIUDo05ilHUNfR3OkjVCIQK4cFKCq1s8NH+y+13MxUC4Fn1AlQ==" />
			<add name="IISWASOnlyAesProvider" type="Microsoft.ApplicationHost.AesProtectedConfigurationProvider" description="Uses an AES session key to encrypt and decrypt" keyContainerName="iisWasKey" cspProviderName="" useOAEP="false" useMachineContainer="true" sessionKey="AQIAAA5mAAAApAAALmU8lTC+v2qtfQiiiquvvLpUQqKLEXs+jSKoWCM/uPhyB++k4dwug19mGidNK5FYiWK2KYE1yhjVJcbp12E98Q0R2nT7eBiCMY2JairxQ591rqABK7keGaIjwH7PwGzSpILl3RJ4YFvJ/7ZXEJxeDZIjW8ZxWVXx+/VyHs9U3WguLEkgMUX3jrxJi8LouxaIVPJAv/YQ1ZCWs8zImitxX/C/7o7yaIxznfsN5nGQzQfpUDPeby99aw2zPVTtZI2LaWIBON8guABvZ6JtJVDWmfdK6sodbnwdZkr6/Z2rfvamT1dC1SpQrGG7ulR/f9/GXvCaW10ZVKxekBF/CYlNMg==" />
		</providers>
	</configProtectedData>
	<system.applicationHost>
		<applicationPools>
			<add name="Clr4IntegratedAppPool" managedRuntimeVersion="v4.0" managedPipelineMode="Integrated" CLRConfigFile="%IIS_USER_HOME%\config\aspnet.config" autoStart="true" />
			<add name="Clr4ClassicAppPool" managedRuntimeVersion="v4.0" managedPipelineMode="Classic" CLRConfigFile="%IIS_USER_HOME%\config\aspnet.config" autoStart="true" />
			<add name="Clr2IntegratedAppPool" managedRuntimeVersion="v2.0" managedPipelineMode="Integrated" CLRConfigFile="%IIS_USER_HOME%\config\aspnet.config" autoStart="true" />
			<add name="Clr2ClassicAppPool" managedRuntimeVersion="v2.0" managedPipelineMode="Classic" CLRConfigFile="%IIS_USER_HOME%\config\aspnet.config" autoStart="true" />
			<add name="UnmanagedClassicAppPool" managedRuntimeVersion="" managedPipelineMode="Classic" autoStart="true" />
			<applicationPoolDefaults managedRuntimeVersion="v4.0">
				<processModel loadUserProfile="true" setProfileEnvironment="false" />
			</applicationPoolDefaults>
		</applicationPools>
		<!--

          The <listenerAdapters> section defines the protocols with which the
          Windows Process Activation Service (WAS) binds.

        -->
		<listenerAdapters>
			<add name="http" />
		</listenerAdapters>
		<sites>
			<site name="WebSite1" id="1" serverAutoStart="true">
				<application path="/">
					<virtualDirectory path="/" physicalPath="%IIS_SITES_HOME%\WebSite1" />
				</application>
				<bindings>
					<binding protocol="http" bindingInformation=":8080:localhost" />
				</bindings>
			</site>
			<siteDefaults>
				<!-- To enable logging, please change the below attribute "enabled" to "true" -->
				<logFile logFormat="W3C" directory="%AppData%\Microsoft\IISExpressLogs" enabled="false" />
				<traceFailedRequestsLogging directory="%AppData%\Microsoft" enabled="false" maxLogFileSizeKB="1024" />
			</siteDefaults>
			<applicationDefaults applicationPool="Clr4IntegratedAppPool" />
			<virtualDirectoryDefaults allowSubDirConfig="true" />
		</sites>
		<webLimits />
	</system.applicationHost>
	<system.webServer>
		<serverRuntime />
		<asp scriptErrorSentToBrowser="true">
			<cache diskTemplateCacheDirectory="%TEMP%\iisexpress\ASP Compiled Templates" />
			<limits />
		</asp>
		<caching enabled="true" enableKernelCache="true">
		</caching>
		<cgi />
		<defaultDocument enabled="true">
			<files>
				<add value="Default.htm" />
				<add value="Default.asp" />
				<add value="index.htm" />
				<add value="index.html" />
				<add value="iisstart.htm" />
				<add value="default.aspx" />
			</files>
		</defaultDocument>
		<directoryBrowse enabled="false" />
		<fastCgi />
		<!--

          The <globalModules> section defines all native-code modules.
          To enable a module, specify it in the <modules> section.

        -->
		<globalModules>
			<add name="HttpLoggingModule" image="%IIS_BIN%\loghttp.dll" />
			<add name="UriCacheModule" image="%IIS_BIN%\cachuri.dll" />
			<add name="TokenCacheModule" image="%IIS_BIN%\cachtokn.dll" />
			<add name="DynamicCompressionModule" image="%IIS_BIN%\compdyn.dll" />
			<add name="StaticCompressionModule" image="%IIS_BIN%\compstat.dll" />
			<add name="DefaultDocumentModule" image="%IIS_BIN%\defdoc.dll" />
			<add name="DirectoryListingModule" image="%IIS_BIN%\dirlist.dll" />
			<add name="ProtocolSupportModule" image="%IIS_BIN%\protsup.dll" />
			<add name="HttpRedirectionModule" image="%IIS_BIN%\redirect.dll" />
			<add name="ServerSideIncludeModule" image="%IIS_BIN%\iis_ssi.dll" />
			<add name="StaticFileModule" image="%IIS_BIN%\static.dll" />
			<add name="AnonymousAuthenticationModule" image="%IIS_BIN%\authanon.dll" />
			<add name="CertificateMappingAuthenticationModule" image="%IIS_BIN%\authcert.dll" />
			<add name="UrlAuthorizationModule" image="%IIS_BIN%\urlauthz.dll" />
			<add name="BasicAuthenticationModule" image="%IIS_BIN%\authbas.dll" />
			<add name="WindowsAuthenticationModule" image="%IIS_BIN%\authsspi.dll" />
			<add name="IISCertificateMappingAuthenticationModule" image="%IIS_BIN%\authmap.dll" />
			<add name="IpRestrictionModule" image="%IIS_BIN%\iprestr.dll" />
			<add name="DynamicIpRestrictionModule" image="%IIS_BIN%\diprestr.dll" />
			<add name="RequestFilteringModule" image="%IIS_BIN%\modrqflt.dll" />
			<add name="CustomLoggingModule" image="%IIS_BIN%\logcust.dll" />
			<add name="CustomErrorModule" image="%IIS_BIN%\custerr.dll" />
			<add name="FailedRequestsTracingModule" image="%IIS_BIN%\iisfreb.dll" />
			<add name="RequestMonitorModule" image="%IIS_BIN%\iisreqs.dll" />
			<add name="IsapiModule" image="%IIS_BIN%\isapi.dll" />
			<add name="IsapiFilterModule" image="%IIS_BIN%\filter.dll" />
			<add name="CgiModule" image="%IIS_BIN%\cgi.dll" />
			<add name="FastCgiModule" image="%IIS_BIN%\iisfcgi.dll" />
			<!--            <add name="WebDAVModule" image="%IIS_BIN%\webdav.dll" /> -->
			<add name="RewriteModule" image="%IIS_BIN%\rewrite.dll" />
			<add name="ConfigurationValidationModule" image="%IIS_BIN%\validcfg.dll" />
			<add name="WebSocketModule" image="%IIS_BIN%\iiswsock.dll" />
			<add name="WebMatrixSupportModule" image="%IIS_BIN%\webmatrixsup.dll" />
			<add name="ManagedEngine" image="%windir%\Microsoft.NET\Framework\v2.0.50727\webengine.dll" preCondition="integratedMode,runtimeVersionv2.0,bitness32" />
			<add name="ManagedEngine64" image="%windir%\Microsoft.NET\Framework64\v2.0.50727\webengine.dll" preCondition="integratedMode,runtimeVersionv2.0,bitness64" />
			<add name="ManagedEngineV4.0_32bit" image="%windir%\Microsoft.NET\Framework\v4.0.30319\webengine4.dll" preCondition="integratedMode,runtimeVersionv4.0,bitness32" />
			<add name="ManagedEngineV4.0_64bit" image="%windir%\Microsoft.NET\Framework64\v4.0.30319\webengine4.dll" preCondition="integratedMode,runtimeVersionv4.0,bitness64" />
			<add name="ApplicationInitializationModule" image="%IIS_BIN%\warmup.dll" />
            <add name="AspNetCoreModuleV2" image="%IIS_BIN%\Asp.Net Core Module\V2\aspnetcorev2.dll" />
		</globalModules>
		<httpCompression directory="%TEMP%">
			<scheme name="gzip" dll="%IIS_BIN%\gzip.dll" />
			<dynamicTypes>
				<add mimeType="text/*" enabled="true" />
				<add mimeType="message/*" enabled="true" />
				<add mimeType="application/x-javascript" enabled="true" />
				<add mimeType="application/javascript" enabled="true" />
				<add mimeType="*/*" enabled="false" />
                <add mimeType="text/event-stream" enabled="false" />
			</dynamicTypes>
			<staticTypes>
				<add mimeType="text/*" enabled="true" />
				<add mimeType="message/*" enabled="true" />
				<add mimeType="application/javascript" enabled="true" />
				<add mimeType="application/atom+xml" enabled="true" />
				<add mimeType="application/xaml+xml" enabled="true" />
				<add mimeType="image/svg+xml" enabled="true" />
				<add mimeType="*/*" enabled="false" />
			</staticTypes>
		</httpCompression>
		<httpErrors lockAttributes="allowAbsolutePathsWhenDelegated,defaultPath">
			<error statusCode="401" prefixLanguageFilePath="%IIS_BIN%\custerr" path="401.htm" />
			<error statusCode="403" prefixLanguageFilePath="%IIS_BIN%\custerr" path="403.htm" />
			<error statusCode="404" prefixLanguageFilePath="%IIS_BIN%\custerr" path="404.htm" />
			<error statusCode="405" prefixLanguageFilePath="%IIS_BIN%\custerr" path="405.htm" />
			<error statusCode="406" prefixLanguageFilePath="%IIS_BIN%\custerr" path="406.htm" />
			<error statusCode="412" prefixLanguageFilePath="%IIS_BIN%\custerr" path="412.htm" />
			<error statusCode="500" prefixLanguageFilePath="%IIS_BIN%\custerr" path="500.htm" />
			<error statusCode="501" prefixLanguageFilePath="%IIS_BIN%\custerr" path="501.htm" />
			<error statusCode="502" prefixLanguageFilePath="%IIS_BIN%\custerr" path="502.htm" />
		</httpErrors>
		<httpLogging dontLog="false" />
		<httpProtocol>
			<customHeaders>
				<clear />
				<add name="X-Powered-By" value="ASP.NET" />
			</customHeaders>
			<redirectHeaders>
				<clear />
			</redirectHeaders>
		</httpProtocol>
		<httpRedirect enabled="false" />
		<httpTracing />
		<isapiFilters>
			<filter name="ASP.Net_2.0.50727-64" path="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_filter.dll" enableCache="true" preCondition="bitness64,runtimeVersionv2.0" />
			<filter name="ASP.Net_2.0.50727.0" path="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_filter.dll" enableCache="true" preCondition="bitness32,runtimeVersionv2.0" />
			<filter name="ASP.Net_2.0_for_v1.1" path="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_filter.dll" enableCache="true" preCondition="runtimeVersionv1.1" />
			<filter name="ASP.Net_4.0_32bit" path="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_filter.dll" enableCache="true" preCondition="bitness32,runtimeVersionv4.0" />
			<filter name="ASP.Net_4.0_64bit" path="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_filter.dll" enableCache="true" preCondition="bitness64,runtimeVersionv4.0" />
		</isapiFilters>
		<odbcLogging />
		<security>
			<access sslFlags="None" />
			<applicationDependencies>
				<application name="Active Server Pages" groupId="ASP" />
			</applicationDependencies>
			<authentication>
				<anonymousAuthentication enabled="true" userName="" />
				<basicAuthentication enabled="false" />
				<clientCertificateMappingAuthentication enabled="false" />
				<digestAuthentication enabled="false" />
				<iisClientCertificateMappingAuthentication enabled="false">
				</iisClientCertificateMappingAuthentication>
				<windowsAuthentication enabled="false">
					<providers>
						<add value="Negotiate" />
						<add value="NTLM" />
					</providers>
				</windowsAuthentication>
			</authentication>
			<authorization>
				<add accessType="Allow" users="*" />
			</authorization>
			<ipSecurity allowUnlisted="true" />
			<isapiCgiRestriction notListedIsapisAllowed="true" notListedCgisAllowed="true">
				<add path="%windir%\Microsoft.NET\Framework64\v4.0.30319\webengine4.dll" allowed="true" groupId="ASP.NET_v4.0" description="ASP.NET_v4.0" />
				<add path="%windir%\Microsoft.NET\Framework\v4.0.30319\webengine4.dll" allowed="true" groupId="ASP.NET_v4.0" description="ASP.NET_v4.0" />
				<add path="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" allowed="true" groupId="ASP.NET v2.0.50727" description="ASP.NET v2.0.50727" />
				<add path="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" allowed="true" groupId="ASP.NET v2.0.50727" description="ASP.NET v2.0.50727" />
			</isapiCgiRestriction>
			<requestFiltering>
				<fileExtensions allowUnlisted="true" applyToWebDAV="true">
					<add fileExtension=".asa" allowed="false" />
					<add fileExtension=".asax" allowed="false" />
					<add fileExtension=".ascx" allowed="false" />
					<add fileExtension=".master" allowed="false" />
					<add fileExtension=".skin" allowed="false" />
					<add fileExtension=".browser" allowed="false" />
					<add fileExtension=".sitemap" allowed="false" />
					<add fileExtension=".config" allowed="false" />
					<add fileExtension=".cs" allowed="false" />
					<add fileExtension=".csproj" allowed="false" />
					<add fileExtension=".vb" allowed="false" />
					<add fileExtension=".vbproj" allowed="false" />
					<add fileExtension=".webinfo" allowed="false" />
					<add fileExtension=".licx" allowed="false" />
					<add fileExtension=".resx" allowed="false" />
					<add fileExtension=".resources" allowed="false" />
					<add fileExtension=".mdb" allowed="false" />
					<add fileExtension=".vjsproj" allowed="false" />
					<add fileExtension=".java" allowed="false" />
					<add fileExtension=".jsl" allowed="false" />
					<add fileExtension=".ldb" allowed="false" />
					<add fileExtension=".dsdgm" allowed="false" />
					<add fileExtension=".ssdgm" allowed="false" />
					<add fileExtension=".lsad" allowed="false" />
					<add fileExtension=".ssmap" allowed="false" />
					<add fileExtension=".cd" allowed="false" />
					<add fileExtension=".dsprototype" allowed="false" />
					<add fileExtension=".lsaprototype" allowed="false" />
					<add fileExtension=".sdm" allowed="false" />
					<add fileExtension=".sdmDocument" allowed="false" />
					<add fileExtension=".mdf" allowed="false" />
					<add fileExtension=".ldf" allowed="false" />
					<add fileExtension=".ad" allowed="false" />
					<add fileExtension=".dd" allowed="false" />
					<add fileExtension=".ldd" allowed="false" />
					<add fileExtension=".sd" allowed="false" />
					<add fileExtension=".adprototype" allowed="false" />
					<add fileExtension=".lddprototype" allowed="false" />
					<add fileExtension=".exclude" allowed="false" />
					<add fileExtension=".refresh" allowed="false" />
					<add fileExtension=".compiled" allowed="false" />
					<add fileExtension=".msgx" allowed="false" />
					<add fileExtension=".vsdisco" allowed="false" />
					<add fileExtension=".rules" allowed="false" />
				</fileExtensions>
				<verbs allowUnlisted="true" applyToWebDAV="true" />
				<hiddenSegments applyToWebDAV="true">
					<add segment="web.config" />
					<add segment="bin" />
					<add segment="App_code" />
					<add segment="App_GlobalResources" />
					<add segment="App_LocalResources" />
					<add segment="App_WebReferences" />
					<add segment="App_Data" />
					<add segment="App_Browsers" />
				</hiddenSegments>
			</requestFiltering>
		</security>
		<serverSideInclude ssiExecDisable="false" />
		<staticContent lockAttributes="isDocFooterFileName">
			<mimeMap fileExtension=".323" mimeType="text/h323" />
			<mimeMap fileExtension=".3g2" mimeType="video/3gpp2" />
			<mimeMap fileExtension=".3gp2" mimeType="video/3gpp2" />
			<mimeMap fileExtension=".3gp" mimeType="video/3gpp" />
			<mimeMap fileExtension=".3gpp" mimeType="video/3gpp" />
			<mimeMap fileExtension=".aac" mimeType="audio/aac" />
			<mimeMap fileExtension=".aaf" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".aca" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".accdb" mimeType="application/msaccess" />
			<mimeMap fileExtension=".accde" mimeType="application/msaccess" />
			<mimeMap fileExtension=".accdt" mimeType="application/msaccess" />
			<mimeMap fileExtension=".acx" mimeType="application/internet-property-stream" />
			<mimeMap fileExtension=".adt" mimeType="audio/vnd.dlna.adts" />
			<mimeMap fileExtension=".adts" mimeType="audio/vnd.dlna.adts" />
			<mimeMap fileExtension=".afm" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".ai" mimeType="application/postscript" />
			<mimeMap fileExtension=".aif" mimeType="audio/x-aiff" />
			<mimeMap fileExtension=".aifc" mimeType="audio/aiff" />
			<mimeMap fileExtension=".aiff" mimeType="audio/aiff" />
			<mimeMap fileExtension=".appcache" mimeType="text/cache-manifest" />
			<mimeMap fileExtension=".application" mimeType="application/x-ms-application" />
			<mimeMap fileExtension=".art" mimeType="image/x-jg" />
			<mimeMap fileExtension=".asd" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".asf" mimeType="video/x-ms-asf" />
			<mimeMap fileExtension=".asi" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".asm" mimeType="text/plain" />
			<mimeMap fileExtension=".asr" mimeType="video/x-ms-asf" />
			<mimeMap fileExtension=".asx" mimeType="video/x-ms-asf" />
			<mimeMap fileExtension=".atom" mimeType="application/atom+xml" />
			<mimeMap fileExtension=".au" mimeType="audio/basic" />
			<mimeMap fileExtension=".avi" mimeType="video/avi" />
			<mimeMap fileExtension=".axs" mimeType="application/olescript" />
			<mimeMap fileExtension=".bas" mimeType="text/plain" />
			<mimeMap fileExtension=".bcpio" mimeType="application/x-bcpio" />
			<mimeMap fileExtension=".bin" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".bmp" mimeType="image/bmp" />
			<mimeMap fileExtension=".c" mimeType="text/plain" />
			<mimeMap fileExtension=".cab" mimeType="application/vnd.ms-cab-compressed" />
			<mimeMap fileExtension=".calx" mimeType="application/vnd.ms-office.calx" />
			<mimeMap fileExtension=".cat" mimeType="application/vnd.ms-pki.seccat" />
			<mimeMap fileExtension=".cdf" mimeType="application/x-cdf" />
			<mimeMap fileExtension=".chm" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".class" mimeType="application/x-java-applet" />
			<mimeMap fileExtension=".clp" mimeType="application/x-msclip" />
			<mimeMap fileExtension=".cmx" mimeType="image/x-cmx" />
			<mimeMap fileExtension=".cnf" mimeType="text/plain" />
			<mimeMap fileExtension=".cod" mimeType="image/cis-cod" />
			<mimeMap fileExtension=".cpio" mimeType="application/x-cpio" />
			<mimeMap fileExtension=".cpp" mimeType="text/plain" />
			<mimeMap fileExtension=".crd" mimeType="application/x-mscardfile" />
			<mimeMap fileExtension=".crl" mimeType="application/pkix-crl" />
			<mimeMap fileExtension=".crt" mimeType="application/x-x509-ca-cert" />
			<mimeMap fileExtension=".csh" mimeType="application/x-csh" />
			<mimeMap fileExtension=".css" mimeType="text/css" />
			<mimeMap fileExtension=".csv" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".cur" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".dcr" mimeType="application/x-director" />
			<mimeMap fileExtension=".deploy" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".der" mimeType="application/x-x509-ca-cert" />
			<mimeMap fileExtension=".dib" mimeType="image/bmp" />
			<mimeMap fileExtension=".dir" mimeType="application/x-director" />
			<mimeMap fileExtension=".disco" mimeType="text/xml" />
			<mimeMap fileExtension=".dll" mimeType="application/x-msdownload" />
			<mimeMap fileExtension=".dll.config" mimeType="text/xml" />
			<mimeMap fileExtension=".dlm" mimeType="text/dlm" />
			<mimeMap fileExtension=".doc" mimeType="application/msword" />
			<mimeMap fileExtension=".docm" mimeType="application/vnd.ms-word.document.macroEnabled.12" />
			<mimeMap fileExtension=".docx" mimeType="application/vnd.openxmlformats-officedocument.wordprocessingml.document" />
			<mimeMap fileExtension=".dot" mimeType="application/msword" />
			<mimeMap fileExtension=".dotm" mimeType="application/vnd.ms-word.template.macroEnabled.12" />
			<mimeMap fileExtension=".dotx" mimeType="application/vnd.openxmlformats-officedocument.wordprocessingml.template" />
			<mimeMap fileExtension=".dsp" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".dtd" mimeType="text/xml" />
			<mimeMap fileExtension=".dvi" mimeType="application/x-dvi" />
			<mimeMap fileExtension=".dvr-ms" mimeType="video/x-ms-dvr" />
			<mimeMap fileExtension=".dwf" mimeType="drawing/x-dwf" />
			<mimeMap fileExtension=".dwp" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".dxr" mimeType="application/x-director" />
			<mimeMap fileExtension=".eml" mimeType="message/rfc822" />
			<mimeMap fileExtension=".emz" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".eot" mimeType="application/vnd.ms-fontobject" />
			<mimeMap fileExtension=".eps" mimeType="application/postscript" />
			<mimeMap fileExtension=".esd" mimeType="application/vnd.ms-cab-compressed" />
			<mimeMap fileExtension=".etx" mimeType="text/x-setext" />
			<mimeMap fileExtension=".evy" mimeType="application/envoy" />
			<mimeMap fileExtension=".exe" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".exe.config" mimeType="text/xml" />
			<mimeMap fileExtension=".fdf" mimeType="application/vnd.fdf" />
			<mimeMap fileExtension=".fif" mimeType="application/fractals" />
			<mimeMap fileExtension=".fla" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".flr" mimeType="x-world/x-vrml" />
			<mimeMap fileExtension=".flv" mimeType="video/x-flv" />
			<mimeMap fileExtension=".gif" mimeType="image/gif" />
			<mimeMap fileExtension=".glb" mimeType="model/gltf-binary" />
			<mimeMap fileExtension=".gtar" mimeType="application/x-gtar" />
			<mimeMap fileExtension=".gz" mimeType="application/x-gzip" />
			<mimeMap fileExtension=".h" mimeType="text/plain" />
			<mimeMap fileExtension=".hdf" mimeType="application/x-hdf" />
			<mimeMap fileExtension=".hdml" mimeType="text/x-hdml" />
			<mimeMap fileExtension=".hhc" mimeType="application/x-oleobject" />
			<mimeMap fileExtension=".hhk" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".hhp" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".hlp" mimeType="application/winhlp" />
			<mimeMap fileExtension=".hqx" mimeType="application/mac-binhex40" />
			<mimeMap fileExtension=".hta" mimeType="application/hta" />
			<mimeMap fileExtension=".htc" mimeType="text/x-component" />
			<mimeMap fileExtension=".htm" mimeType="text/html" />
			<mimeMap fileExtension=".html" mimeType="text/html" />
			<mimeMap fileExtension=".htt" mimeType="text/webviewhtml" />
			<mimeMap fileExtension=".hxt" mimeType="text/html" />
			<mimeMap fileExtension=".ico" mimeType="image/x-icon" />
			<mimeMap fileExtension=".ics" mimeType="text/calendar" />
			<mimeMap fileExtension=".ief" mimeType="image/ief" />
			<mimeMap fileExtension=".iii" mimeType="application/x-iphone" />
			<mimeMap fileExtension=".inf" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".ins" mimeType="application/x-internet-signup" />
			<mimeMap fileExtension=".isp" mimeType="application/x-internet-signup" />
			<mimeMap fileExtension=".IVF" mimeType="video/x-ivf" />
			<mimeMap fileExtension=".jar" mimeType="application/java-archive" />
			<mimeMap fileExtension=".java" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".jck" mimeType="application/liquidmotion" />
			<mimeMap fileExtension=".jcz" mimeType="application/liquidmotion" />
			<mimeMap fileExtension=".jfif" mimeType="image/pjpeg" />
			<mimeMap fileExtension=".jpb" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".jpe" mimeType="image/jpeg" />
			<mimeMap fileExtension=".jpeg" mimeType="image/jpeg" />
			<mimeMap fileExtension=".jpg" mimeType="image/jpeg" />
			<mimeMap fileExtension=".js" mimeType="application/javascript" />
			<mimeMap fileExtension=".json" mimeType="application/json" />
			<mimeMap fileExtension=".jsonld" mimeType="application/ld+json" />
			<mimeMap fileExtension=".jsx" mimeType="text/jscript" />
			<mimeMap fileExtension=".latex" mimeType="application/x-latex" />
			<mimeMap fileExtension=".less" mimeType="text/css" />
			<mimeMap fileExtension=".lit" mimeType="application/x-ms-reader" />
			<mimeMap fileExtension=".lpk" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".lsf" mimeType="video/x-la-asf" />
			<mimeMap fileExtension=".lsx" mimeType="video/x-la-asf" />
			<mimeMap fileExtension=".lzh" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".m13" mimeType="application/x-msmediaview" />
			<mimeMap fileExtension=".m14" mimeType="application/x-msmediaview" />
			<mimeMap fileExtension=".m1v" mimeType="video/mpeg" />
			<mimeMap fileExtension=".m2ts" mimeType="video/vnd.dlna.mpeg-tts" />
			<mimeMap fileExtension=".m3u" mimeType="audio/x-mpegurl" />
			<mimeMap fileExtension=".m4a" mimeType="audio/mp4" />
			<mimeMap fileExtension=".m4v" mimeType="video/mp4" />
			<mimeMap fileExtension=".man" mimeType="application/x-troff-man" />
			<mimeMap fileExtension=".manifest" mimeType="application/x-ms-manifest" />
			<mimeMap fileExtension=".map" mimeType="text/plain" />
			<mimeMap fileExtension=".mdb" mimeType="application/x-msaccess" />
			<mimeMap fileExtension=".mdp" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".me" mimeType="application/x-troff-me" />
			<mimeMap fileExtension=".mht" mimeType="message/rfc822" />
			<mimeMap fileExtension=".mhtml" mimeType="message/rfc822" />
			<mimeMap fileExtension=".mid" mimeType="audio/mid" />
			<mimeMap fileExtension=".midi" mimeType="audio/mid" />
			<mimeMap fileExtension=".mix" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".mmf" mimeType="application/x-smaf" />
			<mimeMap fileExtension=".mno" mimeType="text/xml" />
			<mimeMap fileExtension=".mny" mimeType="application/x-msmoney" />
			<mimeMap fileExtension=".mov" mimeType="video/quicktime" />
			<mimeMap fileExtension=".movie" mimeType="video/x-sgi-movie" />
			<mimeMap fileExtension=".mp2" mimeType="video/mpeg" />
			<mimeMap fileExtension=".mp3" mimeType="audio/mpeg" />
			<mimeMap fileExtension=".mp4" mimeType="video/mp4" />
			<mimeMap fileExtension=".mp4v" mimeType="video/mp4" />
			<mimeMap fileExtension=".mpa" mimeType="video/mpeg" />
			<mimeMap fileExtension=".mpe" mimeType="video/mpeg" />
			<mimeMap fileExtension=".mpeg" mimeType="video/mpeg" />
			<mimeMap fileExtension=".mpg" mimeType="video/mpeg" />
			<mimeMap fileExtension=".mpp" mimeType="application/vnd.ms-project" />
			<mimeMap fileExtension=".mpv2" mimeType="video/mpeg" />
			<mimeMap fileExtension=".ms" mimeType="application/x-troff-ms" />
			<mimeMap fileExtension=".msi" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".mso" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".mvb" mimeType="application/x-msmediaview" />
			<mimeMap fileExtension=".mvc" mimeType="application/x-miva-compiled" />
			<mimeMap fileExtension=".nc" mimeType="application/x-netcdf" />
			<mimeMap fileExtension=".nsc" mimeType="video/x-ms-asf" />
			<mimeMap fileExtension=".nws" mimeType="message/rfc822" />
			<mimeMap fileExtension=".ocx" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".oda" mimeType="application/oda" />
			<mimeMap fileExtension=".odc" mimeType="text/x-ms-odc" />
			<mimeMap fileExtension=".ods" mimeType="application/oleobject" />
			<mimeMap fileExtension=".oga" mimeType="audio/ogg" />
			<mimeMap fileExtension=".ogg" mimeType="video/ogg" />
			<mimeMap fileExtension=".ogv" mimeType="video/ogg" />
			<mimeMap fileExtension=".one" mimeType="application/onenote" />
			<mimeMap fileExtension=".onea" mimeType="application/onenote" />
			<mimeMap fileExtension=".onetoc" mimeType="application/onenote" />
			<mimeMap fileExtension=".onetoc2" mimeType="application/onenote" />
			<mimeMap fileExtension=".onetmp" mimeType="application/onenote" />
			<mimeMap fileExtension=".onepkg" mimeType="application/onenote" />
			<mimeMap fileExtension=".osdx" mimeType="application/opensearchdescription+xml" />
			<mimeMap fileExtension=".otf" mimeType="font/otf" />
			<mimeMap fileExtension=".p10" mimeType="application/pkcs10" />
			<mimeMap fileExtension=".p12" mimeType="application/x-pkcs12" />
			<mimeMap fileExtension=".p7b" mimeType="application/x-pkcs7-certificates" />
			<mimeMap fileExtension=".p7c" mimeType="application/pkcs7-mime" />
			<mimeMap fileExtension=".p7m" mimeType="application/pkcs7-mime" />
			<mimeMap fileExtension=".p7r" mimeType="application/x-pkcs7-certreqresp" />
			<mimeMap fileExtension=".p7s" mimeType="application/pkcs7-signature" />
			<mimeMap fileExtension=".pbm" mimeType="image/x-portable-bitmap" />
			<mimeMap fileExtension=".pcx" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".pcz" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".pdf" mimeType="application/pdf" />
			<mimeMap fileExtension=".pfb" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".pfm" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".pfx" mimeType="application/x-pkcs12" />
			<mimeMap fileExtension=".pgm" mimeType="image/x-portable-graymap" />
			<mimeMap fileExtension=".pko" mimeType="application/vnd.ms-pki.pko" />
			<mimeMap fileExtension=".pma" mimeType="application/x-perfmon" />
			<mimeMap fileExtension=".pmc" mimeType="application/x-perfmon" />
			<mimeMap fileExtension=".pml" mimeType="application/x-perfmon" />
			<mimeMap fileExtension=".pmr" mimeType="application/x-perfmon" />
			<mimeMap fileExtension=".pmw" mimeType="application/x-perfmon" />
			<mimeMap fileExtension=".png" mimeType="image/png" />
			<mimeMap fileExtension=".pnm" mimeType="image/x-portable-anymap" />
			<mimeMap fileExtension=".pnz" mimeType="image/png" />
			<mimeMap fileExtension=".pot" mimeType="application/vnd.ms-powerpoint" />
			<mimeMap fileExtension=".potm" mimeType="application/vnd.ms-powerpoint.template.macroEnabled.12" />
			<mimeMap fileExtension=".potx" mimeType="application/vnd.openxmlformats-officedocument.presentationml.template" />
			<mimeMap fileExtension=".ppam" mimeType="application/vnd.ms-powerpoint.addin.macroEnabled.12" />
			<mimeMap fileExtension=".ppm" mimeType="image/x-portable-pixmap" />
			<mimeMap fileExtension=".pps" mimeType="application/vnd.ms-powerpoint" />
			<mimeMap fileExtension=".ppsm" mimeType="application/vnd.ms-powerpoint.slideshow.macroEnabled.12" />
			<mimeMap fileExtension=".ppsx" mimeType="application/vnd.openxmlformats-officedocument.presentationml.slideshow" />
			<mimeMap fileExtension=".ppt" mimeType="application/vnd.ms-powerpoint" />
			<mimeMap fileExtension=".pptm" mimeType="application/vnd.ms-powerpoint.presentation.macroEnabled.12" />
			<mimeMap fileExtension=".pptx" mimeType="application/vnd.openxmlformats-officedocument.presentationml.presentation" />
			<mimeMap fileExtension=".prf" mimeType="application/pics-rules" />
			<mimeMap fileExtension=".prm" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".prx" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".ps" mimeType="application/postscript" />
			<mimeMap fileExtension=".psd" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".psm" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".psp" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".pub" mimeType="application/x-mspublisher" />
			<mimeMap fileExtension=".qt" mimeType="video/quicktime" />
			<mimeMap fileExtension=".qtl" mimeType="application/x-quicktimeplayer" />
			<mimeMap fileExtension=".qxd" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".ra" mimeType="audio/x-pn-realaudio" />
			<mimeMap fileExtension=".ram" mimeType="audio/x-pn-realaudio" />
			<mimeMap fileExtension=".rar" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".ras" mimeType="image/x-cmu-raster" />
			<mimeMap fileExtension=".rf" mimeType="image/vnd.rn-realflash" />
			<mimeMap fileExtension=".rgb" mimeType="image/x-rgb" />
			<mimeMap fileExtension=".rm" mimeType="application/vnd.rn-realmedia" />
			<mimeMap fileExtension=".rmi" mimeType="audio/mid" />
			<mimeMap fileExtension=".roff" mimeType="application/x-troff" />
			<mimeMap fileExtension=".rpm" mimeType="audio/x-pn-realaudio-plugin" />
			<mimeMap fileExtension=".rtf" mimeType="application/rtf" />
			<mimeMap fileExtension=".rtx" mimeType="text/richtext" />
			<mimeMap fileExtension=".scd" mimeType="application/x-msschedule" />
			<mimeMap fileExtension=".sct" mimeType="text/scriptlet" />
			<mimeMap fileExtension=".sea" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".setpay" mimeType="application/set-payment-initiation" />
			<mimeMap fileExtension=".setreg" mimeType="application/set-registration-initiation" />
			<mimeMap fileExtension=".sgml" mimeType="text/sgml" />
			<mimeMap fileExtension=".sh" mimeType="application/x-sh" />
			<mimeMap fileExtension=".shar" mimeType="application/x-shar" />
			<mimeMap fileExtension=".sit" mimeType="application/x-stuffit" />
			<mimeMap fileExtension=".sldm" mimeType="application/vnd.ms-powerpoint.slide.macroEnabled.12" />
			<mimeMap fileExtension=".sldx" mimeType="application/vnd.openxmlformats-officedocument.presentationml.slide" />
			<mimeMap fileExtension=".smd" mimeType="audio/x-smd" />
			<mimeMap fileExtension=".smi" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".smx" mimeType="audio/x-smd" />
			<mimeMap fileExtension=".smz" mimeType="audio/x-smd" />
			<mimeMap fileExtension=".snd" mimeType="audio/basic" />
			<mimeMap fileExtension=".snp" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".spc" mimeType="application/x-pkcs7-certificates" />
			<mimeMap fileExtension=".spl" mimeType="application/futuresplash" />
			<mimeMap fileExtension=".spx" mimeType="audio/ogg" />
			<mimeMap fileExtension=".src" mimeType="application/x-wais-source" />
			<mimeMap fileExtension=".ssm" mimeType="application/streamingmedia" />
			<mimeMap fileExtension=".sst" mimeType="application/vnd.ms-pki.certstore" />
			<mimeMap fileExtension=".stl" mimeType="application/vnd.ms-pki.stl" />
			<mimeMap fileExtension=".sv4cpio" mimeType="application/x-sv4cpio" />
			<mimeMap fileExtension=".sv4crc" mimeType="application/x-sv4crc" />
			<mimeMap fileExtension=".svg" mimeType="image/svg+xml" />
			<mimeMap fileExtension=".svgz" mimeType="image/svg+xml" />
			<mimeMap fileExtension=".swf" mimeType="application/x-shockwave-flash" />
			<mimeMap fileExtension=".t" mimeType="application/x-troff" />
			<mimeMap fileExtension=".tar" mimeType="application/x-tar" />
			<mimeMap fileExtension=".tcl" mimeType="application/x-tcl" />
			<mimeMap fileExtension=".tex" mimeType="application/x-tex" />
			<mimeMap fileExtension=".texi" mimeType="application/x-texinfo" />
			<mimeMap fileExtension=".texinfo" mimeType="application/x-texinfo" />
			<mimeMap fileExtension=".tgz" mimeType="application/x-compressed" />
			<mimeMap fileExtension=".thmx" mimeType="application/vnd.ms-officetheme" />
			<mimeMap fileExtension=".thn" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".tif" mimeType="image/tiff" />
			<mimeMap fileExtension=".tiff" mimeType="image/tiff" />
			<mimeMap fileExtension=".toc" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".tr" mimeType="application/x-troff" />
			<mimeMap fileExtension=".trm" mimeType="application/x-msterminal" />
			<mimeMap fileExtension=".ts" mimeType="video/vnd.dlna.mpeg-tts" />
			<mimeMap fileExtension=".tsv" mimeType="text/tab-separated-values" />
			<mimeMap fileExtension=".ttf" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".tts" mimeType="video/vnd.dlna.mpeg-tts" />
			<mimeMap fileExtension=".txt" mimeType="text/plain" />
			<mimeMap fileExtension=".u32" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".uls" mimeType="text/iuls" />
			<mimeMap fileExtension=".ustar" mimeType="application/x-ustar" />
			<mimeMap fileExtension=".vbs" mimeType="text/vbscript" />
			<mimeMap fileExtension=".vcf" mimeType="text/x-vcard" />
			<mimeMap fileExtension=".vcs" mimeType="text/plain" />
			<mimeMap fileExtension=".vdx" mimeType="application/vnd.ms-visio.viewer" />
			<mimeMap fileExtension=".vml" mimeType="text/xml" />
			<mimeMap fileExtension=".vsd" mimeType="application/vnd.visio" />
			<mimeMap fileExtension=".vss" mimeType="application/vnd.visio" />
			<mimeMap fileExtension=".vst" mimeType="application/vnd.visio" />
			<mimeMap fileExtension=".vsto" mimeType="application/x-ms-vsto" />
			<mimeMap fileExtension=".vsw" mimeType="application/vnd.visio" />
			<mimeMap fileExtension=".vsx" mimeType="application/vnd.visio" />
			<mimeMap fileExtension=".vtx" mimeType="application/vnd.visio" />
			<mimeMap fileExtension=".wasm" mimeType="application/wasm" />
			<mimeMap fileExtension=".wav" mimeType="audio/wav" />
			<mimeMap fileExtension=".wax" mimeType="audio/x-ms-wax" />
			<mimeMap fileExtension=".wbmp" mimeType="image/vnd.wap.wbmp" />
			<mimeMap fileExtension=".wcm" mimeType="application/vnd.ms-works" />
			<mimeMap fileExtension=".wdb" mimeType="application/vnd.ms-works" />
			<mimeMap fileExtension=".webm" mimeType="video/webm" />
			<mimeMap fileExtension=".wks" mimeType="application/vnd.ms-works" />
			<mimeMap fileExtension=".wm" mimeType="video/x-ms-wm" />
			<mimeMap fileExtension=".wma" mimeType="audio/x-ms-wma" />
			<mimeMap fileExtension=".wmd" mimeType="application/x-ms-wmd" />
			<mimeMap fileExtension=".wmf" mimeType="application/x-msmetafile" />
			<mimeMap fileExtension=".wml" mimeType="text/vnd.wap.wml" />
			<mimeMap fileExtension=".wmlc" mimeType="application/vnd.wap.wmlc" />
			<mimeMap fileExtension=".wmls" mimeType="text/vnd.wap.wmlscript" />
			<mimeMap fileExtension=".wmlsc" mimeType="application/vnd.wap.wmlscriptc" />
			<mimeMap fileExtension=".wmp" mimeType="video/x-ms-wmp" />
			<mimeMap fileExtension=".wmv" mimeType="video/x-ms-wmv" />
			<mimeMap fileExtension=".wmx" mimeType="video/x-ms-wmx" />
			<mimeMap fileExtension=".wmz" mimeType="application/x-ms-wmz" />
			<mimeMap fileExtension=".woff" mimeType="font/x-woff" />
			<mimeMap fileExtension=".woff2" mimeType="application/font-woff2" />
			<mimeMap fileExtension=".wps" mimeType="application/vnd.ms-works" />
			<mimeMap fileExtension=".wri" mimeType="application/x-mswrite" />
			<mimeMap fileExtension=".wrl" mimeType="x-world/x-vrml" />
			<mimeMap fileExtension=".wrz" mimeType="x-world/x-vrml" />
			<mimeMap fileExtension=".wsdl" mimeType="text/xml" />
			<mimeMap fileExtension=".wtv" mimeType="video/x-ms-wtv" />
			<mimeMap fileExtension=".wvx" mimeType="video/x-ms-wvx" />
			<mimeMap fileExtension=".x" mimeType="application/directx" />
			<mimeMap fileExtension=".xaf" mimeType="x-world/x-vrml" />
			<mimeMap fileExtension=".xaml" mimeType="application/xaml+xml" />
			<mimeMap fileExtension=".xap" mimeType="application/x-silverlight-app" />
			<mimeMap fileExtension=".xbap" mimeType="application/x-ms-xbap" />
			<mimeMap fileExtension=".xbm" mimeType="image/x-xbitmap" />
			<mimeMap fileExtension=".xdr" mimeType="text/plain" />
			<mimeMap fileExtension=".xht" mimeType="application/xhtml+xml" />
			<mimeMap fileExtension=".xhtml" mimeType="application/xhtml+xml" />
			<mimeMap fileExtension=".xla" mimeType="application/vnd.ms-excel" />
			<mimeMap fileExtension=".xlam" mimeType="application/vnd.ms-excel.addin.macroEnabled.12" />
			<mimeMap fileExtension=".xlc" mimeType="application/vnd.ms-excel" />
			<mimeMap fileExtension=".xlm" mimeType="application/vnd.ms-excel" />
			<mimeMap fileExtension=".xls" mimeType="application/vnd.ms-excel" />
			<mimeMap fileExtension=".xlsb" mimeType="application/vnd.ms-excel.sheet.binary.macroEnabled.12" />
			<mimeMap fileExtension=".xlsm" mimeType="application/vnd.ms-excel.sheet.macroEnabled.12" />
			<mimeMap fileExtension=".xlsx" mimeType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
			<mimeMap fileExtension=".xlt" mimeType="application/vnd.ms-excel" />
			<mimeMap fileExtension=".xltm" mimeType="application/vnd.ms-excel.template.macroEnabled.12" />
			<mimeMap fileExtension=".xltx" mimeType="application/vnd.openxmlformats-officedocument.spreadsheetml.template" />
			<mimeMap fileExtension=".xlw" mimeType="application/vnd.ms-excel" />
			<mimeMap fileExtension=".xml" mimeType="text/xml" />
			<mimeMap fileExtension=".xof" mimeType="x-world/x-vrml" />
			<mimeMap fileExtension=".xpm" mimeType="image/x-xpixmap" />
			<mimeMap fileExtension=".xps" mimeType="application/vnd.ms-xpsdocument" />
			<mimeMap fileExtension=".xsd" mimeType="text/xml" />
			<mimeMap fileExtension=".xsf" mimeType="text/xml" />
			<mimeMap fileExtension=".xsl" mimeType="text/xml" />
			<mimeMap fileExtension=".xslt" mimeType="text/xml" />
			<mimeMap fileExtension=".xsn" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".xtp" mimeType="application/octet-stream" />
			<mimeMap fileExtension=".xwd" mimeType="image/x-xwindowdump" />
			<mimeMap fileExtension=".z" mimeType="application/x-compress" />
			<mimeMap fileExtension=".zip" mimeType="application/x-zip-compressed" />
		</staticContent>
		<tracing>
			<traceFailedRequests>
				<add path="*">
					<traceAreas>
						<add provider="ASP" verbosity="Verbose" />
						<add provider="ASPNET" areas="Infrastructure,Module,Page,AppServices" verbosity="Verbose" />
						<add provider="ISAPI Extension" verbosity="Verbose" />
						<add provider="WWW Server" areas="Authentication,Security,Filter,StaticFile,CGI,Compression,Cache,RequestNotifications,Module,Rewrite,WebSocket" verbosity="Verbose" />
					</traceAreas>
					<failureDefinitions statusCodes="200-999" />
				</add>
			</traceFailedRequests>
			<traceProviderDefinitions>
				<add name="WWW Server" guid="{3a2a4e84-4c21-4981-ae10-3fda0d9b0f83}">
					<areas>
						<clear />
						<add name="Authentication" value="2" />
						<add name="Security" value="4" />
						<add name="Filter" value="8" />
						<add name="StaticFile" value="16" />
						<add name="CGI" value="32" />
						<add name="Compression" value="64" />
						<add name="Cache" value="128" />
						<add name="RequestNotifications" value="256" />
						<add name="Module" value="512" />
						<add name="Rewrite" value="1024" />
						<add name="FastCGI" value="4096" />
						<add name="WebSocket" value="16384" />
                        <add name="ANCM" value="65536" />
					</areas>
				</add>
				<add name="ASP" guid="{06b94d9a-b15e-456e-a4ef-37c984a2cb4b}">
					<areas>
						<clear />
					</areas>
				</add>
				<add name="ISAPI Extension" guid="{a1c2040e-8840-4c31-ba11-9871031a19ea}">
					<areas>
						<clear />
					</areas>
				</add>
				<add name="ASPNET" guid="{AFF081FE-0247-4275-9C4E-021F3DC1DA35}">
					<areas>
						<add name="Infrastructure" value="1" />
						<add name="Module" value="2" />
						<add name="Page" value="4" />
						<add name="AppServices" value="8" />
					</areas>
				</add>
			</traceProviderDefinitions>
		</tracing>
		<urlCompression />
		<validation />
		<webdav>
			<globalSettings>
				<propertyStores>
					<add name="webdav_simple_prop" image="%IIS_BIN%\webdav_simple_prop.dll" image32="%IIS_BIN%\webdav_simple_prop.dll" />
				</propertyStores>
				<lockStores>
					<add name="webdav_simple_lock" image="%IIS_BIN%\webdav_simple_lock.dll" image32="%IIS_BIN%\webdav_simple_lock.dll" />
				</lockStores>
			</globalSettings>
			<authoring>
				<locks enabled="true" lockStore="webdav_simple_lock" />
			</authoring>
			<authoringRules />
		</webdav>
		<webSocket />
		<applicationInitialization />
	</system.webServer>
	<location path="" overrideMode="Allow">
		<system.webServer>
			<modules>
				<add name="IsapiFilterModule" lockItem="true" />
				<add name="BasicAuthenticationModule" lockItem="true" />
				<add name="IsapiModule" lockItem="true" />
				<add name="HttpLoggingModule" lockItem="true" />
				<add name="DynamicCompressionModule" lockItem="true" />
				<add name="StaticCompressionModule" lockItem="true" />
				<add name="DefaultDocumentModule" lockItem="true" />
				<add name="DirectoryListingModule" lockItem="true" />
				<add name="ProtocolSupportModule" lockItem="true" />
				<add name="HttpRedirectionModule" lockItem="true" />
				<add name="ServerSideIncludeModule" lockItem="true" />
				<add name="StaticFileModule" lockItem="true" />
				<add name="AnonymousAuthenticationModule" lockItem="true" />
				<add name="CertificateMappingAuthenticationModule" lockItem="true" />
				<add name="UrlAuthorizationModule" lockItem="true" />
				<add name="WindowsAuthenticationModule" lockItem="true" />
				<add name="IISCertificateMappingAuthenticationModule" lockItem="true" />
				<add name="WebMatrixSupportModule" lockItem="true" />
				<add name="IpRestrictionModule" lockItem="true" />
				<add name="DynamicIpRestrictionModule" lockItem="true" />
				<add name="RequestFilteringModule" lockItem="true" />
				<add name="CustomLoggingModule" lockItem="true" />
				<add name="CustomErrorModule" lockItem="true" />
				<add name="FailedRequestsTracingModule" lockItem="true" />
				<add name="CgiModule" lockItem="true" />
				<add name="FastCgiModule" lockItem="true" />
				<!--                <add name="WebDAVModule" /> -->
				<add name="RewriteModule" />
				<add name="OutputCache" type="System.Web.Caching.OutputCacheModule" preCondition="managedHandler" />
				<add name="Session" type="System.Web.SessionState.SessionStateModule" preCondition="managedHandler" />
				<add name="WindowsAuthentication" type="System.Web.Security.WindowsAuthenticationModule" preCondition="managedHandler" />
				<add name="FormsAuthentication" type="System.Web.Security.FormsAuthenticationModule" preCondition="managedHandler" />
				<add name="DefaultAuthentication" type="System.Web.Security.DefaultAuthenticationModule" preCondition="managedHandler" />
				<add name="RoleManager" type="System.Web.Security.RoleManagerModule" preCondition="managedHandler" />
				<add name="UrlAuthorization" type="System.Web.Security.UrlAuthorizationModule" preCondition="managedHandler" />
				<add name="FileAuthorization" type="System.Web.Security.FileAuthorizationModule" preCondition="managedHandler" />
				<add name="AnonymousIdentification" type="System.Web.Security.AnonymousIdentificationModule" preCondition="managedHandler" />
				<add name="Profile" type="System.Web.Profile.ProfileModule" preCondition="managedHandler" />
				<add name="UrlMappingsModule" type="System.Web.UrlMappingsModule" preCondition="managedHandler" />
				<add name="ApplicationInitializationModule" lockItem="true" />
				<add name="WebSocketModule" lockItem="true" />
				<add name="ServiceModel-4.0" type="System.ServiceModel.Activation.ServiceHttpModule,System.ServiceModel.Activation,Version=4.0.0.0,Culture=neutral,PublicKeyToken=31bf3856ad364e35" preCondition="managedHandler,runtimeVersionv4.0" />
				<add name="ConfigurationValidationModule" lockItem="true" />
				<add name="UrlRoutingModule-4.0" type="System.Web.Routing.UrlRoutingModule" preCondition="managedHandler,runtimeVersionv4.0" />
				<add name="ScriptModule-4.0" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" preCondition="managedHandler,runtimeVersionv4.0" />
				<add name="ServiceModel" type="System.ServiceModel.Activation.HttpModule, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" preCondition="managedHandler,runtimeVersionv2.0" />
                <add name="AspNetCoreModuleV2" lockItem="true" />
			</modules>
			<handlers accessPolicy="Read, Script">
				<!--                <add name="WebDAV" path="*" verb="PROPFIND,PROPPATCH,MKCOL,PUT,COPY,DELETE,MOVE,LOCK,UNLOCK" modules="WebDAVModule" resourceType="Unspecified" requireAccess="None" /> -->
				<add name="AXD-ISAPI-4.0_64bit" path="*.axd" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
				<add name="PageHandlerFactory-ISAPI-4.0_64bit" path="*.aspx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
				<add name="SimpleHandlerFactory-ISAPI-4.0_64bit" path="*.ashx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
				<add name="WebServiceHandlerFactory-ISAPI-4.0_64bit" path="*.asmx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
				<add name="HttpRemotingHandlerFactory-rem-ISAPI-4.0_64bit" path="*.rem" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
				<add name="HttpRemotingHandlerFactory-soap-ISAPI-4.0_64bit" path="*.soap" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
				<add name="svc-ISAPI-4.0_64bit" path="*.svc" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" />
				<add name="rules-ISAPI-4.0_64bit" path="*.rules" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" />
				<add name="xoml-ISAPI-4.0_64bit" path="*.xoml" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" />
				<add name="xamlx-ISAPI-4.0_64bit" path="*.xamlx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" />
				<add name="aspq-ISAPI-4.0_64bit" path="*.aspq" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
				<add name="cshtm-ISAPI-4.0_64bit" path="*.cshtm" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
				<add name="cshtml-ISAPI-4.0_64bit" path="*.cshtml" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
				<add name="vbhtm-ISAPI-4.0_64bit" path="*.vbhtm" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
				<add name="vbhtml-ISAPI-4.0_64bit" path="*.vbhtml" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
				<add name="svc-Integrated" path="*.svc" verb="*" type="System.ServiceModel.Activation.HttpHandler, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" preCondition="integratedMode,runtimeVersionv2.0" />
				<add name="svc-ISAPI-2.0" path="*.svc" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" />
				<add name="xoml-Integrated" path="*.xoml" verb="*" type="System.ServiceModel.Activation.HttpHandler, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" preCondition="integratedMode,runtimeVersionv2.0" />
				<add name="xoml-ISAPI-2.0" path="*.xoml" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" />
				<add name="rules-Integrated" path="*.rules" verb="*" type="System.ServiceModel.Activation.HttpHandler, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" preCondition="integratedMode,runtimeVersionv2.0" />
				<add name="rules-ISAPI-2.0" path="*.rules" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" />
				<add name="AXD-ISAPI-4.0_32bit" path="*.axd" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
				<add name="PageHandlerFactory-ISAPI-4.0_32bit" path="*.aspx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
				<add name="SimpleHandlerFactory-ISAPI-4.0_32bit" path="*.ashx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
				<add name="WebServiceHandlerFactory-ISAPI-4.0_32bit" path="*.asmx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
				<add name="HttpRemotingHandlerFactory-rem-ISAPI-4.0_32bit" path="*.rem" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
				<add name="HttpRemotingHandlerFactory-soap-ISAPI-4.0_32bit" path="*.soap" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
				<add name="svc-ISAPI-4.0_32bit" path="*.svc" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" />
				<add name="rules-ISAPI-4.0_32bit" path="*.rules" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" />
				<add name="xoml-ISAPI-4.0_32bit" path="*.xoml" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" />
				<add name="xamlx-ISAPI-4.0_32bit" path="*.xamlx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" />
				<add name="aspq-ISAPI-4.0_32bit" path="*.aspq" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
				<add name="cshtm-ISAPI-4.0_32bit" path="*.cshtm" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
				<add name="cshtml-ISAPI-4.0_32bit" path="*.cshtml" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
				<add name="vbhtm-ISAPI-4.0_32bit" path="*.vbhtm" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
				<add name="vbhtml-ISAPI-4.0_32bit" path="*.vbhtml" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
				<add name="TraceHandler-Integrated-4.0" path="trace.axd" verb="GET,HEAD,POST,DEBUG" type="System.Web.Handlers.TraceHandler" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="WebAdminHandler-Integrated-4.0" path="WebAdmin.axd" verb="GET,DEBUG" type="System.Web.Handlers.WebAdminHandler" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="AssemblyResourceLoader-Integrated-4.0" path="WebResource.axd" verb="GET,DEBUG" type="System.Web.Handlers.AssemblyResourceLoader" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="PageHandlerFactory-Integrated-4.0" path="*.aspx" verb="GET,HEAD,POST,DEBUG" type="System.Web.UI.PageHandlerFactory" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="SimpleHandlerFactory-Integrated-4.0" path="*.ashx" verb="GET,HEAD,POST,DEBUG" type="System.Web.UI.SimpleHandlerFactory" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="WebServiceHandlerFactory-Integrated-4.0" path="*.asmx" verb="GET,HEAD,POST,DEBUG" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="HttpRemotingHandlerFactory-rem-Integrated-4.0" path="*.rem" verb="GET,HEAD,POST,DEBUG" type="System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory, System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="HttpRemotingHandlerFactory-soap-Integrated-4.0" path="*.soap" verb="GET,HEAD,POST,DEBUG" type="System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory, System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="svc-Integrated-4.0" path="*.svc" verb="*" type="System.ServiceModel.Activation.ServiceHttpHandlerFactory, System.ServiceModel.Activation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="rules-Integrated-4.0" path="*.rules" verb="*" type="System.ServiceModel.Activation.ServiceHttpHandlerFactory, System.ServiceModel.Activation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="xoml-Integrated-4.0" path="*.xoml" verb="*" type="System.ServiceModel.Activation.ServiceHttpHandlerFactory, System.ServiceModel.Activation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="xamlx-Integrated-4.0" path="*.xamlx" verb="GET,HEAD,POST,DEBUG" type="System.Xaml.Hosting.XamlHttpHandlerFactory, System.Xaml.Hosting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="aspq-Integrated-4.0" path="*.aspq" verb="GET,HEAD,POST,DEBUG" type="System.Web.HttpForbiddenHandler" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="cshtm-Integrated-4.0" path="*.cshtm" verb="GET,HEAD,POST,DEBUG" type="System.Web.HttpForbiddenHandler" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="cshtml-Integrated-4.0" path="*.cshtml" verb="GET,HEAD,POST,DEBUG" type="System.Web.HttpForbiddenHandler" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="vbhtm-Integrated-4.0" path="*.vbhtm" verb="GET,HEAD,POST,DEBUG" type="System.Web.HttpForbiddenHandler" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="vbhtml-Integrated-4.0" path="*.vbhtml" verb="GET,HEAD,POST,DEBUG" type="System.Web.HttpForbiddenHandler" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="ScriptHandlerFactoryAppServices-Integrated-4.0" path="*_AppService.axd" verb="*" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="ScriptResourceIntegrated-4.0" path="*ScriptResource.axd" verb="GET,HEAD" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" preCondition="integratedMode,runtimeVersionv4.0" />
				<add name="ASPClassic" path="*.asp" verb="GET,HEAD,POST" modules="IsapiModule" scriptProcessor="%IIS_BIN%\asp.dll" resourceType="File" />
				<add name="SecurityCertificate" path="*.cer" verb="GET,HEAD,POST" modules="IsapiModule" scriptProcessor="%IIS_BIN%\asp.dll" resourceType="File" />
				<add name="ISAPI-dll" path="*.dll" verb="*" modules="IsapiModule" resourceType="File" requireAccess="Execute" allowPathInfo="true" />
				<add name="TraceHandler-Integrated" path="trace.axd" verb="GET,HEAD,POST,DEBUG" type="System.Web.Handlers.TraceHandler" preCondition="integratedMode,runtimeVersionv2.0" />
				<add name="WebAdminHandler-Integrated" path="WebAdmin.axd" verb="GET,DEBUG" type="System.Web.Handlers.WebAdminHandler" preCondition="integratedMode,runtimeVersionv2.0" />
				<add name="AssemblyResourceLoader-Integrated" path="WebResource.axd" verb="GET,DEBUG" type="System.Web.Handlers.AssemblyResourceLoader" preCondition="integratedMode,runtimeVersionv2.0" />
				<add name="PageHandlerFactory-Integrated" path="*.aspx" verb="GET,HEAD,POST,DEBUG" type="System.Web.UI.PageHandlerFactory" preCondition="integratedMode,runtimeVersionv2.0" />
				<add name="SimpleHandlerFactory-Integrated" path="*.ashx" verb="GET,HEAD,POST,DEBUG" type="System.Web.UI.SimpleHandlerFactory" preCondition="integratedMode,runtimeVersionv2.0" />
				<add name="WebServiceHandlerFactory-Integrated" path="*.asmx" verb="GET,HEAD,POST,DEBUG" type="System.Web.Services.Protocols.WebServiceHandlerFactory,System.Web.Services,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" preCondition="integratedMode,runtimeVersionv2.0" />
				<add name="HttpRemotingHandlerFactory-rem-Integrated" path="*.rem" verb="GET,HEAD,POST,DEBUG" type="System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory,System.Runtime.Remoting,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b77a5c561934e089" preCondition="integratedMode,runtimeVersionv2.0" />
				<add name="HttpRemotingHandlerFactory-soap-Integrated" path="*.soap" verb="GET,HEAD,POST,DEBUG" type="System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory,System.Runtime.Remoting,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b77a5c561934e089" preCondition="integratedMode,runtimeVersionv2.0" />
				<add name="AXD-ISAPI-2.0" path="*.axd" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" responseBufferLimit="0" />
				<add name="PageHandlerFactory-ISAPI-2.0" path="*.aspx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" responseBufferLimit="0" />
				<add name="SimpleHandlerFactory-ISAPI-2.0" path="*.ashx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" responseBufferLimit="0" />
				<add name="WebServiceHandlerFactory-ISAPI-2.0" path="*.asmx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" responseBufferLimit="0" />
				<add name="HttpRemotingHandlerFactory-rem-ISAPI-2.0" path="*.rem" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" responseBufferLimit="0" />
				<add name="HttpRemotingHandlerFactory-soap-ISAPI-2.0" path="*.soap" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" responseBufferLimit="0" />
				<add name="svc-ISAPI-2.0-64" path="*.svc" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" />
				<add name="AXD-ISAPI-2.0-64" path="*.axd" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" responseBufferLimit="0" />
				<add name="PageHandlerFactory-ISAPI-2.0-64" path="*.aspx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" responseBufferLimit="0" />
				<add name="SimpleHandlerFactory-ISAPI-2.0-64" path="*.ashx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" responseBufferLimit="0" />
				<add name="WebServiceHandlerFactory-ISAPI-2.0-64" path="*.asmx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" responseBufferLimit="0" />
				<add name="HttpRemotingHandlerFactory-rem-ISAPI-2.0-64" path="*.rem" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" responseBufferLimit="0" />
				<add name="HttpRemotingHandlerFactory-soap-ISAPI-2.0-64" path="*.soap" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" responseBufferLimit="0" />
				<add name="rules-64-ISAPI-2.0" path="*.rules" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" />
				<add name="xoml-64-ISAPI-2.0" path="*.xoml" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" />
				<add name="CGI-exe" path="*.exe" verb="*" modules="CgiModule" resourceType="File" requireAccess="Execute" allowPathInfo="true" />
				<add name="SSINC-stm" path="*.stm" verb="GET,HEAD,POST" modules="ServerSideIncludeModule" resourceType="File" />
				<add name="SSINC-shtm" path="*.shtm" verb="GET,HEAD,POST" modules="ServerSideIncludeModule" resourceType="File" />
				<add name="SSINC-shtml" path="*.shtml" verb="GET,HEAD,POST" modules="ServerSideIncludeModule" resourceType="File" />
				<add name="TRACEVerbHandler" path="*" verb="TRACE" modules="ProtocolSupportModule" requireAccess="None" />
				<add name="OPTIONSVerbHandler" path="*" verb="OPTIONS" modules="ProtocolSupportModule" requireAccess="None" />
				<add name="ExtensionlessUrlHandler-ISAPI-4.0_32bit" path="*." verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
				<add name="ExtensionlessUrlHandler-ISAPI-4.0_64bit" path="*." verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
				<add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="GET,HEAD,POST,DEBUG" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" responseBufferLimit="0" />
				<add name="StaticFile" path="*" verb="*" modules="StaticFileModule,DefaultDocumentModule,DirectoryListingModule" resourceType="Either" requireAccess="Read" />
			</handlers>
		</system.webServer>
	</location>
</configuration>
</file>

<file path=".vs/VSWorkspaceState.json">
{
  "ExpandedNodes": [
    "\\src",
    "\\src\\app"
  ],
  "PreviewInSolutionExplorer": false
}
</file>

<file path="angular.json">
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "cli": {
    "analytics": "dfe13adb-9f73-4e8c-aece-46e76b870379"
  },
  "newProjectRoot": "projects",
  "projects": {
    "ShiftWorkFrontend": {
      "i18n": {
        "sourceLocale": "en-US",
        "locales": {
          "es-SP": "src/locale/messages.es.xlf"
        }
      },
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-builders/custom-webpack:browser",
          "options": {
            "customWebpackConfig": {
              "path": "src/custom-webpack.config.ts"
            },
            "localize":["en-US"],
            "outputPath": "dist/shift-workfrontend",
            "index": "src/index.html",
            "main": "src/main.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.app.json",
            "aot": true,
            "assets": [
              "src/favicon.ico",
              "src/assets",
              "src/manifest.webmanifest"
            ],
            "styles": [
              "@angular/material/prebuilt-themes/deeppurple-amber.css",
              "node_modules/angular-calendar/css/angular-calendar.css",
              "src/styles.css"
            ],
            "serviceWorker": true,
            "ngswConfigPath": "ngsw-config.json"
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "2mb",
                  "maximumError": "5mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "fileReplacements": [
                {
                  "replace": "src/environments/environment.ts",
                  "with": "src/environments/environment.prod.ts"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "buildOptimizer": false,
              "optimization": false,
              "vendorChunk": true,
              "extractLicenses": false,
              "sourceMap": true,
              "namedChunks": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-builders/custom-webpack:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "ShiftWorkFrontend:build:production"
            },
            "development": {
              "buildTarget": "ShiftWorkFrontend:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "buildTarget": "ShiftWorkFrontend:build"
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "main": "src/test.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.spec.json",
            "karmaConfig": "karma.conf.js",
            "assets": [
              "src/favicon.ico",
              "src/assets",
              "src/manifest.webmanifest"
            ],
            "styles": [
              "@angular/material/prebuilt-themes/deeppurple-amber.css",
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "node_modules/angular-calendar/css/angular-calendar.css",
              "src/styles.css"
            ],
            "scripts": []
          }
        }
      }
    }
  },
  "version": 1
}
</file>

<file path="Dockerfile">
# Stage 1
FROM node:17.5.0 as node
WORKDIR /app
COPY . .
RUN npm install
RUN npm run build --prod
# Stage 2
FROM nginx:alpine
COPY --from=node /app/dist/shift-workfrontend /usr/share/nginx/html
</file>

<file path="firebase.json">
{}
</file>

<file path="karma.conf.js">
// Karma configuration file, see link for more information
// https://karma-runner.github.io/1.0/config/configuration-file.html

module.exports = function (config) {
  config.set({
    basePath: '',
    frameworks: ['jasmine', '@angular-devkit/build-angular'],
    plugins: [
      require('karma-jasmine'),
      require('karma-chrome-launcher'),
      require('karma-jasmine-html-reporter'),
      require('karma-coverage'),
      require('@angular-devkit/build-angular/plugins/karma')
    ],
    client: {
      jasmine: {
        // you can add configuration options for Jasmine here
        // the possible options are listed at https://jasmine.github.io/api/edge/Configuration.html
        // for example, you can disable the random execution with `random: false`
        // or set a specific seed with `seed: 4321`
      },
      clearContext: false // leave Jasmine Spec Runner output visible in browser
    },
    jasmineHtmlReporter: {
      suppressAll: true // removes the duplicated traces
    },
    coverageReporter: {
      dir: require('path').join(__dirname, './coverage/shift-workfrontend'),
      subdir: '.',
      reporters: [
        { type: 'html' },
        { type: 'text-summary' }
      ]
    },
    reporters: ['progress', 'kjhtml'],
    port: 9876,
    colors: true,
    logLevel: config.LOG_INFO,
    autoWatch: true,
    browsers: ['Chrome'],
    singleRun: false,
    restartOnFileChange: true
  });
};
</file>

<file path="ngsw-config.json">
{
  "$schema": "./node_modules/@angular/service-worker/config/schema.json",
  "index": "/index.html",
  "assetGroups": [
    {
      "name": "app",
      "installMode": "prefetch",
      "resources": {
        "files": [
          "/favicon.ico",
          "/index.html",
          "/manifest.webmanifest",
          "/*.css",
          "/*.js"
        ]
      }
    },
    {
      "name": "assets",
      "installMode": "lazy",
      "updateMode": "prefetch",
      "resources": {
        "files": [
          "/assets/**",
          "/*.(svg|cur|jpg|jpeg|png|apng|webp|avif|gif|otf|ttf|woff|woff2)"
        ]
      }
    }
  ]
}
</file>

<file path="package.json">
{
  "name": "shift-workfrontend",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^18.2.13",
    "@angular/cdk": "^17.3.10",
    "@angular/common": "^18.2.13",
    "@angular/compiler": "^18.2.13",
    "@angular/core": "^18.2.13",
    "@angular/fire": "^18.0.1",
    "@angular/forms": "^18.2.13",
    "@angular/google-maps": "^19.0.2",
    "@angular/material": "^18.2.14",
    "@angular/platform-browser": "^18.2.13",
    "@angular/platform-browser-dynamic": "^18.2.13",
    "@angular/router": "^18.2.13",
    "@angular/service-worker": "^18.2.13",
    "@fullcalendar/angular": "^6.1.15",
    "@fullcalendar/bootstrap": "^6.1.15",
    "@fullcalendar/core": "^6.1.15",
    "@fullcalendar/daygrid": "^6.1.15",
    "@fullcalendar/interaction": "^6.1.15",
    "@fullcalendar/list": "^6.1.15",
    "@fullcalendar/resource": "^6.1.15",
    "@fullcalendar/resource-timegrid": "^6.1.15",
    "@fullcalendar/resource-timeline": "^6.1.15",
    "@fullcalendar/timegrid": "^6.1.15",
    "@fullcalendar/web-component": "^6.1.15",
    "@ng-bootstrap/ng-bootstrap": "^17.0.1",
    "@popperjs/core": "^2.11.6",
    "@scarf/scarf": "1.1.1",
    "@types/node": "^22.10.1",
    "angular-calendar": "^0.30.1",
    "bootstrap": "^5.2.0",
    "crypto-js": "^4.2.0",
    "date-fns": "^2.30.0",
    "dexie": "^4.0.10",
    "firebase": "^10.14.1",
    "font-awesome": "^4.7.0",
    "g": "^2.0.1",
    "ngx-pagination": "^6.0.3",
    "ngx-toastr": "^14.3.0",
    "ngx-webcam": "^0.4.1",
    "npm": "^8.17.0",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "vite": "^4.4.0",
    "webpack": "^5.97.1",
    "zone.js": "~0.14.10"
  },
  "devDependencies": {
    "@angular-builders/custom-webpack": "^18.0.0",
    "@angular-devkit/build-angular": "^18.2.12",
    "@angular/cli": "~18.2.12",
    "@angular/compiler-cli": "^18.2.13",
    "@angular/localize": "^18.2.13",
    "@types/jasmine": "~4.0.0",
    "cross-env": "^7.0.3",
    "dotenv-webpack": "^8.1.0",
    "jasmine-core": "~4.2.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.1.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.0.0",
    "typescript": "~5.4.5"
  }
}
</file>

<file path="README.md">
# ShiftWorkFrontend

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 14.1.1.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The application will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.


maps autocomplete

https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete

https://jsfiddle.net/gh/get/library/pure/googlemaps/js-samples/tree/master/dist/samples/places-autocomplete/jsfiddle

https://torbjornzetterlund.com/using-google-vision-api-in-your-mobile-angular-ionic-app/#gsc.tab=0
</file>

<file path="src/app/app-routing.module.ts">
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { SignInComponent } from './components/sign-in/sign-in.component';
import { SignUpComponent } from './components/sign-up/sign-up.component';
import { InicioComponent } from './components/inicio/inicio.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { AreaComponent } from './components/dashboard/area/area.component';
import { LocationComponent } from './components/dashboard/location/location.component';
import { ClockShiftComponent } from './components/dashboard/clock-shift/clock-shift.component';
import { TaskShiftComponent } from './components/dashboard/task-shift/task-shift.component';
import { PeopleComponent } from './components/dashboard/people/people.component';
import { SheduleComponent } from './components/dashboard/shedule/shedule.component';
import { EventShiftComponent } from './components/dashboard/event-shift/event-shift.component';
import { ForgotPasswordComponent } from './components/forgot-password/forgot-password.component';
import { VerifyEmailComponent } from './components/verify-email/verify-email.component';

import { KioskComponent } from './components/kiosk/kiosk.component';
import { EmployeeListComponent } from './components/kiosk/components/employee-list/employee-list.component';
import { PhotoScheduleComponent } from './components/kiosk/components/photo-schedule/photo-schedule.component';

import { TodoListComponent } from './components/kiosk/components/todo-list/todo-list.component';
import { TodoDetailComponent } from './components/kiosk/components/todo-detail/todo-detail.component';

import { AuthGuard } from './shared/guard/auth.guard';
import { LocationsComponent } from './components/dashboard/locations/locations.component';
import { AreasComponent } from './components/dashboard/areas/areas.component';
import { ProfilesComponent } from './components/dashboard/profiles/profiles.component';
import { TasksComponent } from './components/dashboard/tasks/tasks.component';
import { CompanySwitchComponent } from './components/company-switch/company-switch.component';

const routes: Routes = [
  { path: '', redirectTo: '/sign-in', pathMatch: 'full' },
  //{path:'inicio',component:InicioComponent},
  { path: 'sign-in', component: SignInComponent },
  { path: 'company-switch', component: CompanySwitchComponent },
  { path: 'register-user', component: SignUpComponent },
  { path: 'forgot-password', component: ForgotPasswordComponent },
  { path: 'verify-email-address', component: VerifyEmailComponent },
  { path: 'kiosk', component: KioskComponent,
    children:[
      { path: 'employee-list', component: EmployeeListComponent },
      { path: 'photo-schedule/:employeeId', component: PhotoScheduleComponent },
    ]},
  { path: 'todo-list', component: TodoListComponent},
  { path: 'todo-detail', component: TodoDetailComponent},
  { path: 'dashboard',component:DashboardComponent, canActivate: [AuthGuard], 
  children:[
    {path:'',component: ClockShiftComponent },
    { path:'schedule',component:SheduleComponent},
    { path: 'profiles', component: ProfilesComponent },
    { path: 'people', component: PeopleComponent },
    { path: 'areas', component: AreasComponent },
    { path: 'area', component: AreaComponent },
    { path: 'locations', component: LocationsComponent },
    { path: 'location', component: LocationComponent, },
    { path: 'clockshift', component: ClockShiftComponent },
    { path: 'tasks', component: TasksComponent },
    { path: 'taskshift', component: TaskShiftComponent },
    { path: 'eventshift', component: EventShiftComponent }
  ]},
  {path:'**',redirectTo:'dashboard',pathMatch:'full'}
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
</file>

<file path="src/app/app.component.css">
.sidenav-container {
    height: 100%;
  }
  mat-sidenav {
    width: 250px;
  }
</file>

<file path="src/app/app.component.html">
<router-outlet></router-outlet>
</file>

<file path="src/app/app.component.spec.ts">
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule
      ],
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'ShiftWorkFrontend'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('ShiftWorkFrontend');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('.content span')?.textContent).toContain('ShiftWorkFrontend app is running!');
  });
});
</file>

<file path="src/app/app.component.ts">
import { Component, OnInit } from '@angular/core';
import { environment } from '../environments/environment';
import { GoogleAnalyticsService } from './core/services/google-analytics.service';


@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']  
})

export class AppComponent implements OnInit {
  constructor(private readonly googleAnalyticsService: GoogleAnalyticsService) {
  }

  title = 'ShiftWorkFrontend';

  ngOnInit() {
    //if (environment.production) {
      this.googleAnalyticsService.initialize();
    //}
  }
}
</file>

<file path="src/app/app.module.ts">
import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { ServiceWorkerModule } from '@angular/service-worker';
import { environment } from '../environments/environment';
import { AngularFireModule } from '@angular/fire/compat';
import { AngularFireAuthModule } from '@angular/fire/compat/auth';
import { InicioComponent } from './components/inicio/inicio.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { AreaComponent } from './components/dashboard/area/area.component';
import { LocationComponent } from './components/dashboard/location/location.component';
import { RoleComponent } from './components/dashboard/role/role.component';
import { PeopleComponent } from './components/dashboard/people/people.component';
import { TaskShiftComponent } from './components/dashboard/task-shift/task-shift.component';
import { ClockShiftComponent } from './components/dashboard/clock-shift/clock-shift.component';
import { CalendarModule, DateAdapter } from 'angular-calendar';
import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';
import { NavBarComponent } from './components/dashboard/nav-bar/nav-bar.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { SheduleComponent } from './components/dashboard/shedule/shedule.component';
import { EventShiftComponent } from './components/dashboard/event-shift/event-shift.component';
import { GoogleMapsModule } from '@angular/google-maps';
import { SignInComponent } from './components/sign-in/sign-in.component';
import { SignOutComponent } from './components/sign-out/sign-out.component';
import { SignUpComponent } from './components/sign-up/sign-up.component';
import { ForgotPasswordComponent } from './components/forgot-password/forgot-password.component';
import { VerifyEmailComponent } from './components/verify-email/verify-email.component';
import { LocationsComponent } from './components/dashboard/locations/locations.component';
import { AreasComponent } from './components/dashboard/areas/areas.component';
import { ProfilesComponent } from './components/dashboard/profiles/profiles.component';
import { TasksComponent } from './components/dashboard/tasks/tasks.component';
import { NgxPaginationModule } from 'ngx-pagination';
import { ToastrModule } from 'ngx-toastr';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { CommonModule } from '@angular/common';
import { FullCalendarModule } from "@fullcalendar/angular";
import dayGridPlugin from "@fullcalendar/daygrid"; // a plugin
import interactionPlugin from "@fullcalendar/interaction";
import { NgbModule, NgbModalModule } from '@ng-bootstrap/ng-bootstrap';
import { provideAnimationsAsync } from '@angular/platform-browser/animations/async'; // a plugin
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatListModule } from '@angular/material/list';
import { MatButtonModule } from '@angular/material/button';
import { TodoListComponent } from './components/kiosk/components/todo-list/todo-list.component';
import { TodoDetailComponent } from './components/kiosk/components/todo-detail/todo-detail.component';
import { KioskComponent } from './components/kiosk/kiosk.component';



//FullCalendarModule.registerPlugins([
// register FullCalendar plugins
//  dayGridPlugin,
//  interactionPlugin
//]);

@NgModule({ declarations: [
        AppComponent,
        InicioComponent,
        DashboardComponent,
        AreaComponent,
        LocationComponent,
        RoleComponent,
        PeopleComponent,
        TaskShiftComponent,
        ClockShiftComponent,
        NavBarComponent,
        SheduleComponent,
        EventShiftComponent,
        SignInComponent,
        SignOutComponent,
        SignUpComponent,
        ForgotPasswordComponent,
        VerifyEmailComponent,
        LocationsComponent,
        AreasComponent,
        ProfilesComponent,
        TasksComponent,
        TodoListComponent,
        TodoDetailComponent,
    ],
    schemas: [CUSTOM_ELEMENTS_SCHEMA],
    bootstrap: [AppComponent], imports: [FullCalendarModule,
        BrowserModule,
        AppRoutingModule,
        CommonModule,
        FormsModule,
        AngularFireModule.initializeApp(environment.firebase),
        AngularFireAuthModule,
        ReactiveFormsModule,
        GoogleMapsModule,
        ReactiveFormsModule,
        NgxPaginationModule,
        BrowserAnimationsModule,
        ServiceWorkerModule,
        NgbModalModule,
        MatSidenavModule,
        MatListModule,
        MatButtonModule,
        ToastrModule.forRoot(),
        CalendarModule.forRoot({
            provide: DateAdapter,
            useFactory: adapterFactory,
        })], providers: [
        provideAnimationsAsync(),
        provideHttpClient(withInterceptorsFromDi())
    ] })
export class AppModule { }
</file>

<file path="src/app/components/company-switch/company-switch.component.css">
.main{
    font-family: Arial, sans-serif;
    background-color: #d2f0bd;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;    
}

.mytheme{
    background-color: #d2f0bd;
}

.mymodal {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    padding: 20px;
    width: 300px;
    text-align: center;
}

h2 {
    color: #4b0082; /* Dark purple */
    margin-bottom: 10px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

select {
    width: 100%;
    padding: 8px;
    margin-bottom: 20px;
    border-radius: 4px;
    border: 1px solid #ccc;
}

hr {
    margin: 20px 0;
}

h3 {
    color: #4b0082; /* Dark purple */
    margin-bottom: 10px;
}

p {
    font-size: 14px;
    color: #666;
    margin-bottom: 20px;
}

.button-container {
    display: flex;
    justify-content: space-between;
}

.cancel-button, .allow-button {
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.cancel-button {
    background-color: #e0e0e0; /* Light gray */
    color: #333;
}

.allow-button {
    background-color: #4b0082; /* Dark purple */
    color: white;
}
</file>

<file path="src/app/components/company-switch/company-switch.component.html">
<div class="main">
    <div class="mymodal">
        <h2>OAuth wants access to</h2>
        
        <label for="business-select">Select business</label>
        <select id="business-select">
            <option value="mrs">My Company</option>
            <option value="other">Other Business</option>
        </select>

        <hr>

        <h3>Business data</h3>
        <p>By allowing access, you are agreeing to share your data with OAuthClient. Deputy’s user terms of service will apply.</p>

        <div class="button-container">
            <button class="cancel-button">Cancel</button>
            <button class="allow-button">Allow access</button>
        </div>
    </div>
</div>
</file>

<file path="src/app/components/company-switch/company-switch.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CompanySwitchComponent } from './company-switch.component';

describe('CompanySwitchComponent', () => {
  let component: CompanySwitchComponent;
  let fixture: ComponentFixture<CompanySwitchComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [CompanySwitchComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(CompanySwitchComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/company-switch/company-switch.component.ts">
import { Component } from '@angular/core';
import { UserCompanyService } from 'src/app/core/services/user-company.service';
import { CompanyService } from 'src/app/core/services/company.service';
import { Router } from '@angular/router';
import { companyModel } from 'src/app/core/models/Company';
import { UserCompanyModel } from 'src/app/core/models/UserCompany';
@Component({
  selector: 'app-company-switch',
  standalone: true,
  imports: [],
  templateUrl: './company-switch.component.html',
  styleUrl: './company-switch.component.css'
})
export class CompanySwitchComponent {

  Companies : any;
  p : any;
  
  constructor(private companyService: CompanyService,
    private userCompanyService: UserCompanyService,
     public _router : Router,
     ) { 

     }

  ngOnInit(): void
  {
    this.getAllCompanies();
    this.getAllUserCompanies();
  }


  private getAllUserCompanies()
  {
      this.userCompanyService.GetUserCompanies().subscribe((data) => {
        this.Companies = data;
        //console.log('locations', data);
      }
    );
  }

  private getAllCompanies()
  {
      this.companyService.GetCompanies().subscribe((data) => {
        this.Companies = data;
        //console.log('locations', data);
      }
    );
  }

  create(){
    this._router.navigate(['/dashboard/location']);
  }

  selected(model: companyModel) {
    const id = model ? model.companyId : null;
    this._router.navigate(['/dashboard/location', { id: id }]);
 
  }
}
</file>

<file path="src/app/components/dashboard/area/area.component.html">
<form [formGroup]="areaForm" (ngSubmit)="onSubmit(areaForm)">
  <div class="container">
    <div class="card offset">
      <div class="card-header">
        <h2 class="card-title">Area</h2>

        <div>
          <ul class="dropdown btn dropdown-menu-dark">
            <a class="dropdown-toggle" href="#" id="navbarDarkDropdownMenuLink" role="button" data-bs-toggle="dropdown"
              aria-expanded="false">
              Select Area
            </a>
            <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="navbarDarkDropdownMenuLink">
              <li *ngFor="let item of Areas" (click)="selectedArea(item)">
                <ul class="dropdown-item">{{item.areaName}}</ul>
              </li>
            </ul>
          </ul>
        </div>

      </div>
      <div class="card-body">
        <div class="mb-3">
          <label for="isActive" class="form-label">Active</label>
          <input id="isActive" formControlName="isActive" type="checkbox" >
        </div>
        <div class="mb-3">
          <label for="areaName" class="form-label">Area</label>
          <input id="areaName" formControlName="areaName" type="text" class="form-control">
        </div>
        <div class="mb-3">
          <label for="locationId" class="form-label">Location</label>
          <select class="form-select" (change)="onLocationChange($event)" aria-label="Default select example">
            <option [disabled]="true" selected>Select location</option>
            <option *ngFor="let item of Locations" value="{{item.locationId}}"
            [selected]="item.locationId===area.locationId"
            >{{item.locationName}}
            </option>
          </select>
        </div>
        <div class="mb-3">
          <div class="offset-3">
            <button name="submit" type="submit" class="btn btn-primary  me-2">Submit</button>
            <button name="delete" type="button" class="btn btn-danger me-2" (click)="deleteArea(area)">Delete</button>
          </div>
        </div>
        <div class="mb-3">
          <small>{{area.created}}</small>
        </div>
      </div>
    </div>
  </div>
</form>
</file>

<file path="src/app/components/dashboard/area/area.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AreaComponent } from './area.component';

describe('AreaComponent', () => {
  let component: AreaComponent;
  let fixture: ComponentFixture<AreaComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ AreaComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(AreaComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard/area/area.component.ts">
import { Component, OnInit } from '@angular/core';
import { AreaModel } from 'src/app/core/models/Area';
import { AreaService } from '../../../core/services/area.service';
import {
  FormBuilder,
  FormControl,
  FormGroup,
  NgForm,
  Validators,
} from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { LocationService } from 'src/app/core/services/location.service';
import { LocationModel } from 'src/app/core/models/Location';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-area',
  templateUrl: './area.component.html',
  styleUrls: ['./area.component.css'],
})
export class AreaComponent implements OnInit {
  [x: string]: any;
  area: AreaModel = new AreaModel();
  user: any;

  Areas: any;
  Locations: any;
  location: LocationModel = new LocationModel();

  areaForm = new FormGroup({
    areaName: new FormControl('', [Validators.required]),
    locationId: new FormControl('', [Validators.required]),
    isActive: new FormControl(true, [Validators.required]),
  });

  constructor(
    private areaService: AreaService,
    private locationService: LocationService,
    public _router: Router,
    private route: ActivatedRoute,
    private toastr: ToastrService
  ) {
    //let token = this.GetToken();
  }

  private GetToken() {
    this.user = JSON.parse(localStorage.getItem('user')!);
    //console.log('user',this.user);
    let token = this.user.stsTokenManager.accessToken;
    return token;
  }

  ngOnInit(): void {
    this.getAreas();
    this.getLocations();
    const areaId = this.route.snapshot.paramMap.get('id');

    if (areaId) {
      this.area$ = this.areaService.GetArea(areaId);
      this.area$.subscribe((data: AreaModel) => {
        this.selectedArea(data);
      });
    } else {
      this.location.locationId = 0;
    }
  }

  private getAreas() {
    this.areaService.GetAreas().subscribe((data) => {
      this.Areas = data;
    });
  }

  private getLocations() {
    this.locationService.GetLocations().subscribe((data) => {
      this.Locations = data;
    });
  }

  onSubmit(form: FormGroup) {
    if (form.valid) {
      this.area.areaName = form.value.areaName;
      this.area.locationId = form.value.locationId;
      this.area.isActive = form.value.isActive;
      if (this.area.areaId > 0) {
        this.areaService.PutArea(this.area).subscribe((resp) => {
          console.log(resp);
          this.showSuccess('Success!', 'Record Updated');
          this.area = resp;
        });
      } else {
        this.areaService.PostArea(this.area).subscribe((resp) => {
          console.log(resp);
          this.showSuccess('Success!', 'Record Created');
          this.area = resp;
        });
      }
    } else {
      console.log('Formulario Invalido');
      this.toastr.warning('Warning', 'Invalid form');
      return;
    }
  }

  selectedArea(area: AreaModel) {
    this.area = area;

    this.areaForm.patchValue({
      areaName: area.areaName,
      isActive: area.isActive,
      locationId: area.locationId.toString(),
    });
  }

  onLocationChange(eventValue: any) {
    let id = eventValue.target.value;
    let obj = this.Locations.filter(function (data: LocationModel) {
      return data.locationId == id;
    });
    this.location = obj[0];
    this.area.locationId = this.location.locationId;
    this.areaForm.patchValue({ locationId: obj[0].locationId });
  }

  deleteArea(area: AreaModel) {
    this.areaService.DeleteArea(area.areaId.toString()).subscribe();
    //this.getAreas();
    this._router.navigate(['/dashboard/areas']);
  }

  showSuccess(status, message) {
    this.toastr.success(status, message);
  }

  showWarning(status, message) {
    this.toastr.warning(status, message);
  }

  refresh(): void {
    this._router
      .navigateByUrl('/refresh', { skipLocationChange: true })
      .then(() => {
        this._router.navigate([decodeURI(this._location.path())]);
      });
  }
}
</file>

<file path="src/app/components/dashboard/areas/areas.component.css">
.mylist-group {
  margin-top: 20px;
  background: #f5f7f8;
  padding: 20px;
  list-style-type:        none;
 
}

.mylist-group-item{
  background: #e6e7e9;
  margin: 5px;
  padding: 10px;
  
}

.badge-primary{
    background: #1d1ac5;
}



.menuitem:hover {
    background-color:        #8bb3d4;
}

.menuitem a {
    text-decoration:        none;
    color:                    #000;
}

.menulink {
    width:                    100%;
    height:                    100%;
}
</file>

<file path="src/app/components/dashboard/areas/areas.component.html">
<div class="container">
    <div class="card offset">
        <div class="card-header">
            <h2 class="card-title">Areas</h2>

            <div>
                <ul class="dropdown btn dropdown-menu-dark">
                    <a class="dropdown-toggle" href="#" id="navbarDarkDropdownMenuLink" role="button"
                        data-bs-toggle="dropdown" aria-expanded="false">
                        Select Location
                    </a>
                    <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="navbarDarkDropdownMenuLink">
                        <li *ngFor="let item of Locations" (click)="selectedLocation(item)"><a
                                class="dropdown-item">{{item.locationName}}</a></li>
                    </ul>
                </ul>
            </div>
        </div>
        <div class="card-body">
            <div class="list">
                <div class="align-items-center">
                <button class="btn btn-primary" (click)="createArea()">Create</button>
            </div>
            <ul class="mylist-group">
                <li class="menuitem mylist-group-item" *ngFor="let item of Areas | paginate: { itemsPerPage: 10, currentPage: p }">
                    <a role="button" [routerLink]="" (click)="selectedArea(item)">
                    <div class="menulink">
                        {{ item.areaName }} 
                    </div>
                    </a>
                </li>
                
            </ul>
            <pagination-controls (pageChange)="p = $event"></pagination-controls>
            </div>
        </div>

    </div>
</file>

<file path="src/app/components/dashboard/areas/areas.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AreasComponent } from './areas.component';

describe('AreasComponent', () => {
  let component: AreasComponent;
  let fixture: ComponentFixture<AreasComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ AreasComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(AreasComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard/areas/areas.component.ts">
import { Component } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { NgxPaginationModule } from 'ngx-pagination'
import { ToastrService } from 'ngx-toastr';
import { Observable } from 'rxjs';
import { AreaModel } from 'src/app/core/models/Area';
import { LocationModel } from 'src/app/core/models/Location';
import { AreaService } from 'src/app/core/services/area.service';
import { LocationService } from 'src/app/core/services/location.service';

@Component({
  selector: 'app-areas',
  templateUrl: './areas.component.html',
  styleUrls: ['./areas.component.css']
})
export class AreasComponent {

  Areas: any;
  Locations: any;
  location: any;
  area: any
  user: any;
  p: any;
  area$: Observable<any>;
  location$: Observable<any>;


  constructor(private areaService: AreaService,
    private locationService: LocationService,
    public _router: Router,
    private toastr: ToastrService
  ) {

  }

  ngOnInit(): void {

    this.area$ = this.areaService.GetAreas();
    this.location$ = this.locationService.GetLocations();
    this.getAreas();
    this.getLocations();

  }

  private getAreas() {
    this.area$.subscribe(
      (data) => {
        this.Areas = data;
      }
    );
  }

  private getLocations() {
    this.location$.subscribe((data) => {
      this.Locations = data;
    }
    );
  }

  createArea() {
    this._router.navigate(['/dashboard/area']);
  }


  selectedArea(area: AreaModel) {
    this.area = area;
    this._router.navigate(['/dashboard/area', { id: area.areaId }]);
  }

  selectedLocation(location: LocationModel) {
    this.location = location;
    const locationId = location ? location.locationId : null;
    this.area$.subscribe(
      (data) => {
        this.Areas = data.filter(c => c.locationId == locationId)
      }
    )
  }
}
</file>

<file path="src/app/components/dashboard/clock-shift/clock-shift.component.html">
<div class="container mt-10" style="background-color: #cbc7c7f9;">
    <div class="row gy-3">
        <div class="col col-sm">
            <div class="card p-3 mt-2">
                <div class="card-body text-center">
                    <h2 class="card-title">Clock Shift</h2>
                  
                    <h2>{{ time | date: 'hh:mm a' }}</h2>
                    <div class="gy-2">
                        <div class="row p-2">
                            <select class="form-select" [(ngModel)]="scheduleShift.personId"
                                (change)="onProfileChange($event)" aria-label="Default select example">
                                <option [ngValue]="undefined" [disabled]="true" selected>Select profile</option>
                                <option *ngFor="let item of People" value="{{item.personId}}">{{item.firstName}}
                                    {{item.lastName}}</option>
                            </select>
                        </div>
                        <div class="row p-2">
                            <select class="form-select" [(ngModel)]="scheduleShift.locationId"
                                (change)="onLocationChange($event)" aria-label="Default select example">
                                <option [ngValue]="undefined" [disabled]="true" selected>Select location</option>
                                <option *ngFor="let item of Locations" value="{{item.locationId}}">{{item.locationName}}
                                </option>
                            </select>
                        </div>
                        <div class="row p-2">
                            <select class="form-select" [(ngModel)]="scheduleShift.areaId"
                                (change)="onAreaChange($event)" aria-label="Default select example">
                                <option [ngValue]="undefined" [disabled]="true" selected>Select area</option>
                                <option *ngFor="let item of Areas" value="{{item.areaId}}">
                                    {{item.areaName}}</option>
                            </select>
                        </div>
                    </div>
                    <small *ngIf="clockActive">Hours:{{hours}} Minutes: {{minutes}}</small>
                    <div *ngIf="!clockActive"> <button class="btn btn-outline-success btn-lg"
                            (click)="openDialog()">Start schedule shift</button></div>
                    <div *ngIf="clockActive"><button class="btn btn-outline-danger btn-lg" (click)="stopClock()">Stop
                            schedule shift</button></div>
                    
                </div>
            </div>
            <div class="card p-3 mt-3 mb-3">
                <div class="card-body">
                    <h5 class="card-title">Shift</h5>
                    <br>
                    <p class="card-text text-decoration-underline">All upcoming shift</p>
                    <ul>
                        <li *ngFor="let r of Schedules">{{r.keyCode}} <small>{{r.scheduledate |
                                date}}</small><br><small> {{r.startTime}}-{{r.endTime}}</small></li>
                    </ul>

                    <p class="card-text text-decoration-underline">Time Sheets</p>
                    <ul>
                        <li *ngFor="let r of Shifts">{{r.subject }} <small>{{r.startTime | date}}</small>
                            <br>
                            <small>{{r.startTime | date:'HH:mm'}}</small>-<small>{{r.endTime | date:'HH:mm'}}</small>
                        </li>
                    </ul>


                </div>
            </div>

            <div class="card p-3 mt-2 h-5">
                <div class="card-body">
                    <main role="main">
                        <div class="inner-adjust">
                            <!-- Show user data when logged in -->
                            <div class="row" *ngIf="authService.userData as user">
                                <div class="media">
                                    <img class="align-self-start mr-5 img-thumbnail rounded-circle"
                                        src="{{(user.photoURL) ? user.photoURL : '/assets/dummy-user.png'}}"
                                        alt="{{user.displayName}}">
                                    <div class="media-body">
                                        <h3>Hello: <strong>{{(user.displayName) ? user.displayName : 'User'}}</strong>
                                        </h3>
                                        <p>Email: <strong>{{user.email}}</strong></p>
                                        <p>Email Verified: <strong>{{user.emailVerified}}</strong></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </main>

                    <h5 class="card-title">Task</h5>
                    <br>
                    <p class="card-text text-decoration-underline">My task</p>
                    <ul>
                        <li *ngFor="let r of Tasks"><b>{{r.taskShiftName}}</b><i>: {{r.comment}}</i></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
</file>

<file path="src/app/components/dashboard/clock-shift/clock-shift.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ClockShiftComponent } from './clock-shift.component';

describe('ClockShiftComponent', () => {
  let component: ClockShiftComponent;
  let fixture: ComponentFixture<ClockShiftComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ClockShiftComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ClockShiftComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard/clock-shift/clock-shift.component.ts">
import { Component, OnDestroy, OnInit, inject, model, signal } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { PeopleService } from 'src/app/core/services/people.service';
import { ScheduleShiftModel } from 'src/app/core/models/ScheduleShift';
import { ScheduleClockService } from 'src/app/core/services/schedule-clock.service';
import { PeopleModel } from 'src/app/core/models/People';
import { TaskShiftModel } from 'src/app/core/models/TaskShift';
import {FormsModule} from '@angular/forms';
import { Subscription, timer } from "rxjs";
import { map, share } from "rxjs/operators";
import { TaskShiftService } from 'src/app/core/services/task-shift.service';
import { ScheduleModel } from 'src/app/core/models/Schedule';
import { AreaModel } from 'src/app/core/models/Area';
import { LocationModel } from 'src/app/core/models/Location';
import { AreaService } from 'src/app/core/services/area.service';
import { LocationService } from 'src/app/core/services/location.service';
import { ScheduleService } from 'src/app/core/services/schedule.service';
import { AuthService } from 'src/app/core/services/auth.service';
import { WeatherService } from 'src/app/core/services/weather.service';
import { WeatherModel } from 'src/app/core/models/Weather';
import { ToastrService } from 'ngx-toastr';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';

import {MatButtonModule} from '@angular/material/button';
import {
  MAT_DIALOG_DATA,
  MatDialog,
  MatDialogActions,
  MatDialogClose,
  MatDialogContent,
  MatDialogRef,
  MatDialogTitle,
} from '@angular/material/dialog';
import {MatFormFieldModule} from '@angular/material/form-field';
import {MatInputModule} from '@angular/material/input';

export interface DialogData {
  animal: string;
  name: string;
}

@Component({
  selector: 'app-clock-shift',
  templateUrl: './clock-shift.component.html',
  styleUrls: ['./clock-shift.component.css']
})
export class ClockShiftComponent implements OnInit, OnDestroy {
  readonly animal = signal('');
  readonly name = model('');
  readonly dialog = inject(MatDialog);


  time = new Date();
  rxTime = new Date();
  intervalId : any;
  subscription: any;

  scheduleShift : ScheduleShiftModel = new ScheduleShiftModel();
  person: PeopleModel = new PeopleModel();
  taskShift : TaskShiftModel = new TaskShiftModel();
  schedule: ScheduleModel = new ScheduleModel();
  area: AreaModel = new AreaModel();
  location: LocationModel = new LocationModel();

  People : any;
  Locations: any;
  Areas: any;//Array<AreaModel> = [] ;
  Shifts: any;
  Schedules: any;
  Tasks: any =[{taskShiftId: "",
    taskShiftName: ""}];

  public clockActive : any = false;
  public startTime = new Date();
  public endTime = new Date();
  public clockTime = new Date();
  public hours : any;
  public minutes : any;
  public companyId: any;
  public user : any;
  public weather : WeatherModel;


  constructor( protected http: HttpClient,
    public authService: AuthService,
    private peopleService: PeopleService, private taskService : TaskShiftService,
    private areaService: AreaService, private locationService: LocationService,
    private scheduleClockService: ScheduleClockService, private scheduleService: ScheduleService,
    private weatherService: WeatherService,
    private toastr: ToastrService
    ) {


      this.user = JSON.parse(localStorage.getItem('user')!);
      this.companyId = localStorage.getItem('CompanyId');
      //console.log(this.companyId);
      //console.log('login',this.user );
      this.peopleService.GetbyEmail(this.user.email).subscribe(
        (data:any) => {
          //console.log('person',data);
        });
      this.getWeather();


    }


  ngOnInit(): void {
    this.intervalId = setInterval(() => {
      this.time = new Date();
      if(this.clockActive)
      {
        console.log("current",this.time.getTime());
        const a = this.time.getTime();
        console.log("start",this.startTime.getTime());
        const b = this.startTime.getTime();
        var dif = a-b;
        const totalhours = (Math.abs(a - b) / 36e5);
        const totalMinutes = ((a - b) / (1000 * 60) % 60);
        console.log("hours",totalhours);
        console.log("total",totalMinutes);
        this.hours = Math.floor(totalhours);// Math.floor(totalMinutes / 60);
        console.log( Math.round(totalMinutes / 60));
        this.minutes = Math.round(totalMinutes % 60);
      }
    }, 1000);

    this.getAreas();
    this.getPeople();
    this.getLocations();
    this.getShifts();
    this.getSchedules();

    // Using RxJS Timer
    this.subscription = timer(0, 1000)
      .pipe(
        map(() => new Date()),
        share()
      )
      .subscribe(time => {
        this.rxTime = time;
      });
  }

  ngOnDestroy() {
    clearInterval(this.intervalId);
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }

  private getNowUTC() {
    const now = new Date();
    return new Date(now.getTime() + (now.getTimezoneOffset() * 60000));
  }

  private getUTC(Date_:Date) {
    const now = Date_; //new Date();
    return new Date(now.getTime() + (now.getTimezoneOffset() * 60000));
  }

  private getfromUTC(Date_:Date) {
    const now = Date_; //new Date();
    return new Date(now.getTime() - (now.getTimezoneOffset() * 60000));
  }

  private getWeather() {

    this.weatherService.GetWeather("New York").subscribe(
      (data:WeatherModel) => {
          console.log(data);
          this.weather = data;
      }
    )
  }

  private getShiftbyPersonId(personId: any)
  {
    console.log(personId);
    this.scheduleClockService.GetScheduleShifts().subscribe(
      (data:any) => {
        var shifts = data.filter((t:ScheduleShiftModel) => t.personId == personId
        && t.isActive == true);
        console.log(shifts);
        if (shifts?.length)
        {
          this.scheduleShift = shifts[0];
      //    console.log(this.scheduleShift);
          this.clockActive = true;
          this.startTime = this.getfromUTC(new Date(shifts[0].startTime));//new Date(shifts[0].startTime);

        //  console.log("startTime",shifts[0].startTime);
        //  console.log("converted",this.startTime);
        //  console.log(new Date);
        }
      }
    )
  }

  private getAreas()
  {

    this.areaService.GetAreas().subscribe(
      (data:any) => {
        this.Areas = data;
        console.log('areas', data);
      }
    );
  }

  private getPeople()
  {
    this.peopleService.GetPeople().subscribe(
      (data) => {
        this.People = data;
        console.log('people', data);
      }
    );
  }

  private getLocations()
  {
      this.locationService.GetLocations().subscribe((data) => {
        this.Locations = data;
        console.log('locations', data);
      }
    );
  }

  private getTaskbyId(schedule:any)
  {
    this.taskService.GetTaskShiftID(schedule.taskShiftId).subscribe(
      (data) => {
        console.log('task',data);
        let taskshift = new TaskShiftModel();
        this.Tasks.push(data);

      }
    );
  }

  private getTask(schedules: any)
  {
    schedules.forEach((r:ScheduleModel) => {
        this.getTaskbyId(r);
    });
  }

  private getShifts(id:any = 0)
  {
    this.scheduleClockService.GetScheduleShifts().subscribe(
      (data:any) => {

        data.forEach((r:ScheduleShiftModel) => {
          r.startTime = this.getfromUTC(new Date(r.startTime));  
          r.endTime = this.getfromUTC(new Date(r.endTime));  
      });

        if (id > 0)
        {
          this.Shifts = data.filter(function(data:ScheduleShiftModel)
          {
            return data.personId == id;
          })
        }
        else
        {
          this.Shifts = data;
        }

        console.log('shifts', data);
      }
    );
  }

  private getSchedules(id: any = 0)
  {
    this.scheduleService.GetSchedules().subscribe(
      (data:any) => {
        if (id > 0)
        {
          this.Schedules = data.filter(function(data:ScheduleModel)
          {
            return data.personId == id;
          })

          const now = new Date();
          let currentDate: Date = new Date(now.getTime() + (now.getTimezoneOffset() * 60000));
          
          this.Schedules = data.filter(function(item:ScheduleModel)
          {
            let start: Date = new Date(item.scheduledate);
            return item.personId == id && start >= currentDate;
          })

          this.Tasks = [];
          let taskId = data.filter((val: any) =>
          { return val.personId == id});
          if (taskId>0)
            this.getTask(taskId);
        }
        else
        {
          this.Schedules = data;
        }
        console.log('schedules', data);
      }
    );
  }


  onProfileChange(eventValue: any)
  {
    var id = eventValue.target.value;
    this.clockActive = false;
    var obj = this.People.filter(function(data:PeopleModel) {
      return data.personId==id;
    });
    this.person = obj[0];
    this.scheduleShift.scheduleShiftId = 0;
    this.getShiftbyPersonId(this.person.personId);

    this.getShifts(id);
    this.getSchedules(id);

  }



  onAreaChange(eventValue: any)
  {
    var id = eventValue.target.value;
    var obj = this.Areas.filter(function(data:AreaModel) {
      return data.areaId==id;
    });

    this.area = obj[0];
    console.log(this.area);
  }

  onLocationChange(eventValue: any)
  {
    var id = eventValue.target.value;

    var obj = this.Locations.filter(function(data:LocationModel) {
      return data.locationId==id;
    });

    this.location = obj[0];

    console.log(this.location);

  }

  openModal(): void {
    const dialogRef = this.dialog.open(NgbModal, {
      width: '400px',
    }); 
  } 

  startClock()
  {
    this.clockActive = true;
    this.startTime = this.time;

    this.scheduleShift.startTime = this.time;
    this.scheduleShift.personId = this.person.personId;
    this.scheduleShift.description = this.taskShift.taskShiftName;
    this.scheduleShift.areaId = this.area.areaId;
    this.scheduleShift.locationId = this.location.locationId;
    this.scheduleShift.isActive = true;
    this.scheduleShift.isDeleted = false;
    this.scheduleShift.endTime = this.startTime;
    this.scheduleShift.subject = this.person.firstName;
    this.scheduleShift.updated = this.time;
    this.scheduleShift.created = this.time;

    console.log(this.scheduleShift);
    this.scheduleClockService.PostScheduleShift(this.scheduleShift).subscribe(
      resp => {
        console.log(resp);
      this.scheduleShift.scheduleShiftId = resp.scheduleShiftId;

      }
    );


  }

  stopClock()
  {
    this.clockActive = false;
    this.endTime = this.time;

    this.scheduleShift.endTime = this.endTime;
    this.scheduleShift.updated = this.time;
    this.scheduleShift.isActive = false;

    this.scheduleClockService.PutScheduleShift(this.scheduleShift).subscribe(
      resp => {
        console.log(resp)
        this.scheduleShift = new ScheduleShiftModel();
      }
    );
  }

  openDialog(): void {
    const dialogRef = this.dialog.open(DialogOverviewExampleDialog, {
      data: {name: this.name(), animal: this.animal()},
    });

    dialogRef.afterClosed().subscribe(result => {
      console.log('The dialog was closed');
      if (result !== undefined) {
        this.animal.set(result);
      }
    });
  }

}
function t(t: any, arg1: any, arg2: boolean) {
  throw new Error('Function not implemented.');
}

@Component({
  selector: 'clock-shit.component-dialog',
  templateUrl: 'clock-shit.component-dialog.html',
  standalone: true,
  imports: [
    MatFormFieldModule,
    MatInputModule,
    FormsModule,
    MatButtonModule,
    MatDialogTitle,
    MatDialogContent,
    MatDialogActions,
    MatDialogClose,
  ],
})
export class DialogOverviewExampleDialog {
  readonly dialogRef = inject(MatDialogRef<DialogOverviewExampleDialog>);
  readonly data = inject<DialogData>(MAT_DIALOG_DATA);
  readonly animal = model(this.data.animal);

  onNoClick(): void {
    this.dialogRef.close();
  }
}
</file>

<file path="src/app/components/dashboard/clock-shift/clock-shit.component-dialog.html">
<h2 mat-dialog-title>Hi {{data.name}}</h2>
<mat-dialog-content>
  <p>What's your favorite animal?</p>
  <mat-form-field>
    <mat-label>Favorite Animal</mat-label>
    <input matInput [(ngModel)]="animal" />
  </mat-form-field>
</mat-dialog-content>
<mat-dialog-actions>
  <button mat-button (click)="onNoClick()">No Thanks</button>
  <button mat-button [mat-dialog-close]="animal()" cdkFocusInitial>Ok</button>
</mat-dialog-actions>


<!-- Copyright 2024 Google LLC. All Rights Reserved.
    Use of this source code is governed by an MIT-style license that
    can be found in the LICENSE file at https://angular.io/license -->
</file>

<file path="src/app/components/dashboard/companies/companies.component.html">
<div class="container">
    <div class="card offset">
        <div class="card-header">
            <h2 i18n class="card-title">Locations</h2>
        </div>
        <div class="card-body">
            <div class="list">
                <div class="align-items-center">
                <button i18n class="btn btn-primary" (click)="create()">Create</button>
            </div>
            <ul class="mylist-group">
                <li class="menuitem mylist-group-item" *ngFor="let item of Locations | paginate: { itemsPerPage: 10, currentPage: p }">
                    <a role="button" [routerLink]="" (click)="selected(item)">
                    <div class="menulink">
                        {{ item.locationName }} 
                    </div>
                    </a>
                </li>
                
            </ul>
            </div>
        </div>
    </div>
</file>

<file path="src/app/components/dashboard/companies/companies.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CompaniesComponent } from './companies.component';

describe('CompaniesComponent', () => {
  let component: CompaniesComponent;
  let fixture: ComponentFixture<CompaniesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [CompaniesComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(CompaniesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard/companies/companies.component.ts">
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { companyModel } from 'src/app/core/models/Company';
import { CompanyService } from 'src/app/core/services/company.service';

@Component({
  selector: 'app-companies',
  standalone: true,
  imports: [],
  templateUrl: './companies.component.html',
  styleUrl: './companies.component.css'
})
export class CompaniesComponent {

  Companies : any;
  p : any;
  
  constructor(private companyService: CompanyService,
     public _router : Router,
     ) { 

     }

  ngOnInit(): void
  {
    this.getAll();
  }


  private getAll()
  {
      this.companyService.GetCompanies().subscribe((data) => {
        this.Companies = data;
        //console.log('locations', data);
      }
    );
  }

  create(){
    this._router.navigate(['/dashboard/location']);
  }

  selected(model: companyModel) {
    const id = model ? model.companyId : null;
    this._router.navigate(['/dashboard/location', { id: id }]);
 
  }
}
</file>

<file path="src/app/components/dashboard/dashboard.component.html">
<app-nav-bar></app-nav-bar>
  <div class="container">
    <router-outlet></router-outlet>
  </div>
</file>

<file path="src/app/components/dashboard/dashboard.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DashboardComponent } from './dashboard.component';

describe('DashboardComponent', () => {
  let component: DashboardComponent;
  let fixture: ComponentFixture<DashboardComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ DashboardComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(DashboardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard/dashboard.component.ts">
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { PeopleService } from 'src/app/core/services/people.service';
import { Router, ActivatedRoute } from '@angular/router';
import { id } from 'date-fns/locale';
import { companyModel } from '../../core/models/Company';
import { personalData } from '../../data';
import { PeopleModel } from 'src/app/core/models/People';
import { AuthService } from 'src/app/core/services/auth.service';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-dashboard',
  //template: `<ejs-schedule></ejs-schedule>`,
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css'],
})
export class DashboardComponent implements OnInit {
  profileJson: string = '';
  profileData = {};

  profileUser: PeopleModel = new PeopleModel();
  user:any;
  companyId: any;

  constructor(
    protected http: HttpClient,
    public authService: AuthService,
    private peopleService: PeopleService,
    private toastr: ToastrService  ) {


    this.user = JSON.parse(localStorage.getItem('user')!);
    this.companyId = localStorage.getItem('CompanyId');
   // console.log(this.companyId);
   // console.log('login',this.user );
    this.peopleService.GetbyEmail(this.user.email).subscribe(
      (data:PeopleModel) => {
      //  console.log('person',data);
        localStorage.setItem('CompanyId', data.companyId);
        localStorage.setItem('UserId', data.personId.toString());
      });
    //this.getWeather();
    
    //console.log(this.router.getCurrentNavigation()?.extras.state);
    //var _state = this.router.getCurrentNavigation()?.extras.state;
    //console.log(_state);
    //if (_state != undefined) {
    //  let id = _state['id'];
    //  console.log('person', id);
    //  peopleService.GetPerson(id).subscribe((data: any) => {
    //    this.profileUser = data;
    //    console.log(this.profileUser);
    //    console.log(this.profileUser.companyId);
    //    localStorage.setItem('UserId', id);
    //    //localStorage.setItem('UserId', id);
    //    localStorage.setItem('CompanyId', this.profileUser.companyId);
    //    //localStorage.setItem('CompanyId',data['CompanyId']);
    //  });
    //} else {
    //  let id = localStorage.getItem('UserId');
    //  if (id != undefined) {
    //    peopleService.GetPerson(id).subscribe((data: any) => {
    //     this.profileUser = data;
    //      console.log(this.profileUser.companyId);
    //      //localStorage.setItem('UserId', id);
    //      localStorage.setItem('CompanyId', this.profileUser.companyId);
    //    });
    //  }
    //}
  }
  getWeather() {
    throw new Error('Method not implemented.');
  }

  ngOnInit(): void {
    this.profileData = history.state;

    //console.log('history', this.profileData);

    //this.auth.user$.subscribe(
    //  (profile) => (this.profileJson = JSON.stringify(profile, null, 2)),
    //);
    //console.log(this.profileJson)
  }
}
</file>

<file path="src/app/components/dashboard/event-shift/event-shift.component.html">
<div class="container mt-10" style="background-color: #cbc7c7f9;">
    <div class="row gy-3">
        <div class="col col-sm">
            <div class="card p-3 mt-2">
                <div class="card-body text-center">
                    <h2 class="card-title">Schedule Shift</h2>
                    <div class="gy-2">
                        <div class="row p-2">
                            <select class="form-select" [(ngModel)]="schedule.personId" (change)="onProfileChange($event)" aria-label="Default select example">
                                <option [ngValue]="undefined" [disabled]="true" selected>Select profile</option>
                                <option *ngFor="let item of People" value="{{item.personId}}">{{item.firstName}} {{item.lastName}}</option>
                              </select>
                        </div>
                        <div class="row p-2">
                            <select class="form-select" [(ngModel)]="schedule.locationId" (change)="onLocationChange($event)" aria-label="Default select example">
                                <option [ngValue]="undefined" [disabled]="true" selected>Select location</option>
                                <option *ngFor="let item of Locations" value="{{item.locationId}}">{{item.locationName}}</option>
                              </select>
                        </div>
                        <div class="row p-2">
                            <select class="form-select" [(ngModel)]="schedule.areaId" (change)="onAreaChange($event)" aria-label="Default select example">
                                <option [ngValue]="undefined" [disabled]="true" selected>Select area</option>
                                <option *ngFor="let item of Areas" value="{{item.areaId}}">{{item.areaName}}</option>
                              </select>
                        </div>
                        <div class="row p-2">
                            <select class="form-select" [(ngModel)]="schedule.taskShiftId" (change)="onTaskShiftsChange($event)" aria-label="Default select example">
                                <option [ngValue]="undefined" [disabled]="true" selected>Select Task</option>
                                <option *ngFor="let item of TaskShifts" value="{{item.taskShiftId}}">{{item.taskShiftName}}</option>
                              </select>
                        </div>

                        <div class="row p-2">
                            <label for="scheduledate" class="form-label">Shift Date</label>
                            <input id="scheduledate" type="date" pattern="\d{4}-\d{2}-\d{2}" name="scheduledate" class="form-control"
                            [(ngModel)]="schedule.scheduledate"
                            required="required">
                        </div>

                        <div class="row p-2">
                            <label for="startTime" class="form-label">Start Time</label>
                            <input id="startTime" name="startTime" type="time" class="form-control"
                            [(ngModel)]="schedule.startTime"
                            required="required">
                        </div>

                        <div class="row p-2">
                            <label for="endTime" class="form-label">End Time</label>
                            <input id="endTime" name="endTime" type="time" class="form-control"
                            [(ngModel)]="schedule.endTime"
                            required="required">
                        </div>

                        <div class="row p-2">
                            <label for="keyCode" class="form-label">Subject</label>
                            <input id="keyCode" name="keyCode" type="text" class="form-control"
                            [(ngModel)]="schedule.keyCode"
                            required="required">
                        </div>

                        <div class="row p-2">
                            <label for="tagColor" class="form-label">Tag Color</label>
                            <input id="tagColor" name="tagColor" type="color" class="form-control"
                            [(ngModel)]="schedule.tagColor"
                            required="required">
                        </div>

                    </div>
                    <div> <button class="btn btn-outline-success btn-lg" (click)="saveShift()">Save shift</button></div>
                </div>
            </div>
        </div>
    </div>
</div>
</file>

<file path="src/app/components/dashboard/event-shift/event-shift.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { EventShiftComponent } from './event-shift.component';

describe('EventShiftComponent', () => {
  let component: EventShiftComponent;
  let fixture: ComponentFixture<EventShiftComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ EventShiftComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(EventShiftComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard/event-shift/event-shift.component.ts">
import { Component, OnInit, EventEmitter, output } from '@angular/core';
import { PeopleService } from 'src/app/core/services/people.service';
import { ScheduleService } from 'src/app/core/services/schedule.service';
import { TaskShiftService } from 'src/app/core/services/task-shift.service';
import { PeopleModel } from 'src/app/core/models/People';
import { ScheduleModel } from 'src/app/core/models/Schedule';
import { AreaModel } from 'src/app/core/models/Area';
import { LocationModel } from 'src/app/core/models/Location';
import { TaskShiftModel } from 'src/app/core/models/TaskShift';
import { AreaService } from 'src/app/core/services/area.service';
import { LocationService } from 'src/app/core/services/location.service';
import { DatePipe } from '@angular/common';
import { Observable } from 'rxjs';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-event-shift',
  templateUrl: './event-shift.component.html',
  styleUrls: ['./event-shift.component.css'],
})
export class EventShiftComponent implements OnInit {
  [x: string]: any;
  person: PeopleModel = new PeopleModel();
  taskShift: TaskShiftModel = new TaskShiftModel();
  schedule: ScheduleModel = new ScheduleModel();
  area: AreaModel = new AreaModel();
  location: LocationModel = new LocationModel();

  TaskShifts: any;
  People: any;
  Locations: any;
  Areas: any; //Array<AreaModel> = [] ;
  Area$: Observable<any>;

  modelChange = output<ScheduleModel>();

  //@Output() valuesReturned = new EventEmitter<any>();

  returnValues( model : ScheduleModel) {
    //this.valuesReturned.emit(model);
    this.modelChange.emit(model);
  }

  constructor(
    private scheduleService: ScheduleService,
    private peopleService: PeopleService,
    private taskService: TaskShiftService,
    private areaService: AreaService,
    private locationService: LocationService,
    private toastr: ToastrService
  ) {}

  private getAreas() {
    this.Area$.subscribe((data: any) => {
      this.Areas = data;
      console.log('areas', data);
    });
  }

  private getPeople() {
    this.peopleService.GetPeople().subscribe((data) => {
      this.People = data;
      console.log('people', data);
    });
  }

  private getTaskShifts() {
    this.taskService.GetTaskShift().subscribe((data) => {
      this.TaskShifts = data;
      console.log('people', data);
    });
  }

  private getLocations() {
      this.locationService.GetLocations().subscribe((data) => {
        this.Locations = data;
        console.log('locations', data);
      });
  }

  onProfileChange(eventValue: any) {
    var id = eventValue.target.value;
    var obj = this.People.filter(function (data: PeopleModel) {
      return data.personId == id;
    });
    this.person = obj[0];
    //this.getShiftbyPersonId(this.person.personId);
    //console.log(this.person);
  }

  onAreaChange(eventValue: any) {
    var id = eventValue.target.value;
    var obj = this.Areas.filter(function (data: AreaModel) {
      return data.areaId == id;
    });

    this.area = obj[0];
    console.log(this.area);
  }

  onLocationChange(eventValue: any) {
    var id = eventValue.target.value;

    var obj = this.Locations.filter(function (data: LocationModel) {
      return data.locationId == id;
    });

    this.Area$.subscribe((data: any) => {
      this.Areas = data.filter(function (data: AreaModel) {
        return data.locationId == id;
      });
    });

    this.location = obj[0];

    console.log(this.location);
  }

  onTaskShiftsChange(eventValue: any) {
    var id = eventValue.target.value;

    var obj = this.TaskShifts.filter(function (data: TaskShiftModel) {
      return data.taskShiftId == id;
    });

    this.taskShift = obj[0];

    console.log(this.taskShift);
  }

  scheduleId: number = 0;
  personId?: number;
  areaId?: number;
  locationId?: number;
  taskShiftId?: number;
  keyCode?: string;
  scheduledate?: string;
  startTime?: string;
  endTime?: string;

  tagColor?: string;

  saveShift() {
    this.schedule.personId = this.person.personId;
    this.schedule.taskShiftId = this.taskShift.taskShiftId;
    this.schedule.areaId = this.area.areaId;
    this.schedule.locationId = this.location.locationId;
    //this.schedule.scheduledate = new DatePipe('en-US').transform(this.schedule.scheduledate, 'dd/MM/yyyy');
    //this.schedule.scheduledate = //new Date().toDateString();
    console.log(this.schedule);
    this.scheduleService.PostSchedule(this.schedule).subscribe((resp) => {
      console.log(resp);
      this.schedule.scheduleId = resp.scheduleId;
      this.showSuccess('Success!','Record Created');
      this.returnValues(this.schedule);
    });
  }

  ngOnInit(): void {

    this.Area$ = this.areaService.GetAreas();

    this.getAreas();
    this.getPeople();
    this.getLocations();
    this.getTaskShifts();
  }

  showSuccess(status,message) {
    this.toastr.success(status,message);
  }

  showWarning(status,message)
  {
    this.toastr.warning(status,message)
  }

}
</file>

<file path="src/app/components/dashboard/location/location.component.html">
<form [formGroup]="locationForm" (ngSubmit)="onSubmit(locationForm)">
  <div class="container">
    <div class="card offset">
      <div class="card-header">
        <h2 i18n class="card-title">Locations</h2>

        <div>
          <ul class="dropdown btn dropdown-menu-dark">
            <a i18n class="dropdown-toggle" href="#" id="navbarDarkDropdownMenuLink" role="button" data-bs-toggle="dropdown"
              aria-expanded="false">
              Select Location
            </a>
            <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="navbarDarkDropdownMenuLink">
              <li *ngFor="let item of Locations" (click)="selectedLocation(item)"><a
                  class="dropdown-item">{{item.locationName}}</a></li>
            </ul>
          </ul>
        </div>

        <div class="card-body">

          <div class="mb-3">
            <label i18n for="isActive" class="form-label">Active</label>
            <input id="isActive" formControlName="isActive" type="checkbox" class="form-check-input"
              >
          </div>
          <div class="mb-3">
            <label i18n for="locationName" class="form-label">Location Name</label>
            <input id="locationname" formControlName="locationName" type="text" class="form-control"
              >
          </div>
          <div class="mb-3">
            <label i18n for="locationAddress" class="form-label">Address</label>
            <input id="locationAddress" formControlName="locationAddress" type="text" class="form-control"
              >
          </div>
          <div class="mb-3">
            <label i18n for="cityCode" class="form-label">City</label>
            <input id="cityCode" formControlName="cityCode" type="text" class="form-control"
              >
          </div>   
          <div class="mb-3">
            <label i18n for="stateCode" class="form-label">State</label>
            <input id="stateCode" formControlName="stateCode" type="text" class="form-control"
              >
          </div>
          <div class="mb-3">
            <label i18n for="zipcode" class="form-label">Zip code</label>
            <input id="zipcode" formControlName="zipcode" type="text" class="form-control"
              >
          </div>



          <div class="mb-3">
            <label i18n for="notification" class="form-label">Send Notification</label>
            <input id="notification" formControlName="notification" type="checkbox" class="form-check-input"
              >
          </div>

          <div class="mb-3">
            <label i18n for="validateOnSite" class="form-label">Kyosk Validation</label>
            <input id="validateOnSite" formControlName="validateOnSite" type="checkbox" class="form-check-input"
              >
          </div>  

          <div class="mb-3">
            <label i18n for="validateRatio" class="form-label">Ratio</label>
            <input id="validateRatio" formControlName="validateRatio" type="checkbox" class="form-check-input"
              >
          </div>
          
          <div class="mb-3">
            <label i18n for="RatioMax" class="form-label">Ratio Max</label>
            <input id="ratioMax" formControlName="ratioMax" type="number" class="form-control"
              >
          </div>


          <div class="mb-3">
            <label i18n for="CountryCode" class="form-label">Country</label>
            <input id="CountryCode" formControlName="countryCode" type="text" class="form-control"
              >
          </div>

          <div class="mb-3">
            <label i18n for="geoLocation" class="form-label">Localization Map</label>
            <input id="geoLocation" formControlName="geoLocation" type="text" class="form-control"
              >
          </div>          
          <div>
            <google-map height="500px" width="900px" [center]="center" [zoom]="zoom" (mapClick)="moveMap($event)"
              (mapMousemove)="move($event)">
              <map-marker *ngFor="let marker of markers"
                [position]="marker.position"></map-marker>
            </google-map>

            <div i18n>Latitude: {{display?.lat}}</div>
            <div i18n>Longitude: {{display?.lng}}</div>
          </div>
          <div class="mb-3">
            <div class="offset-3">
              <button name="submit" type="submit" class="btn btn-primary  me-2">Submit</button>
              <button i18n name="delete" type="button" class="btn btn-danger me-2"
                (click)="deleteLocation(location)">Delete</button>
            </div>
          </div>
          <div class="mb-3">
            <small>{{location.created}}</small>
          </div>
        </div>
      </div>
    </div>
  </div>
</form>
</file>

<file path="src/app/components/dashboard/location/location.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LocationComponent } from './location.component';

describe('LocationComponent', () => {
  let component: LocationComponent;
  let fixture: ComponentFixture<LocationComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ LocationComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LocationComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard/location/location.component.ts">
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, NgForm, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { LocationService } from 'src/app/core/services/location.service';
import { Location } from '@angular/common';
import { LocationModel } from '../../../core/models/Location';
import { Observable } from 'rxjs';
import { ToastrService } from 'ngx-toastr';

interface MarkerProperties {
  position: {
    lat: number;
    lng: number;
  }
};

@Component({
  selector: 'app-location',
  templateUrl: './location.component.html',
  styleUrls: ['./location.component.css'],
})
export class LocationComponent implements OnInit {
  [x: string]: any;
  location: LocationModel = new LocationModel();

  Locations: any;

  locationForm: FormGroup;

  location$: Observable<any>

  constructor(
    private locationService: LocationService,
    private route: ActivatedRoute,
  private _router: Router, 
    public _location: Location,
    private fb: FormBuilder,
    private toastr: ToastrService
  ) { }

  ngOnInit(): void {
    this.getLocations();

    const locationId = this.route.snapshot.paramMap.get('id');

    if (locationId)
    {
      this.location$ = this.locationService.GetLocation(locationId);
      console.log(this.location$);

      this.location$.subscribe(
        (data)=> {
          this.selectedLocation(data);
        }
      )
      
    }
    else
    {
      this.location.locationId = 0;
    }



    this.locationForm = this.fb.group({
      locationName: ['', Validators.required],
      locationAddress: ['', [Validators.required, Validators.minLength(5)]],
      zipcode: ['', Validators.required],
      cityCode: ['', Validators.required],
      stateCode: ['', Validators.required],
      countryCode:['', Validators.required],
      geoLocation: [''],
      latitude : [''],
      longitude: [''],
      notification: new FormControl(false, Validators.required),
      validateOnSite: new FormControl(true, Validators.required),
      validateRatio: new FormControl(true, Validators.required),
      isActive: new FormControl(true, Validators.required),
      ration: ['5'],
      ratioMax: new FormControl('5', Validators.required),
    });

  }

  display: any;
  center: google.maps.LatLngLiteral = {
    lat: 40.7458252,
    lng: -73.9722555
  };
  zoom = 12;

  markers: MarkerProperties[] = [
    { position: { lat: 40.745, lng: -73.97 } } // Cathédrale Notre-Dame de Paris
  ];

  /*------------------------------------------
  --------------------------------------------
  moveMap()
  --------------------------------------------
  --------------------------------------------*/
  moveMap(event: google.maps.MapMouseEvent) {
    if (event.latLng != null) this.center = (event.latLng.toJSON());
  }

  /*------------------------------------------
  --------------------------------------------
  move()
  --------------------------------------------
  --------------------------------------------*/
  move(event: google.maps.MapMouseEvent) {
    if (event.latLng != null) this.display = event.latLng.toJSON();
  }


  private getLocations() {
    this.locationService.GetLocations().subscribe((data) => {
      this.Locations = data;
      console.log('locations', data);
    });
  }

  onSubmit(form: FormGroup) {
    console.log(form.value);
    console.log(this.location.locationId);

    if (form.valid) {
      this.location.locationName = form.value.locationName;
      this.location.geoLocation = form.value.geoLocation;
      this.location.cityCode = form.value.cityCode;
      this.location.zipcode = form.value.zipcode;
      this.location.stateCode = form.value.stateCode;
      this.location.countryCode = form.value.countryCode;
      this.location.latitude = form.value.latitude;
      this.location.longitude = form.value.longitude;
      this.location.notification = form.value.notification;
      this.location.validateOnSite = form.value.validateOnSite;
      this.location.validateRatio = form.value.validateRatio;
      this.location.ration = form.value.ration;
      this.location.ratioMax = form.value.rationMax;
      this.location.locationAddress = form.value.locationAddress;
      this.location.isActive = form.value.isActive;


      if (this.location.locationId > 0) {
        this.locationService
          .PutLocation(this.location)
          .subscribe(resp => {
            console.log(resp);
            this.showSuccess('Success!','Record Updated');
            this.location = resp;
          });
      } else {
        this.locationService
          .PostLocation(this.location)
          .subscribe((resp) => {
            console.log(resp);
            this.showSuccess('Success!','Record Created');
            this.location = resp;
          });
      }
      this.location = new LocationModel();
    }
    else {
      console.log('Formulario Invalido');
      this.toastr.warning('Warning','Invalid form')
      return;
    }
  }

  showSuccess(status,message) {
    this.toastr.success(status,message);
  }

  showWarning(status,message)
  {
    this.toastr.warning(status,message)
  }

  selectedLocation(location: LocationModel) {
    this.location = location;

    this.locationForm.patchValue({
      locationName : location.locationName,
      geoLocation : location.geoLocation,
      cityCode: location.cityCode,
      zipcode : location.zipcode,
      stateCode : location.stateCode,
      countryCode : location.countryCode,
      notification : location.notification,
      validateOnSite : location.validateOnSite,
      validateRatio : location.validateRatio,
      locationAddress: location.locationAddress,
      ration: location.ration,
      ratioMax: location.ratioMax
    });
  }

  deleteLocation(location: LocationModel) {
    console.log(location);
    this.locationService.DeleteLocation(location.locationId).subscribe(
      resp => {
        console.log(resp);
        this._router.navigate(['/dashboard/locations']);
      }
    );
    //this.getLocations();
  }

  refresh(): void {
    this._router
      .navigateByUrl('/refresh', { skipLocationChange: true })
      .then(() => {
        console.log(decodeURI(this._location.path()));
        this._router.navigate([decodeURI(this._location.path())]);
      });
  }
}
</file>

<file path="src/app/components/dashboard/locations/locations.component.css">
.mylist-group {
    margin-top: 20px;
    background: #f5f7f8;
    padding: 20px;
    list-style-type:        none;
   
  }
  
  .mylist-group-item{
    background: #e6e7e9;
    margin: 5px;
    padding: 10px;
    
  }
  
  .badge-primary{
      background: #1d1ac5;
  }
  
  
  
  .menuitem:hover {
      background-color:        #8bb3d4;
  }
  
  .menuitem a {
      text-decoration:        none;
      color:                    #000;
  }
  
  .menulink {
      width:                    100%;
      height:                    100%;
  }
</file>

<file path="src/app/components/dashboard/locations/locations.component.html">
<div class="container">
    <div class="card offset">
        <div class="card-header">
            <h2 i18n class="card-title">Locations</h2>
        </div>
        <div class="card-body">
            <div class="list">
                <div class="align-items-center">
                <button i18n class="btn btn-primary" (click)="createLocation()">Create</button>
            </div>
            <ul class="mylist-group">
                <li class="menuitem mylist-group-item" *ngFor="let item of Locations | paginate: { itemsPerPage: 10, currentPage: p }">
                    <a role="button" [routerLink]="" (click)="selectedLocation(item)">
                    <div class="menulink">
                        {{ item.locationName }} 
                    </div>
                    </a>
                </li>
                
            </ul>
            <pagination-controls (pageChange)="p = $event"></pagination-controls>
            </div>
        </div>

    </div>
</file>

<file path="src/app/components/dashboard/locations/locations.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LocationsComponent } from './locations.component';

describe('LocationsComponent', () => {
  let component: LocationsComponent;
  let fixture: ComponentFixture<LocationsComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ LocationsComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LocationsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard/locations/locations.component.ts">
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { LocationModel } from 'src/app/core/models/Location';
import { AreaService } from 'src/app/core/services/area.service';
import { LocationService } from 'src/app/core/services/location.service';

@Component({
  selector: 'app-locations',
  templateUrl: './locations.component.html',
  styleUrls: ['./locations.component.css']
})
export class LocationsComponent {

  Areas : any;
  Locations : any;
  location: any;
  user: any;
  p: any;


  constructor(private areaService: AreaService,
    private locationService: LocationService,
     public _router : Router,
     private toastr: ToastrService
     ) { 

     }

  ngOnInit(): void
  {
    this.getLocations();
  }


  private getLocations()
  {
      this.locationService.GetLocations().subscribe((data) => {
        this.Locations = data;
        //console.log('locations', data);
      }
    );
  }

  createLocation(){
    this._router.navigate(['/dashboard/location']);
  }

  selectedLocation(location: LocationModel) {
    const locationId = location ? location.locationId : null;
    this._router.navigate(['/dashboard/location', { id: locationId }]);
 
  }
}
</file>

<file path="src/app/components/dashboard/nav-bar/nav-bar.component.html">
<header>
  <nav class="navbar navbar-dark navbar-expand-md bg-dark">
    <div class="container-fluid">
    <a class="navbar-brand col-sm-3 col-md-2 mr-0" href="/dashboard/">
      <img class="brand-logo" src="assets/Logo.png" alt="Shift-Clock Logo">
    </a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item">
          <a class="nav-link" routerLink="/dashboard/schedule">Schedule</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" routerLink="/dashboard/profiles">People</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" routerLink="/dashboard/areas">Area</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" routerLink="/dashboard/locations">Location</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" routerLink="/dashboard/clockshift">Clock</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" routerLink="/dashboard/tasks">Task</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" routerLink="/dashboard/eventshift">Shift</a>
        </li>
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
          User
          </a>
          <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
            <li><a class="dropdown-item" href="#">Profile</a></li>
            <li><a class="dropdown-item" href="#">Settings</a></li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item" (click)="authService.SignOut()">Log out</a></li>
          </ul>
        </li>
      </ul>
      <!--form class="form-inline my-2 my-md-0">
        <input class="form-control" type="search" placeholder="Search" aria-label="Search">
      </form-->
    </div>
  </div>
  </nav>
<!-- Sidebar navigation -->
</header>
</file>

<file path="src/app/components/dashboard/nav-bar/nav-bar.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { NavBarComponent } from './nav-bar.component';

describe('NavBarComponent', () => {
  let component: NavBarComponent;
  let fixture: ComponentFixture<NavBarComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ NavBarComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(NavBarComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard/nav-bar/nav-bar.component.ts">
import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { AuthService } from 'src/app/core/services/auth.service';
//import { AuthService } from '@auth0/auth0-angular';
import { PeopleService } from 'src/app/core/services/people.service';

@Component({
  selector: 'app-nav-bar',
  templateUrl: './nav-bar.component.html',
  styleUrls: ['./nav-bar.component.css']
})
export class NavBarComponent implements OnInit {

  profileJson: string = "";
  userLog: string = "";

	
  constructor( protected http: HttpClient,
    peopleService: PeopleService,
    public authService: AuthService
    ) { 
    }

  ngOnInit(): void {
    //this.auth.user$.subscribe(
    //  (profile) => (this.profileJson = JSON.stringify(profile, null, 2)),    
    //);
    console.log(this.profileJson)

  }
  logOut(){
    //this.auth.logout();
    //console.log(this.auth.user$)
  }

}
</file>

<file path="src/app/components/dashboard/people/people.component.html">
<form [formGroup]="personForm" (ngSubmit)="onSubmit(personForm)">
  <div class="container">
    <div class="card offset">
      <div class="card-header">
        <h2 class="card-title">Profile</h2>

        <div>
          <ul class="dropdown btn dropdown-menu-dark">
            <a class="dropdown-toggle" href="#" id="navbarDarkDropdownMenuLink" role="button" data-bs-toggle="dropdown"
              aria-expanded="false">
              Select Profile
            </a>
            <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="navbarDarkDropdownMenuLink">
              <li *ngFor="let item of People" (click)="selectedPeople(item)"><a
                  class="dropdown-item">{{item.firstName}}</a></li>
            </ul>
          </ul>
        </div>

      </div>
      <div class="card-body">
        <div class="mb-3">
          <label for="region" class="form-label">First Name</label>
          <input id="firstname" formControlName="firstName" type="text" class="form-control">
        </div>
        <div class="mb-3">
          <label for="lastname" class="form-label">Last Name</label>
          <input id="lastname" formControlName="lastName" type="text" class="form-control">
        </div>
        <div class="mb-3">
          <label for="documentnumber" class="form-label">Document Number</label>
          <input id="documentnumber" formControlName="documentNumber" type="text" class="form-control">
        </div>
        <div class="mb-3">
          <label for="email" class="form-label">E-Mail</label>
          <input id="email" formControlName="email" type="text" class="form-control">
        </div>
        <div class="mb-3">
          <label for="Mainaddress" class="form-label">Address</label>
          <input id="Mainaddress" formControlName="mainAddress" type="text" class="form-control">
        </div>
        <div class="mb-3">
          <label for="phonenumber" class="form-label">Phone Number</label>
          <input id="phonenumber" formControlName="phoneNumber" type="text" class="form-control">
        </div>
        <div class="form-check">
          <input id="isActive" formControlName="isActive" type="checkbox" class="form-check-input">
          <label for="isActive" class="form-check-label">Active</label>
        </div>
        <div class="form-check">
          <input id="isManager" formControlName="isManager" type="checkbox" class="form-check-input">
          <label for="isManager" class="form-check-label">Manager</label>
        </div>
        <div class="form-check">
          <input id="isSchedule" formControlName="isSchedule" type="checkbox" class="form-check-input">
          <label for="isSchedule" class="form-check-label">Schedule</label>
        </div>
        <div class="mb-3">
          <div class="offset-3">
            <button name="submit" type="submit" class="btn btn-primary  me-2">Submit</button>
            <button name="delete" type="button" class="btn btn-danger me-2"
              (click)="deletePeople(people)">Delete</button>
          </div>
        </div>
        <div class="mb-3">
          <small>{{people.updated}}</small>
        </div>
      </div>
    </div>
  </div>
</form>
</file>

<file path="src/app/components/dashboard/people/people.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PeopleComponent } from './people.component';

describe('PeopleComponent', () => {
  let component: PeopleComponent;
  let fixture: ComponentFixture<PeopleComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ PeopleComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(PeopleComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard/people/people.component.ts">
import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup, NgForm, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { PeopleModel } from 'src/app/core/models/People';
import { PeopleService } from 'src/app/core/services/people.service';
import { Location } from '@angular/common';
import { Observable } from 'rxjs';
import { AuthService } from 'src/app/core/services/auth.service';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-people',
  templateUrl: './people.component.html',
  styleUrls: ['./people.component.css']
})
export class PeopleComponent implements OnInit {
  [x: string]: any;

  public people: PeopleModel = new PeopleModel();

  People: any;
  person$: Observable<any>;

  personForm = new FormGroup({
    firstName: new FormControl('', [Validators.required]),
    lastName: new FormControl('', [Validators.required]),
    documentNumber: new FormControl('', []),
    email: new FormControl('', [Validators.email]),
    mainAddress: new FormControl('', [Validators.required]),
    phoneNumber: new FormControl(0, []),
    isActive: new FormControl(true, []),
    isManager: new FormControl(false, []),
    isSchedule: new FormControl(false, []),
  });

  constructor(private peopleService: PeopleService,
    public _router: Router,
    private route: ActivatedRoute,
    public _location: Location,
    private authService: AuthService,
    private toastr: ToastrService) { }

  ngOnInit(): void {
    this.getPeople();

    const personId = this.route.snapshot.paramMap.get('id');

    if (personId) {
      this.person$ = this.peopleService.GetPerson(personId);
      this.person$.subscribe(
        (data: PeopleModel) => {
          this.selectedPeople(data);
        }
      )
    }
    else {
      this.people.personId = 0;
    }

  }

  private getPeople() {
    this.peopleService.GetPeople().subscribe(
      (data) => {
        this.People = data;
        console.log('people', data);
      }
    );
  }

  onSubmit(form: FormGroup) {
    console.log(this.people);
    console.log(this.people.personId);
    if (form.valid) {
      this.people.firstName = this.personForm.value.firstName;
      this.people.lastName = this.personForm.value.lastName;
      this.people.mainAddress = this.personForm.value.mainAddress;
      this.people.documentNumber = this.personForm.value.documentNumber;
      this.people.phoneNumber = this.personForm.value.phoneNumber;
      this.people.email = this.personForm.value.email;
      this.people.isActive = this.personForm.value.isActive;
      this.people.isManager = this.personForm.value.isManager;
      this.people.isSchedule = this.personForm.value.isSchedule;
      if (this.people.personId > 0) {
        this.peopleService.PutPerson(this.people)
          .subscribe(
            resp => {
              console.log(resp);
              this.showSuccess('Success!', 'Record Updated');
              this.people = resp;
            }
          );
      }
      else {
        this.peopleService.PostPerson(this.people)
          .subscribe(
            resp => {
              console.log(resp);
              //todo: autogenerate password
              //todo: send email with register info
              this.authService.SignUp(this.personForm.value.email, "nmg8x9LGa586bVT")
              this.showSuccess('Success!', 'Record Created');
              this.people = resp;
            }
          );
      }
    }
    else {
      console.log('Formulario Invalido');
      return;
    }
  }

  selectedPeople(people: PeopleModel) {
    this.people = people;

    this.personForm.patchValue({
      firstName: people.firstName,
      lastName: people.lastName,
      documentNumber: people.documentNumber,
      email: people.email,
      mainAddress: people.mainAddress,
      phoneNumber: people.phoneNumber,
      isActive: people.isActive,
      isManager: people.isManager,
      isSchedule: people.isSchedule,
    });
  }

  deletePeople(people: PeopleModel) {
    console.log(people);
    this.peopleService.DeletePerson(this.people.personId).subscribe();
    this.getPeople();
  }

  showSuccess(status, message) {
    this.toastr.success(status, message);
  }

  showWarning(status, message) {
    this.toastr.warning(status, message)
  }

  refresh(): void {
    this._router.navigateByUrl("/refresh", { skipLocationChange: true }).then(() => {
      console.log(decodeURI(this._location.path()));
      this._router.navigate([decodeURI(this._location.path())]);
    });
  }


}
</file>

<file path="src/app/components/dashboard/profiles/profiles.component.css">
.mylist-group {
    margin-top: 20px;
    background: #f5f7f8;
    padding: 20px;
    list-style-type:        none;
   
  }
  
  .mylist-group-item{
    background: #e6e7e9;
    margin: 5px;
    padding: 10px;
    
  }
  
  .badge-primary{
      background: #1d1ac5;
  }
  
  
  
  .menuitem:hover {
      background-color:        #8bb3d4;
  }
  
  .menuitem a {
      text-decoration:        none;
      color:                    #000;
  }
  
  .menulink {
      width:                    100%;
      height:                    100%;
  }
</file>

<file path="src/app/components/dashboard/profiles/profiles.component.html">
<div class="container">
    <div class="card offset">
        <div class="card-header">
            <h2 class="card-title">Profile</h2>
        </div>
        <div class="card-body">
            <div class="list">
                <div class="align-items-center">
                <button class="btn btn-primary" (click)="createProfile()">Create</button>
            </div>
            <ul class="mylist-group">
                <li class="menuitem mylist-group-item" *ngFor="let item of People | paginate: { itemsPerPage: 10, currentPage: p }">
                    <a role="button" [routerLink]="" (click)="selectedProfile(item)">
                    <div class="menulink">
                        {{ item.firstName }} {{ item.lastName }} 
                    </div>
                    </a>
                </li>
                
            </ul>
            <pagination-controls (pageChange)="p = $event"></pagination-controls>
            </div>
        </div>

    </div>
</file>

<file path="src/app/components/dashboard/profiles/profiles.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProfilesComponent } from './profiles.component';

describe('ProfilesComponent', () => {
  let component: ProfilesComponent;
  let fixture: ComponentFixture<ProfilesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ProfilesComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ProfilesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard/profiles/profiles.component.ts">
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { PeopleModel } from 'src/app/core/models/People';
import { PeopleService } from 'src/app/core/services/people.service';

@Component({
  selector: 'app-profiles',
  templateUrl: './profiles.component.html',
  styleUrls: ['./profiles.component.css']
})
export class ProfilesComponent {

  People: any;
  Profile: any;
  p: any;


  constructor(private peopleService: PeopleService,
    public _router: Router,
  ) {

  }

  ngOnInit(): void {
    this.getPeople();
  }

  private getPeople() {
    this.peopleService.GetPeople().subscribe(
      (data) => {
        this.People = data;
        //console.log('People', data);
      }
    );
  }


  createProfile() {
    this._router.navigate(['/dashboard/people']);
  }

  selectedProfile(profile: PeopleModel) {
    this.Profile = profile;
    this._router.navigate(['/dashboard/people', { id: profile.personId }]);
  }
}
</file>

<file path="src/app/components/dashboard/role/role.component.html">
<p>role works!</p>
</file>

<file path="src/app/components/dashboard/role/role.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { RoleComponent } from './role.component';

describe('RoleComponent', () => {
  let component: RoleComponent;
  let fixture: ComponentFixture<RoleComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ RoleComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(RoleComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard/role/role.component.ts">
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-role',
  templateUrl: './role.component.html',
  styleUrls: ['./role.component.css']
})
export class RoleComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

}
</file>

<file path="src/app/components/dashboard/shedule/shedule.component.html">
<div class='demo-app'>
    <div class='demo-app-sidebar'>
      <div class='demo-app-sidebar-section'>
        <div class="row p-2">
          <div class="col-sm-4">
          <select class="form-select" [(ngModel)]="schedule.locationId" (change)="onLocationChange($event)" aria-label="Default select example">
            <option [ngValue]="undefined" [disabled]="true" selected>Select location</option>
            <option [ngValue]="undefined" selected>All Locations</option>
            <option *ngFor="let item of locations" value="{{item.locationId}}">{{item.locationName}}</option>
        </select>
        </div>
      </div>
      </div>
      <div class='demo-app-sidebar-section'>
        <div class="row p-2">
          <div class="col-sm-4">
            <select class="form-select" [(ngModel)]="schedule.personId" (change)="onProfileChange($event)" aria-label="Default select example">
                <option [ngValue]="undefined" [disabled]="true" selected>Select profile</option>
                <option [ngValue]="undefined" selected>All profiles</option>
                <option *ngFor="let item of People" value="{{item.personId}}">{{item.firstName}} {{item.lastName}}</option>
            </select>
          </div>
        <div  class="col-sm-4">
          <button class="btn btn-success" (click)="LoadCalendar()">Add</button>
        </div>
      </div>
    </div>

    <div class="row">
      <div class='col'>
        <full-calendar #calendar [options]="calendarOptions"></full-calendar>

      </div>
  </div>

  </div>
</file>

<file path="src/app/components/dashboard/shedule/shedule.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SheduleComponent } from './shedule.component';

describe('SheduleComponent', () => {
  let component: SheduleComponent;
  let fixture: ComponentFixture<SheduleComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ SheduleComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(SheduleComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard/shedule/shedule.component.ts">
import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { FullCalendarComponent } from '@fullcalendar/angular';
import {
  CalendarOptions,
  DateSelectArg,
  EventClickArg,
  EventApi,
} from '@fullcalendar/core';
import dayGridPlugin from '@fullcalendar/daygrid';
import timeGridPlugin from '@fullcalendar/timegrid';
import listPlugin from '@fullcalendar/list';
import interactionPlugin from '@fullcalendar/interaction';
import bootstrapPlugin from '@fullcalendar/bootstrap';
import { createEventId } from 'src/app/core/services/activity.service';
import { ScheduleService } from 'src/app/core/services/schedule.service';
import { PeopleService } from 'src/app/core/services/people.service';
import { ScheduleModel } from '../../../core/models/Schedule';
import { PeopleModel } from '../../../core/models/People';
import { Calendar, CalendarApi, EventInput } from '@fullcalendar/core';
import { filter, map, Observable } from 'rxjs';
import { LocationService } from 'src/app/core/services/location.service';
import { AreaService } from 'src/app/core/services/area.service';
import { Router } from '@angular/router';
import { LocationModel } from 'src/app/core/models/Location';
import { AreaModel } from 'src/app/core/models/Area';
import { ToastrService } from 'ngx-toastr';

//defineFullCalendarElement();

@Component({
  selector: 'app-shedule',
  templateUrl: './shedule.component.html',
  styleUrls: ['./shedule.component.css'],
})
export class SheduleComponent implements OnInit {


  nuevoevento: any;

  showModal: boolean = false;
  name: string = '';
  date: string = '';
  semodule: string = '';
  activitytype: string = '';
  time_start: string = '';
  time_end: string = '';

  selectedEvent: any = [];
  events_: any = [
    {
      title: 'test',
      start: '2022-09-03T02:30:00',
      end: '2022-09-03T02:30:00',
      backgroundColor: '#96277e',
      borderColor: '#3c8dbc',
    },
  ];

  eventsSchedule: EventInput[] = [];
  TaskShifts: any;
  People: any;
  Schedules: any;
  schedule: ScheduleModel = new ScheduleModel();
  person: PeopleModel = new PeopleModel();
  location: LocationModel = new LocationModel();
  locations: any;
  areas: any;

  //calendarEvents: any;

  @ViewChild('calendar') calendarComponent: FullCalendarComponent;

  calendarVisible = true;
  calendarOptions: CalendarOptions = {
    plugins: [
      dayGridPlugin,
      timeGridPlugin,
      listPlugin,
      interactionPlugin,
      bootstrapPlugin,
    ],
    headerToolbar: {
      left: 'prev,next today',
      center: 'title',
      right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek',
    },
    initialView: 'timeGridWeek',
    //initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed
    events: [
      { title: 'event 1', date: '2024-10-16' },
      { title: 'event 2', date: '2024-10-12' },
    ],
    weekends: true,
    editable: true,
    selectable: true,
    selectMirror: true,
    dayMaxEvents: true,
    select: this.handleDateSelect.bind(this),
    eventClick: this.handleEventClick.bind(this),
    eventsSet: this.handleEvents.bind(this),
  };

  currentEvents: EventApi[] = [];

  eventsPromise: Promise<EventInput[]>;

  //[events]="eventsPromise | async"

  //@ViewChild('fullcalendar') fullcalendar?: FullCalendarComponent;

  //@ViewChild('fullcalendar') calendarRef!: ElementRef<FullCalendarElement> | ElementRef<FullCalendarElement>;

  constructor(
    private scheduleService: ScheduleService,
    private peopleService: PeopleService,
    private locationService: LocationService,
    private areasService: AreaService,
    private toastr: ToastrService,
    private router: Router
  ) {
    this.getSchedules();
    this.getPeople();
    this.getLocations();
    this.getAreas();
  }


  handleValuesReturned(values: ScheduleModel) {
    console.log('Received values:', values);

    this.getSchedulesbyLocation(values.locationId);
    // Use the returned values here
  }

  handleCalendarToggle() {
    this.calendarVisible = !this.calendarVisible;
  }

  handleWeekendsToggle() {
    this.calendarOptions = {
      ...this.calendarOptions,
      themeSystem: 'bootstrap5',
      weekends: !this.calendarOptions.weekends,
    };
  }

  handleDateSelect(selectInfo: DateSelectArg) {
    const title = prompt('Please enter a new title for your event');
    const calendarApi = selectInfo.view.calendar;

    calendarApi.unselect(); // clear date selection

    if (title) {
      calendarApi.addEvent({
        id: createEventId(),
        title,
        start: selectInfo.startStr,
        end: selectInfo.endStr,
        allDay: selectInfo.allDay,
      });
    }
  }

  handleEventClick(clickInfo: EventClickArg) {
    //if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {
    //  clickInfo.event.remove();
    //}
  }

  handleEvents(events: EventApi[]) {
    console.log(events);
    this.currentEvents = events;
  }

  LoadCalendar() {
    console.log('Add pressed');
    this.router.navigate(['/dashboard/eventshift']);
  }

  onLocationChange(eventValue: any) {
    var locationId = eventValue.target.value;
    var obj = this.locations.filter(function (data: LocationModel) {
      return data.locationId == locationId;
    });
    this.location = obj[0];
    this.getSchedulesbyLocation(locationId);
  }

  onProfileChange(eventValue: any) {
    var id = eventValue.target.value;
    var obj = this.People.filter(function (data: PeopleModel) {
      return data.personId == id;
    });
    this.person = obj[0];
    this.getSchedules(id);
  }

  private getPeople() {
    this.peopleService.GetPeople().subscribe((data) => {
      this.People = data;
    });
  }

  private getSchedules(id: any = 0) {
    this.eventsSchedule = [];
    this.events_ = [];

    this.scheduleService.GetSchedules().subscribe((data: any) => {
      if (id > 0) {
        this.Schedules = data.filter((val: any) => {
          return val.personId == id;
        });

        data
          .filter((val: any) => {
            return val.personId == id;
          })
          .forEach((r: ScheduleModel) => {

            let area = new AreaModel();
            let location = new LocationModel();
            let person = new PeopleModel();

            location = this.getLocation(r.locationId);
            area = this.getArea(r.areaId);
            person = this.getPerson(r.personId);

            var date = new Date(Date.parse(r.scheduledate));
            let dateSTR = date.toISOString().replace(/T.*$/, '');

            this.events_.push({
              title: r.keyCode + ' \n' + location.locationName +' \n'+ person.firstName + ' ' + person.lastName,
              start: dateSTR + 'T' + r.startTime + ':00',
              end: dateSTR + 'T' + r.endTime + ':00',
              backgroundColor: r.tagColor,
              borderColor: '#3c8dbc',
            });
          });
        this.calendarOptions = {
          ...this.calendarOptions,
          events: this.events_,
        };
      } else {
        this.Schedules = data;

        data.forEach((r: ScheduleModel) => {
          var date = new Date(Date.parse(r.scheduledate));
          let dateSTR = date.toISOString().replace(/T.*$/, '');

          let area = new AreaModel();
          let location = new LocationModel();
          let person = new PeopleModel();

          location = this.getLocation(r.locationId);
          area = this.getArea(r.areaId);
          person = this.getPerson(r.personId);

          this.events_.push({
            title: r.keyCode + ' \n' + location.locationName +' \n'+ person.firstName + ' ' + person.lastName,
            start: dateSTR + 'T' + r.startTime + ':00',
            end: dateSTR + 'T' + r.endTime + ':00',
            backgroundColor: r.tagColor,
            borderColor: '#3c8dbc',
          });
        });

        this.calendarOptions = {
          ...this.calendarOptions,
          events: this.events_,
        };
      }
    });
  }

  private getSchedulesbyLocation(LocationId: any = 0) {
    this.eventsSchedule = [];
    this.events_ = [];

    this.scheduleService.GetSchedules().subscribe((data: any) => {
      if (LocationId > 0) {
        this.Schedules = data.filter((val: any) => {
          return val.locationId == LocationId;
        });

        data
          .filter((val: any) => {
            return val.locationId == LocationId;
          })
          .forEach((r: ScheduleModel) => {
            var date = new Date(Date.parse(r.scheduledate));
            let dateSTR = date.toISOString().replace(/T.*$/, '');

            let area = new AreaModel();
            let location = new LocationModel();
            let person = new PeopleModel();

            location = this.getLocation(r.locationId);
            area = this.getArea(r.areaId);
            person = this.getPerson(r.personId);

            this.events_.push({
              title: r.keyCode + ' \n' + location.locationName +' \n'+ person.firstName + ' ' + person.lastName,
              start: dateSTR + 'T' + r.startTime + ':00',
              end: dateSTR + 'T' + r.endTime + ':00',
              backgroundColor: r.tagColor,
              borderColor: '#3c8dbc',
            });
          });
        this.calendarOptions = {
          ...this.calendarOptions,
          events: this.events_,
        };
      } else {
        this.Schedules = data;

        data.forEach((r: ScheduleModel) => {
          var date = new Date(Date.parse(r.scheduledate));
          let dateSTR = date.toISOString().replace(/T.*$/, '');

          let area = new AreaModel();
          let location = new LocationModel();
          let person = new PeopleModel();

          location = this.getLocation(r.locationId);
          area = this.getArea(r.areaId);
          person = this.getPerson(r.personId);          

          this.events_.push({
            title: r.keyCode + ' \n' + location.locationName +' \n'+ person.firstName + ' ' + person.lastName,
            start: dateSTR + 'T' + r.startTime + ':00',
            end: dateSTR + 'T' + r.endTime + ':00',
            backgroundColor: r.tagColor,
            borderColor: '#3c8dbc',
          });
        });

        this.calendarOptions = {
          ...this.calendarOptions,
          events: this.events_,
        };
      }
    });
  }

  ngOnInit(): void {
    //  var calendar = new Calendar(calendar, {
    //    schedulerLicenseKey: 'CC-Attribution-NonCommercial-NoDerivatives'
    //  });
    //let calendarApi = this.calendarComponent.getApi();
    //calendarApi.next();

    console.log('Loading events');

    let myevent = [
      {
        title: 'test',
        start: '2022-09-03T02:30:00',
        end: '2022-09-03T02:30:00',
        backgroundColor: '#96277e',
        borderColor: '#3c8dbc',
      },
    ];

    myevent.push({
      title: 'test',
      start: '2022-09-04T02:30:00',
      end: '2022-09-04T02:30:00',
      backgroundColor: '#96277e',
      borderColor: '#3c8dbc',
    });

    const suscription = this.readEvents().subscribe((val: any) => {
      myevent.push({
        title: val.title,
        start: val.start,
        end: val.end,
        backgroundColor: val.backgroundColor,
        borderColor: val.borderColor,
      });
    });

    setTimeout(() => {
      // Unsubscribes BOTH subscription and childSubscription
      suscription.unsubscribe();
    }, 1000);

    this.calendarOptions = {
      ...this.calendarOptions,
      events: myevent,
    };

    console.log('Loaded events');
  }

  readEvents() {
    const scheduleObservable = new Observable((observer) => {
      setTimeout(() => {
        this.scheduleService.GetSchedules().subscribe((result: any) => {
          result.forEach((r: ScheduleModel) => {
            var date = new Date(Date.parse(r.scheduledate));
            let dateSTR = date.toISOString().replace(/T.*$/, '');

            observer.next({
              title: r.keyCode,
              start: dateSTR + 'T' + r.startTime + ':00',
              end: dateSTR + 'T' + r.startTime + ':00',
              backgroundColor: r.tagColor,
              borderColor: '#3c8dbc',
            });
          });
        });
      }, 1000);
    });

    return scheduleObservable;
  }

  ngAfterContentInit(): void {
    console.log('calendar initialized');
    let calendarApi = this.calendarComponent.getApi();
    calendarApi.next();
    //let calendarApi = this.calendarComponent.getApi();
    //calendarApi.next();
  }

  getAreas() {
    this.areasService.GetAreas().subscribe(
      (areaData: AreaModel) => {
        this.areas = areaData;
        // Handle the response data here
        console.log('Area Data:', areaData);
      },
      (error: any) => {
        // Handle errors
        console.error('Error:', error);
      }
    );
  }

  getLocations() {
    this.locationService.GetLocations().subscribe(
      (locationData: LocationModel) => {
        this.locations = locationData;
        // Handle the response data here
        console.log('Area Data:', locationData);
      },
      (error: any) => {
        // Handle errors
        console.error('Error:', error);
      }
    );
  }

  getLocation(locationId: number) {
    var obj = this.locations.filter(function (data: LocationModel) {
      return data.locationId == locationId;
    });
    //this.location = obj[0];
    return obj[0];
  }

  getAreaById(areaId: string) {
    this.areasService.GetArea(areaId).subscribe(
      (areaData: any) => {
        // Handle the response data here
        console.log('Area Data:', areaData);
      },
      (error: any) => {
        // Handle errors
        console.error('Error:', error);
      }
    );
  }

  getArea(AreaId: number) {
    var obj = this.areas.filter(function (data: AreaModel) {
      return data.areaId == AreaId;
    });
    //this.location = obj[0];
    return obj[0];
  }

  getPerson(personId: number) {
    var obj = this.People.filter(function (data: PeopleModel) {
      return data.personId == personId;
    });
    //this.location = obj[0];
    return obj[0];
  }

}
</file>

<file path="src/app/components/dashboard/task-shift/task-shift.component.html">
<form [formGroup]="taskForm" (ngSubmit)="onSubmit(taskForm)">
  <div class="container">
    <div class="card offset">
      <div class="card-header">
        <h2 class="card-title">TaskShift</h2>
        <div>
          <ul class="dropdown btn dropdown-menu-dark">
            <a class="dropdown-toggle" href="#" id="navbarDarkDropdownMenuLink" role="button" data-bs-toggle="dropdown"
              aria-expanded="false">
              Select TaskShift
            </a>
            <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="navbarDarkDropdownMenuLink">
              <li *ngFor="let item of TaskShift" (click)="selectedTaskShift(item)">
                <ul class="dropdown-item">{{item.taskShiftName}}</ul>
              </li>
            </ul>
          </ul>
        </div>
      </div>
      <div class="card-body">
        <div class="mb-3">
          <label for="taskShiftName" class="form-label">Task Description</label>
          <input id="taskShiftName" name="taskShiftName" type="text" class="form-control" formControlName="taskShiftName">
        </div>
        <div class="mb-3">
          <label for="comment" class="form-label">Note</label>
          <input id="comment" name="comment" type="text" class="form-control" formControlName="comment"
            >
        </div>        
        <div class="mb-3">
          <label for="taskDate" class="form-label">Task Date</label>
          <input id="taskDate" name="taskDate" type="date"  class="form-control" formControlName="taskDate"
            >
        </div>
        <div class="mb-3">
          <label for="startTime" class="form-label">Task startTime</label>
          <input id="startTime" name="startTime" type="time" class="form-control" formControlName="startTime"
            >
        </div>
        <div class="mb-3">
          <label for="endTime" class="form-label">Task endTime</label>
          <input id="endTime" name="endTime" type="time" class="form-control" formControlName="endTime"
            >
        </div>

        <div class="mb-3">
          <div class="offset-3">
            <button name="submit" type="submit" class="btn btn-primary  me-2">Submit</button>
            <button name="delete" type="button" class="btn btn-danger me-2"
              (click)="deleteTaskShift(taskShift)">Delete</button>
          </div>
        </div>
        <div class="mb-3">
          <small>{{taskShift.createdDate}}</small>
        </div>
      </div>
    </div>
  </div>
</form>
</file>

<file path="src/app/components/dashboard/task-shift/task-shift.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TaskShiftComponent } from './task-shift.component';

describe('TaskShiftComponent', () => {
  let component: TaskShiftComponent;
  let fixture: ComponentFixture<TaskShiftComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TaskShiftComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(TaskShiftComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard/task-shift/task-shift.component.ts">
import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup, NgForm, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { TaskShiftModel } from 'src/app/core/models/TaskShift';
import { TaskShiftService } from 'src/app/core/services/task-shift.service';
import { DatePipe, Location } from '@angular/common';
import { Observable } from 'rxjs';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-task-shift',
  templateUrl: './task-shift.component.html',
  styleUrls: ['./task-shift.component.css']
})
export class TaskShiftComponent implements OnInit {

  taskShift: TaskShiftModel = new TaskShiftModel();

  TaskShift: any;
  task$: Observable<any>;

  taskForm = new FormGroup({
    taskShiftName: new FormControl('', [Validators.required]),
    comment: new FormControl('', [Validators.required]),
    taskDate: new FormControl('', [Validators.required]),
    startTime: new FormControl('', [Validators.required]),
    endTime: new FormControl('', [Validators.required])
  });

  constructor(private TaskShiftService: TaskShiftService,
    public _router: Router,
    private route: ActivatedRoute,    
    public _location: Location,
    private toastr: ToastrService) { }

  ngOnInit(): void {
    this.getTaskShift();
    const taskId = this.route.snapshot.paramMap.get('id');

    if (taskId)
    {
      this.task$ = this.TaskShiftService.GetTaskShiftID(taskId);
      this.task$.subscribe(
        (data:TaskShiftModel)=> {
          this.selectedTaskShift(data);
        }
      )
      
    }

  }

  private getTaskShift() {
    this.TaskShiftService.GetTaskShift().subscribe(
      (data) => {
        this.TaskShift = data;
        console.log('TaskShift', data);
      }
    );
  }

  onSubmit(form: FormGroup) {


    //this.taskShift.startTime =  this.taskShift.taskDate +" "+ this.taskShift.startTime.toString();
    //this.taskShift.endTime = this.taskShift.taskDate +" "+ this.TaskShift.endTime.toString();
    console.log(this.taskShift);


    if (form.valid)
    {
      this.taskShift.taskShiftName = form.value.taskShiftName;
      this.taskShift.comment = form.value.comment;
      this.taskShift.taskDate = form.value.taskDate;
      this.taskShift.startTime = form.value.startTime;
      this.taskShift.endTime = form.value.endTime;

      if (this.taskShift.taskShiftId > 0) {
        this.TaskShiftService.PutTaskShift(this.taskShift)
          .subscribe(
            resp => {console.log(resp);
              this.showSuccess('Success!','Record Updated');
              this.taskShift = resp;
             }
          );
      }
      else {
        this.TaskShiftService.PostTaskShift(this.taskShift)
          .subscribe(
            (resp) => {
              console.log(resp);
              this.showSuccess('Success!','Record Created');
              this.taskShift = resp;
              //this.taskShift = new TaskShiftModel();
            }
          );
      }

    }else{
      console.log('Formulario Invalido');
      this.toastr.warning('Warning','Invalid form')
      return;
    }
  }

  showSuccess(status,message) {
    this.toastr.success(status,message);
  }

  showWarning(status,message)
  {
    this.toastr.warning(status,message)
  }

  selectedTaskShift(taskShift: TaskShiftModel) {
    let datetask = this.getFormatedDate(taskShift.taskDate,"yyyy-MM-dd");
    console.log(datetask);
    this.taskShift.taskDate = this.convertToLocalDate(datetask);
    console.log(this.taskShift);
   
    this.taskShift = taskShift;

    this.taskForm.patchValue({
      taskShiftName: taskShift.taskShiftName,
      comment: taskShift.comment,
      taskDate: datetask,
      startTime: taskShift.startTime,
      endTime: taskShift.endTime
    });

  }

  getFormatedDate(date: Date, format: string) {
    const datePipe = new DatePipe('en-US');
    return datePipe.transform(date, format);
}

convertToLocalDate(responseDate: any) {
  try {
      if (responseDate != null) {
          if (typeof (responseDate) === 'string') {
              if (String(responseDate.indexOf('T') >= 0)) {
                  responseDate = responseDate.split('T')[0];
              }
              if (String(responseDate.indexOf('+') >= 0)) {
                  responseDate = responseDate.split('+')[0];
              }
          }

          responseDate = new Date(responseDate);
          const newDate = new Date(responseDate.getFullYear(), responseDate.getMonth(), responseDate.getDate(), 0, 0, 0);
          const userTimezoneOffset = newDate.getTimezoneOffset() * 60000;

          const finalDate: Date = new Date(newDate.getTime() - userTimezoneOffset);
          return finalDate;
      } else {
          return null;
      }
  } catch (error) {
      return responseDate;
  }
}

  private getfromUTC(Date_:Date) {
    const now = Date_; //new Date();
    return new Date(now.getTime() - (now.getTimezoneOffset() * 60000));
  }

  deleteTaskShift(taskShift: TaskShiftModel) {
    console.log(taskShift);
    this.TaskShiftService.DeleteTaskShift(taskShift.taskShiftId).subscribe();
    this.getTaskShift();
  }

  refresh(): void {
    this._router.navigateByUrl("/refresh", { skipLocationChange: true }).then(() => {
      console.log(decodeURI(this._location.path()));
      this._router.navigate([decodeURI(this._location.path())]);
    });
  }
}
</file>

<file path="src/app/components/dashboard/tasks/tasks.component.css">
.mylist-group {
    margin-top: 20px;
    background: #f5f7f8;
    padding: 20px;
    list-style-type:        none;
   
  }
  
  .mylist-group-item{
    background: #e6e7e9;
    margin: 5px;
    padding: 10px;
    
  }
  
  .badge-primary{
      background: #1d1ac5;
  }
  
  
  
  .menuitem:hover {
      background-color:        #8bb3d4;
  }
  
  .menuitem a {
      text-decoration:        none;
      color:                    #000;
  }
  
  .menulink {
      width:                    100%;
      height:                    100%;
  }
</file>

<file path="src/app/components/dashboard/tasks/tasks.component.html">
<div class="container">
    <div class="card offset">
        <div class="card-header">
            <h2 class="card-title">Tasks</h2>
        </div>
        <div class="card-body">
            <div class="list">
                <div class="align-items-center">
                <button class="btn btn-primary" (click)="createTask()">Create</button>
            </div>
            <ul class="mylist-group">
                <li class="menuitem mylist-group-item" *ngFor="let item of Tasks | paginate: { itemsPerPage: 10, currentPage: p }">
                    <a role="button" [routerLink]="" (click)="selectedTask(item)">
                    <div class="menulink">
                        {{ item.taskShiftName }} 
                    </div>
                    </a>
                </li>
                
            </ul>
            <pagination-controls (pageChange)="p = $event"></pagination-controls>
            </div>
        </div>

    </div>
</file>

<file path="src/app/components/dashboard/tasks/tasks.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TasksComponent } from './tasks.component';

describe('TasksComponent', () => {
  let component: TasksComponent;
  let fixture: ComponentFixture<TasksComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ TasksComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(TasksComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard/tasks/tasks.component.ts">
import { Component } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Observable } from 'rxjs';
import { TaskShiftModel } from 'src/app/core/models/TaskShift';
import { TaskShiftService } from 'src/app/core/services/task-shift.service';

@Component({
  selector: 'app-tasks',
  templateUrl: './tasks.component.html',
  styleUrls: ['./tasks.component.css']
})
export class TasksComponent {

  Areas : any;
  Tasks : any;
  task: any;
  user: any;
  p: any;
  task$: Observable<any>;


  constructor(private taskService: TaskShiftService,
     public _router : Router,

     ) { 

     }

  ngOnInit(): void
  {
    this.getTasks();
  }


  private getTasks()
  {
      this.taskService.GetTaskShift().subscribe((data) => {
        this.Tasks = data;
        //console.log('locations', data);
      }
    );
  }

  createTask(){
    this._router.navigate(['/dashboard/taskshift']);
  }

  selectedTask(task: TaskShiftModel) {
    const id = location ? task.taskShiftId : null;
    this._router.navigate(['/dashboard/taskshift', { id: id }]);
  }
}
</file>

<file path="src/app/components/forgot-password/forgot-password.component.html">
<div class="displayTable">
    <div class="displayTableCell">
      <div class="authBlock">
        <h3>Reset Password</h3>
        <p class="text-center">Please enter your email address to request a password reset.</p>
        <div class="formGroup">
          <input type="email" class="formControl" placeholder="Email Address" #passwordResetEmail required>
        </div>
        <!-- Calling ForgotPassword from AuthService Api -->
        <div class="formGroup">
          <input type="submit" class="btn btnPrimary" value="Reset Password" (click)="authService.ForgotPassword(passwordResetEmail.value)">
        </div>
      </div>
      <div class="redirectToLogin">
        <span>Go back to ? <span class="redirect" routerLink="/sign-in">Log In</span></span>
      </div>
    </div>
  </div>
</file>

<file path="src/app/components/forgot-password/forgot-password.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ForgotPasswordComponent } from './forgot-password.component';

describe('ForgotPasswordComponent', () => {
  let component: ForgotPasswordComponent;
  let fixture: ComponentFixture<ForgotPasswordComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ForgotPasswordComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ForgotPasswordComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/forgot-password/forgot-password.component.ts">
import { Component, OnInit } from '@angular/core';
import { AuthService } from "src/app/core/services/auth.service";
@Component({
  selector: 'app-forgot-password',
  templateUrl: './forgot-password.component.html',
  styleUrls: ['./forgot-password.component.css']
})

export class ForgotPasswordComponent implements OnInit {
  constructor(
    public authService: AuthService
  ) { }
  ngOnInit() {
  }
}
</file>

<file path="src/app/components/fullcalendarlib/full-calendar.component.html">
<offscreen-fragment>
    <transport-container *ngFor="let customRendering of customRenderings; trackBy:trackCustomRendering"
      [inPlaceOf]="customRendering.containerEl"
      [reportEl]="customRendering.reportNewContainerEl"
      [elTag]="customRendering.elTag"
      [elClasses]="customRendering.elClasses"
      [elStyle]="customRendering.elStyle"
      [elAttrs]="customRendering.elAttrs"
      [template]="templateMap[customRendering.generatorName]!"
      [renderProps]="customRendering.renderProps"
    ></transport-container>
  </offscreen-fragment>
</file>

<file path="src/app/components/fullcalendarlib/full-calendar.component.spec.ts">
import { Component, ViewChild } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FullCalendarModule } from './full-calendar.module';
import { FullCalendarComponent } from './full-calendar.component';
import { CalendarOptions } from '@fullcalendar/core';
import dayGridPlugin from '@fullcalendar/daygrid';
import interactionPlugin from '@fullcalendar/interaction';
import listPlugin from '@fullcalendar/list';
import resourceTimeGridPlugin from '@fullcalendar/resource-timegrid';
import resourceTimelinePlugin from '@fullcalendar/resource-timeline';

const DEFAULT_OPTIONS = {
  plugins: [dayGridPlugin, interactionPlugin],
  editable: true,
};

describe('FullCalendarComponent', () => {
  let component: FullCalendarComponent;
  let fixture: ComponentFixture<FullCalendarComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [FullCalendarModule]
    }).compileComponents();

    fixture = TestBed.createComponent(FullCalendarComponent);
    component = fixture.componentInstance;
    component.options = DEFAULT_OPTIONS;
    fixture.detectChanges(); // necessary for initializing change detection system
  });

  it('should create', () => {
    expect(component).toBeTruthy();
    expect(isHeaderToolbarRendered(fixture)).toBe(true);
  });

  it('should unmount and call destroy', () => {
    fixture.destroy();
    expect(isHeaderToolbarRendered(fixture)).toBe(false);
  });

  it('should expose an API', () => {
    const calendarApi = component.getApi();
    expect(calendarApi).toBeTruthy();

    const newDate = new Date(Date.UTC(2000, 0, 1));
    calendarApi.gotoDate(newDate);
    expect(calendarApi.getDate().valueOf()).toBe(newDate.valueOf());
  });

});


// some tests need a wrapper component

@Component({
  template: `
    <full-calendar [options]="calendarOptions"></full-calendar>
  `
})
class HostComponent {
  calendarOptions = {
    ...DEFAULT_OPTIONS,
    weekends: true,
    events: [buildEvent()] as any,
    viewDidMount: this.handleViewDidMount.bind(this),
    eventDidMount: this.handleEventDidMount.bind(this)
  };
  viewSkeletonRenderCnt = 0;
  eventRenderCnt = 0;
  something = 999;

  disableWeekends() {
    this.calendarOptions.weekends = false;
  }

  changeSomething() {
    this.something++;
  }

  addEventReset() {
    this.calendarOptions.events = this.calendarOptions.events.concat([ buildEvent() ]);
  }

  setEventFunc(timeout: number) {
    this.calendarOptions.events = function(info: any, successCallback: any) {
      setTimeout(function() {
        successCallback([ buildEvent() ]);
      }, timeout);
    };
  }

  handleViewDidMount() {
    this.viewSkeletonRenderCnt++;
  }

  handleEventDidMount() {
    this.eventRenderCnt++;
  }
}

describe('HostComponent', () => {
  let component: HostComponent;
  let fixture: ComponentFixture<HostComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [FullCalendarModule],
      declarations: [HostComponent]
    }).compileComponents();

    fixture = TestBed.createComponent(HostComponent);
    component = fixture.componentInstance;
    fixture.detectChanges(); // necessary for initializing change detection system
  });

  it('should handle prop changes', () => {
    expect(isWeekendsRendered(fixture)).toBe(true);
    component.disableWeekends();
    fixture.detectChanges();
    expect(isWeekendsRendered(fixture)).toBe(false);
  });

  it('should handle prop changes that don\'t rerender any DOM', () => {
    const headerEl = getHeaderToolbarEl(fixture);
    expect(component.viewSkeletonRenderCnt).toBe(1);
    component.changeSomething();
    fixture.detectChanges();
    expect(getHeaderToolbarEl(fixture)).toBe(headerEl);
    expect(component.viewSkeletonRenderCnt).toBe(1);
  });

  it('should emit an event', () => {
    expect(component.viewSkeletonRenderCnt).toBeGreaterThan(0);
  });

  it('should render new events with prop change', () => {
    expect(component.eventRenderCnt).toBe(1);
    component.addEventReset();
    fixture.detectChanges();
    expect(component.eventRenderCnt).toBe(3); // +2 (the two events were freshly rendered)
  });

  it('should handle new events async function', (done) => {
    expect(component.eventRenderCnt).toBe(1);
    component.setEventFunc(100);
    fixture.detectChanges();
    setTimeout(function() {
      expect(component.eventRenderCnt).toBe(2); // +1
      done();
    }, 200);
  });

});


// uses the separate `events` input

@Component({
  template: `
    <full-calendar
      [options]="calendarOptions"
      [events]="events"
    ></full-calendar>
  `
})
class HostComponentWithEventAttr {
  calendarOptions: CalendarOptions = {
    ...DEFAULT_OPTIONS,
    eventDidMount: this.handleEventDidMount.bind(this)
  };
  events = [buildEvent()];
  eventRenderCnt = 0;

  handleEventDidMount() {
    this.eventRenderCnt++;
  }

  addEventReset() {
    this.events = this.events.concat([buildEvent()]);
  }
}

describe('HostComponentWithEventAttr', () => {
  let component: HostComponentWithEventAttr;
  let fixture: ComponentFixture<HostComponentWithEventAttr>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [FullCalendarModule],
      declarations: [HostComponentWithEventAttr]
    }).compileComponents();

    fixture = TestBed.createComponent(HostComponentWithEventAttr);
    component = fixture.componentInstance;
    fixture.detectChanges(); // necessary for initializing change detection system
  });

  it('should render events', () => {
    expect(component.eventRenderCnt).toBe(1);
    component.addEventReset();
    fixture.detectChanges();
    expect(component.eventRenderCnt).toBe(3); // +2 (the two events were freshly rendered)
  });
})


// has content-injection template

@Component({
  template: `
    <full-calendar #calendar [options]="calendarOptions">
      <ng-template #eventContent let-arg>
        <b *ngIf="isBold">{{ arg.event.title }}</b>
        <i *ngIf="!isBold">{{ arg.event.title }}</i>
      </ng-template>
    </full-calendar>
  `
})
class HostComponentWithTemplate {
  calendarOptions = {
    ...DEFAULT_OPTIONS,
    events: [buildEvent()]
  };
  isBold = false;

  @ViewChild('calendar') calendarComponent?: FullCalendarComponent;

  turnBold() {
    this.isBold = true;
  }
}

describe('HostComponentWithTemplate', () => {
  let component: HostComponentWithTemplate;
  let fixture: ComponentFixture<HostComponentWithTemplate>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [FullCalendarModule],
      declarations: [HostComponentWithTemplate]
    }).compileComponents();

    fixture = TestBed.createComponent(HostComponentWithTemplate);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should render event with custom template', () => {
    const eventEl = getFirstEventEl(fixture);
    expect(eventEl.querySelectorAll('i').length).toBe(1);
    expect(eventEl.querySelectorAll('b').length).toBe(0);

    component.turnBold();
    fixture.detectChanges();

    expect(eventEl).toBe(getFirstEventEl(fixture));
    expect(eventEl.querySelectorAll('i').length).toBe(0);
    expect(eventEl.querySelectorAll('b').length).toBe(1);
  });

  it('should custom-render going forward-back', () => {
    const calendar = component.calendarComponent!.getApi();

    let eventEl = getFirstEventEl(fixture);
    expect(eventEl.querySelectorAll('i').length).toBe(1);
    expect(eventEl.querySelectorAll('b').length).toBe(0);

    calendar.next();
    calendar.prev();

    eventEl = getFirstEventEl(fixture);
    expect(eventEl.querySelectorAll('i').length).toBe(1);
    expect(eventEl.querySelectorAll('b').length).toBe(0);
  });

  it('should custom-render DnD-able daygrid list-like event', () => {
    let eventEl = getFirstEventEl(fixture);
    expect(eventEl).toHaveClass('fc-daygrid-dot-event');
    expect(typeof eventEl.fcSeg).toBe('object');
  })
})


// some tests need a wrapper component with DEEP COMPARISON

@Component({
  template: `
    <full-calendar
      deepChangeDetection="true"
      [options]="calendarOptions"
    ></full-calendar>
  `
})
class DeepHostComponent {

  calendarOptions = {
    ...DEFAULT_OPTIONS,
    events: [buildEvent()] as any,
    eventDidMount: this.handleEventDidMount.bind(this)
  };
  eventRenderCnt = 0;

  addEventAppend() {
    this.calendarOptions.events.push(buildEvent());
  }

  updateEventTitle(title: string) {
    this.calendarOptions.events[0].title = title;
  }

  setEventFunc(timeout: number) {
    this.calendarOptions.events = function(info: any, successCallback: any) {
      setTimeout(function() {
        successCallback([ buildEvent() ]);
      }, timeout);
    };
  }

  handleEventDidMount() {
    this.eventRenderCnt++;
  }
}

describe('DeepHostComponent', () => {
  let component: DeepHostComponent;
  let fixture: ComponentFixture<DeepHostComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [FullCalendarModule],
      declarations: [DeepHostComponent]
    }).compileComponents();

    fixture = TestBed.createComponent(DeepHostComponent);
    component = fixture.componentInstance;
    fixture.detectChanges(); // necessary for initializing change detection system
  });

  it('should render new appended event', () => {
    expect(component.eventRenderCnt).toBe(1);
    component.addEventAppend();
    fixture.detectChanges();
    expect(component.eventRenderCnt).toBe(3); // +2 (the two events were freshly rendered)
  });

  it('should render event mutation', () => {
    expect(component.eventRenderCnt).toBe(1);

    component.updateEventTitle('another title');
    fixture.detectChanges();
    expect(getFirstEventTitle(fixture)).toBe('another title');
    expect(component.eventRenderCnt).toBe(2); // +1

    component.updateEventTitle('another title');
    fixture.detectChanges();
    expect(getFirstEventTitle(fixture)).toBe('another title');
    expect(component.eventRenderCnt).toBe(2); // +0 (didn't rerender anything)
  });

  it('should handle new events async function', (done) => {
    expect(component.eventRenderCnt).toBe(1);
    component.setEventFunc(100);
    fixture.detectChanges();
    setTimeout(function() {
      expect(component.eventRenderCnt).toBe(2); // +1
      done();
    }, 200);
  });

});


// Integration test
// https://github.com/fullcalendar/fullcalendar/issues/7058

@Component({
  template: `
    <full-calendar #calendar [options]="calendarOptions">
      <ng-template #eventContent let-arg>
        <b>{{ arg.event.title }}</b>
      </ng-template>
    </full-calendar>
  `
})
class CrapComponent {
  private defaultHeaderToolbar = {
    left: '',
    center: 'title',
    right: '',
  }

  @ViewChild('calendar') calendarComponent?: FullCalendarComponent;

  calendarOptions: CalendarOptions = {
    plugins: [listPlugin],
    headerToolbar: this.defaultHeaderToolbar,
    initialView: 'listWeek',
    events: [buildEvent()] as any,
    datesSet: this.onDatesSet.bind(this)
  };

  onDatesSet() {
    this.calendarComponent!.getApi().setOption('headerToolbar', this.defaultHeaderToolbar)
  }
}

describe('with list-view, customContent, and state mutation in datesSet', () => {
  let component: CrapComponent;
  let fixture: ComponentFixture<CrapComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [FullCalendarModule],
      declarations: [CrapComponent]
    }).compileComponents();

    fixture = TestBed.createComponent(CrapComponent);
    component = fixture.componentInstance;
    fixture.detectChanges(); // necessary for initializing change detection system
  });

  it('doesn\'t throw any errors', () => {
    expect(Boolean(fixture)).toBe(true)
  })
})


// Integration test: resource-timeline
// https://github.com/fullcalendar/fullcalendar/issues/7105

@Component({
  template: `
    <full-calendar #calendar [options]="calendarOptions">
      <ng-template #resourceLabelContent let-arg>
        <b>{{ arg.resource.title }}</b>
      </ng-template>
    </full-calendar>
  `
})
class LameComponent {
  calendarOptions: CalendarOptions = {
    plugins: [resourceTimelinePlugin],
    initialView: 'resourceTimelineWeek',
    resources: [{ id: 'a', title: 'a' }]
  };

  @ViewChild('calendar') calendarComponent?: FullCalendarComponent;

  removeResource() {
    const resource = this.calendarComponent!.getApi().getResourceById('a')!
    resource.remove()
  }
}

describe('with resource-timeline view', () => {
  let component: LameComponent;
  let fixture: ComponentFixture<LameComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [FullCalendarModule],
      declarations: [LameComponent]
    }).compileComponents();

    fixture = TestBed.createComponent(LameComponent);
    component = fixture.componentInstance;
    fixture.detectChanges(); // necessary for initializing change detection system
  });

  it('doesn\'t throw any errors when removing a resource', () => {
    component.removeResource()
    expect(Boolean(fixture)).toBe(true)
  })
})


// Integration test: resource-timegrid
// https://github.com/fullcalendar/fullcalendar/issues/7182


@Component({
  template: `
    <full-calendar #calendar [options]="calendarOptions">
      <ng-template #resourceLabelContent let-arg>
        <b>{{ arg.resource.title }}</b>
      </ng-template>
    </full-calendar>
  `
})
class ResourceTimeGridComponent {
  calendarOptions: CalendarOptions = {
    plugins: [resourceTimeGridPlugin],
    initialView: 'resourceTimeGridDay',
    resources: [{ id: 'a', title: 'a' }]
  };
}

describe('with resource-timeline view', () => {
  let component: ResourceTimeGridComponent;
  let fixture: ComponentFixture<ResourceTimeGridComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [FullCalendarModule],
      declarations: [ResourceTimeGridComponent]
    }).compileComponents();

    fixture = TestBed.createComponent(ResourceTimeGridComponent);
    component = fixture.componentInstance;
    fixture.detectChanges(); // necessary for initializing change detection system
  });

  it('renders custom label', () => {
    const resourceColHeader = fixture.nativeElement.querySelector('.fc-col-header-cell.fc-resource');
    expect(resourceColHeader.querySelectorAll('b').length).toBe(1);
  })
})


// Supplying content-injection as a function for dayCellContent
// https://github.com/fullcalendar/fullcalendar/issues/7187


@Component({
  template: `
    <full-calendar #calendar [options]="calendarOptions"></full-calendar>
  `
})
class MonthComponent {
  calendarOptions: CalendarOptions = {
    plugins: [dayGridPlugin],
    initialView: 'dayGridMonth',
    dayCellContent(arg) {
      return { html: `<b>${arg.dayNumberText}</b>` }
    },
  };
}

describe('with month view and dayCellContent as a function', () => {
  let component: MonthComponent;
  let fixture: ComponentFixture<MonthComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [FullCalendarModule],
      declarations: [MonthComponent]
    }).compileComponents();

    fixture = TestBed.createComponent(MonthComponent);
    component = fixture.componentInstance;
    fixture.detectChanges(); // necessary for initializing change detection system
  });

  it('should render custom content', () => {
    const resourceColHeader = fixture.nativeElement.querySelector('.fc-daygrid-day-top');
    expect(resourceColHeader.querySelectorAll('b').length).toBe(1);
  });
});


// https://github.com/fullcalendar/fullcalendar/issues/7191
describe('dayGridMonth view dot-event elements, custom content, and eventDidMount', () => {
  let eventDidMountCnt: number | undefined
  let dotEventEl: HTMLElement | undefined

  @Component({
    template: `
      <full-calendar #calendar [options]="calendarOptions">
        <ng-template #eventContent let-arg>
          <b>{{ arg.timeText }}</b>
          <i>{{ arg.event.title }}</i>
        </ng-template>
      </full-calendar>
    `
  })
  class MonthComponent2 {
    calendarOptions: CalendarOptions = {
      plugins: [dayGridPlugin],
      initialDate: '2023-03-20',
      events: [
        { start: '2023-03-20T00:12:00', allDay: false }
      ],
      initialView: 'dayGridMonth',
      eventDidMount(arg) {
        dotEventEl = arg.el
        eventDidMountCnt!++
      },
    };
  }

  let component: MonthComponent2;
  let fixture: ComponentFixture<MonthComponent2>;

  beforeEach(() => {
    eventDidMountCnt = 0
    dotEventEl = undefined

    TestBed.configureTestingModule({
      imports: [FullCalendarModule],
      declarations: [MonthComponent2]
    }).compileComponents();

    fixture = TestBed.createComponent(MonthComponent2);
    component = fixture.componentInstance;
    fixture.detectChanges(); // necessary for initializing change detection system
  });

  it('has elements visible in DOM', (done) => {
    setTimeout(() => {
      expect(eventDidMountCnt).toBe(1)
      expect(dotEventEl).toBeTruthy()
      expect(dotEventEl!.offsetWidth).toBeGreaterThan(0)
      expect(dotEventEl!.offsetHeight).toBeGreaterThan(0)
      done()
    }, 100)
  });
});


;['auto', 'background'].forEach((eventDisplay) => {
  describe(`during ${eventDisplay} custom event rendering`, async () => {
    let eventDidMountCalled: boolean | undefined;
    let component: MonthComponent3;
    let fixture: ComponentFixture<MonthComponent3>;

    @Component({
      template: `
        <full-calendar #calendar [options]="calendarOptions">
          <ng-template #eventContent let-arg>
            <i>{{ arg.event.title }}</i>
          </ng-template>
        </full-calendar>
      `
    })
    class MonthComponent3 {
      calendarOptions: CalendarOptions = {
        plugins: [dayGridPlugin],
        initialDate: '2023-03-20',
        events: [
          {
            start: '2023-03-20',
            display: eventDisplay,
          }
        ],
        initialView: 'dayGridMonth',
        eventDidMount(eventInfo) {
          expect(eventInfo.el).toBeTruthy()
          eventDidMountCalled = true
        },
      };
    }

    beforeEach(() => {
      eventDidMountCalled = false

      TestBed.configureTestingModule({
        imports: [FullCalendarModule],
        declarations: [MonthComponent3]
      }).compileComponents();

      fixture = TestBed.createComponent(MonthComponent3);
      component = fixture.componentInstance;
      fixture.detectChanges(); // necessary for initializing change detection system
    });

    it('receives el', (done) => {
      setTimeout(() => {
        expect(eventDidMountCalled).toBe(true)
        done()
      }, 100)
    })
  })
})


// FullCalendar data utils

function buildEvent() {
  return  {
    title: 'event',
    start: new Date(),
    end: new Date(Date.now() + 1) // guarantee only within single day
   };
}


// DOM utils

function isHeaderToolbarRendered(fixture: ComponentFixture<any>) {
  return Boolean(getHeaderToolbarEl(fixture));
}

function getHeaderToolbarEl(fixture: ComponentFixture<any>) {
  return fixture.nativeElement.querySelector('.fc-header-toolbar');
}

function isWeekendsRendered(fixture: ComponentFixture<any>) {
  return Boolean(fixture.nativeElement.querySelector('.fc-day-sat'));
}

function getFirstEventEl(fixture: ComponentFixture<any>) {
  return fixture.nativeElement.querySelector('.fc-event');
}

function getFirstEventTitle(fixture: ComponentFixture<any>) {
  return fixture.nativeElement.querySelector('.fc-event-title').innerText;
}
</file>

<file path="src/app/components/fullcalendarlib/full-calendar.component.ts">
import {
    Component,
    ContentChild,
    TemplateRef,
    ElementRef,
    Input,
    AfterViewInit,
    DoCheck,
    AfterContentChecked,
    OnDestroy,
    ViewEncapsulation,
    ChangeDetectorRef,
  } from '@angular/core';
  import { Calendar, CalendarOptions } from '@fullcalendar/core';
  import { CustomRendering, CustomRenderingStore } from '@fullcalendar/core/internal';
  import { OPTION_INPUT_NAMES, OPTION_IS_DEEP } from './options';
  import { CalendarOption, CalendarTemplateRef } from './private-types';
  import { deepCopy, mapHash } from './utils/obj';
  import { deepEqual } from './utils/fast-deep-equal';
  
  @Component({
    selector: 'full-calendar',
    templateUrl: './full-calendar.component.html',
    encapsulation: ViewEncapsulation.None // the styles are root-level, not scoped within the component
  })
  export class FullCalendarComponent implements AfterViewInit, DoCheck, AfterContentChecked, OnDestroy {
    @Input() options?: CalendarOptions;
    @Input() deepChangeDetection?: boolean;
  
    /*
    Options as individual Inputs
    NOTE: keep in sync with OPTION_INPUT_NAMES
    */
    @Input() events?: CalendarOption<'events'> | null | undefined;
    @Input() eventSources?: CalendarOption<'eventSources'> | null | undefined;
    @Input() resources?: CalendarOption<'resources'> | null | undefined;
  
    /*
    Templates
    */
    @ContentChild('dayHeaderContent', { static: true }) dayHeaderContent?: CalendarTemplateRef<'dayHeaderContent'>;
    @ContentChild('dayCellContent', { static: true }) dayCellContent?: CalendarTemplateRef<'dayCellContent'>;
    @ContentChild('weekNumberContent', { static: true }) weekNumberContent?: CalendarTemplateRef<'weekNumberContent'>;
    @ContentChild('nowIndicatorContent', { static: true }) nowIndicatorContent?: CalendarTemplateRef<'nowIndicatorContent'>;
    @ContentChild('eventContent', { static: true }) eventContent?: CalendarTemplateRef<'eventContent'>;
    @ContentChild('slotLaneContent', { static: true }) slotLaneContent?: CalendarTemplateRef<'slotLaneContent'>;
    @ContentChild('slotLabelContent', { static: true }) slotLabelContent?: CalendarTemplateRef<'slotLabelContent'>;
    @ContentChild('allDayContent', { static: true }) allDayContent?: CalendarTemplateRef<'allDayContent'>;
    @ContentChild('moreLinkContent', { static: true }) moreLinkContent?: CalendarTemplateRef<'moreLinkContent'>;
    @ContentChild('noEventsContent', { static: true }) noEventsContent?: CalendarTemplateRef<'noEventsContent'>;
    @ContentChild('resourceAreaHeaderContent', { static: true }) resourceAreaHeaderContent?: CalendarTemplateRef<'resourceAreaHeaderContent'>;
    @ContentChild('resourceGroupLabelContent', { static: true }) resourceGroupLabelContent?: CalendarTemplateRef<'resourceGroupLabelContent'>;
    @ContentChild('resourceLabelContent', { static: true }) resourceLabelContent?: CalendarTemplateRef<'resourceLabelContent'>;
    @ContentChild('resourceLaneContent', { static: true }) resourceLaneContent?: CalendarTemplateRef<'resourceLaneContent'>;
    @ContentChild('resourceGroupLaneContent', { static: true }) resourceGroupLaneContent?: CalendarTemplateRef<'resourceGroupLaneContent'>;
  
    private calendar: Calendar | null = null;
    private optionSnapshot: Record<string, any> = {}; // for diffing
    private handleCustomRendering: (customRendering: CustomRendering<any>) => void
    private customRenderingMap = new Map<string, CustomRendering<any>>()
    private customRenderingArray?: CustomRendering<any>[]
    public templateMap: { [templateName: string]: TemplateRef<any> } = {}
  
    constructor(
      private element: ElementRef,
      changeDetector: ChangeDetectorRef
    ) {
      const customRenderingStore = new CustomRenderingStore();
  
      customRenderingStore.subscribe((customRenderingMap) => {
        this.customRenderingMap = customRenderingMap;
        this.customRenderingArray = undefined; // clear cache
        changeDetector.detectChanges();
      });
  
      this.handleCustomRendering = customRenderingStore.handle.bind(customRenderingStore);
      this.templateMap = this as any; // alias to this
    }
  
    ngAfterViewInit() {
      const { deepChangeDetection } = this;
      const options = {
        ...this.options,
        ...this.buildInputOptions(),
      };
  
      // initialize snapshot
      this.optionSnapshot = mapHash(options, (optionVal: any, optionName: string) => (
        (deepChangeDetection && OPTION_IS_DEEP[optionName])
          ? deepCopy(optionVal)
          : optionVal
      ));
  
      const calendarEl = this.element.nativeElement
      const calendar = this.calendar = new Calendar(calendarEl, {
        ...options,
        ...this.buildExtraOptions(),
      });
  
      // Ionic dimensions hack
      // https://github.com/fullcalendar/fullcalendar/issues/4976
      const ionContent = calendarEl.closest('ion-content')
      if (ionContent && ionContent.componentOnReady) {
        ionContent.componentOnReady().then(() => {
          window.requestAnimationFrame(() => {
            calendar.render()
          })
        })
      } else {
        calendar.render()
      }
    }
  
    /*
    allows us to manually detect complex input changes, internal mutations to certain options.
    called before ngOnChanges. called much more often than ngOnChanges.
    */
    ngDoCheck() {
      if (this.calendar) { // not the initial render
        const { deepChangeDetection, optionSnapshot } = this;
        const newOptions = {
          ...this.options,
          ...this.buildInputOptions(),
        };
        const newProcessedOptions: Record<string, any> = {};
        const changedOptionNames: string[] = []
  
        // detect adds and updates (and update snapshot)
        for (const optionName in newOptions) {
          if (newOptions.hasOwnProperty(optionName)) {
            let optionVal = newOptions[optionName as keyof CalendarOptions];
  
            if (deepChangeDetection && OPTION_IS_DEEP[optionName]) {
              if (!deepEqual(optionSnapshot[optionName], optionVal)) {
                optionSnapshot[optionName] = deepCopy(optionVal);
                changedOptionNames.push(optionName);
              }
            } else {
              if (optionSnapshot[optionName] !== optionVal) {
                optionSnapshot[optionName] = optionVal;
                changedOptionNames.push(optionName);
              }
            }
  
            newProcessedOptions[optionName] = optionVal;
          }
        }
  
        const oldOptionNames = Object.keys(optionSnapshot);
  
        // detect removals (and update snapshot)
        for (const optionName of oldOptionNames) {
          if (!(optionName in newOptions)) { // doesn't exist in new options?
            delete optionSnapshot[optionName];
            changedOptionNames.push(optionName);
          }
        }
  
        if (changedOptionNames.length) {
          this.calendar.pauseRendering();
          this.calendar.resetOptions({
            ...newProcessedOptions,
            ...this.buildExtraOptions(),
          }, changedOptionNames);
        }
      }
    }
  
    ngAfterContentChecked() {
      if (this.calendar) { // too defensive?
        this.calendar.resumeRendering();
      }
    }
  
    ngOnDestroy() {
      if (this.calendar) { // too defensive?
        this.calendar.destroy();
        this.calendar = null;
      }
    }
  
    get customRenderings(): CustomRendering<any>[] {
      return this.customRenderingArray ||
        (this.customRenderingArray = [...this.customRenderingMap.values()]);
    }
  
    public getApi(): Calendar {
      return this.calendar!;
    }
  
    private buildInputOptions(): CalendarOptions {
      const options: CalendarOptions = {}
  
      for (const inputName of OPTION_INPUT_NAMES) {
        const inputValue = (this as any)[inputName];
  
        if (inputValue != null) { // exclude both null and undefined
          (options as any)[inputName] = inputValue;
        }
      }
  
      return options;
    }
  
    private buildExtraOptions(): CalendarOptions {
      return {
        handleCustomRendering: this.handleCustomRendering,
        customRenderingMetaMap: this.templateMap,
        customRenderingReplaces: true,
      };
    }
  
    // for `trackBy` in loop
    trackCustomRendering(index: number, customRendering: CustomRendering<any>): any {
      return customRendering.id
    }
  }
</file>

<file path="src/app/components/fullcalendarlib/full-calendar.module.ts">
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common'
import { FullCalendarComponent } from './full-calendar.component';
import { OffscreenFragmentComponent } from './utils/offscreen-fragment.component'
import { TransportContainerComponent } from './utils/transport-container.component'

@NgModule({
  declarations: [
    FullCalendarComponent,
    OffscreenFragmentComponent,
    TransportContainerComponent
  ],
  imports: [
    CommonModule
  ],
  exports: [
    FullCalendarComponent
  ]
})
export class CalendarModule { }
</file>

<file path="src/app/components/fullcalendarlib/options.ts">
export const OPTION_IS_DEEP: { [optionName: string]: boolean } = {
    headerToolbar: true,
    footerToolbar: true,
    events: true,
    eventSources: true,
    resources: true
  };
  
  /*
  NOTE: keep synced with component
  */
  export const OPTION_INPUT_NAMES: string[] = [
    'events',
    'eventSources',
    'resources',
  ];
</file>

<file path="src/app/components/fullcalendarlib/private-types.ts">
import { TemplateRef } from '@angular/core';
import { CalendarOptions } from '@fullcalendar/core';

export type CalendarOption<OptionName> = OptionName extends keyof CalendarOptions
  ? CalendarOptions[OptionName]
  : never

export type CalendarTemplateRef<OptionName> = TemplateRef<{
  $implicit: CalendarArgLookup<OptionName>
}>

type CalendarArgLookup<OptionName> = OptionName extends keyof CalendarOptions
  ? FirstParam<CalendarOptions[OptionName]>
  : never

type FirstParam<Func> = Func extends ((...args: any) => any)
  ? Parameters<Func>[0]
  : never
</file>

<file path="src/app/components/fullcalendarlib/public-apis.ts">
/*
 * Public API Surface of lib
 */

export * from './full-calendar.component';
export * from './full-calendar.module';
</file>

<file path="src/app/components/fullcalendarlib/utils/fast-deep-equal.ts">
/*
Forked from https://github.com/epoberezkin/fast-deep-equal (also has MIT license)
Needed ESM support or else Angular complains about treeshaking
(https://github.com/fullcalendar/fullcalendar-angular/issues/421)
*/
export function deepEqual(a: any, b: any): boolean {
    if (a === b) return true;
  
    if (a && b && typeof a == 'object' && typeof b == 'object') {
      if (a.constructor !== b.constructor) return false;
  
      var length, i, keys;
      if (Array.isArray(a)) {
        length = a.length;
        if (length != b.length) return false;
        for (i = length; i-- !== 0;)
          if (!deepEqual(a[i], b[i])) return false;
        return true;
      }
  
      if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
      if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
      if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
  
      keys = Object.keys(a);
      length = keys.length;
      if (length !== Object.keys(b).length) return false;
  
      for (i = length; i-- !== 0;)
        if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
  
      for (i = length; i-- !== 0;) {
        var key = keys[i];
  
        if (!deepEqual(a[key], b[key])) return false;
      }
  
      return true;
    }
  
    // true if both NaN, false otherwise
    return a!==a && b!==b;
  }
</file>

<file path="src/app/components/fullcalendarlib/utils/obj.ts">
const hasOwnProperty = Object.prototype.hasOwnProperty;

/*
Really simple clone utility. Only copies plain arrays, objects, and Dates. Transfers everything else as-is.
Wanted to use a third-party lib, but none did exactly this.
*/
export function deepCopy(input: any): any {

  if (Array.isArray(input)) {
    return input.map(deepCopy);

  } else if (input instanceof Date) {
    return new Date(input.valueOf());

  } else if (typeof input === 'object' && input) { // non-null object
    return mapHash(input, deepCopy);

  } else { // everything else (null, function, etc)
    return input;
  }
}


export function mapHash(input: any, func: any): any {
  const output: { [key: string]: any } = {};

  for (const key in input) {
    if (hasOwnProperty.call(input, key)) {
      output[key] = func(input[key], key);
    }
  }

  return output;
}
</file>

<file path="src/app/components/fullcalendarlib/utils/offscreen-fragment.component.ts">
import {
    Component,
    ViewEncapsulation,
    AfterViewInit,
    OnDestroy,
    ElementRef
  } from '@angular/core';
  
  const dummyContainer = typeof document !== 'undefined' ? document.createDocumentFragment() : null;
  
  @Component({
    selector: 'offscreen-fragment',
    template: '<ng-content></ng-content>',
    encapsulation: ViewEncapsulation.None
  })
  export class OffscreenFragmentComponent implements AfterViewInit, OnDestroy {
    constructor(private element: ElementRef) {
    }
  
    ngAfterViewInit() {
      if (dummyContainer) {
        dummyContainer.appendChild(this.element.nativeElement)
      }
    }
  
    // invoked BEFORE component removed from DOM
    ngOnDestroy() {
      if (dummyContainer) {
        dummyContainer.removeChild(this.element.nativeElement)
      }
    }
  }
</file>

<file path="src/app/components/fullcalendarlib/utils/transport-container.component.html">
<ng-template [ngIf]="elTag == 'div'">
  <div #rootEl [ngClass]="elClasses || ''" [ngStyle]="elStyle || null">
    <ng-container
      [ngTemplateOutlet]="template"
      [ngTemplateOutletContext]="{ $implicit: renderProps }"
    ></ng-container>
  </div>
</ng-template>
<ng-template [ngIf]="elTag == 'span'">
  <span #rootEl [ngClass]="elClasses || ''" [ngStyle]="elStyle || null">
    <ng-container
      [ngTemplateOutlet]="template"
      [ngTemplateOutletContext]="{ $implicit: renderProps }"
    ></ng-container>
  </span>
</ng-template>
<ng-template [ngIf]="elTag == 'a'">
  <a #rootEl [ngClass]="elClasses || ''" [ngStyle]="elStyle || null">
    <ng-container
      [ngTemplateOutlet]="template"
      [ngTemplateOutletContext]="{ $implicit: renderProps }"
    ></ng-container>
  </a>
</ng-template>
<ng-template [ngIf]="elTag == 'tr'">
  <tr #rootEl [ngClass]="elClasses || ''" [ngStyle]="elStyle || null">
    <ng-container
      [ngTemplateOutlet]="template"
      [ngTemplateOutletContext]="{ $implicit: renderProps }"
    ></ng-container>
  </tr>
</ng-template>
<ng-template [ngIf]="elTag == 'th'">
  <th #rootEl [ngClass]="elClasses || ''" [ngStyle]="elStyle || null">
    <ng-container
      [ngTemplateOutlet]="template"
      [ngTemplateOutletContext]="{ $implicit: renderProps }"
    ></ng-container>
  </th>
</ng-template>
<ng-template [ngIf]="elTag == 'td'">
  <td #rootEl [ngClass]="elClasses || ''" [ngStyle]="elStyle || null">
    <ng-container
      [ngTemplateOutlet]="template"
      [ngTemplateOutletContext]="{ $implicit: renderProps }"
    ></ng-container>
  </td>
</ng-template>
</file>

<file path="src/app/components/fullcalendarlib/utils/transport-container.component.ts">
import {
    Component,
    Input,
    ViewEncapsulation,
    ViewChild,
    TemplateRef,
    ElementRef,
    OnChanges,
    AfterViewInit,
    OnDestroy,
    SimpleChanges
  } from '@angular/core';
  
  const dummyContainer = typeof document !== 'undefined' ? document.createDocumentFragment() : null;
  
  @Component({
    selector: 'transport-container',
    templateUrl: './transport-container.component.html',
    encapsulation: ViewEncapsulation.None
  })
  export class TransportContainerComponent implements OnChanges, AfterViewInit, OnDestroy {
    @Input() inPlaceOf!: HTMLElement; // required
    @Input() reportEl!: (el: HTMLElement | null) => void; // required
    @Input() elTag!: string; // required
    @Input() elClasses?: string[];
    @Input() elStyle?: Record<string, unknown>;
    @Input() elAttrs?: Record<string, unknown>;
    @Input() template!: TemplateRef<any>; // required
    @Input() renderProps?: any;
  
    @ViewChild('rootEl') rootElRef?: ElementRef;
  
    ngAfterViewInit() {
      const rootEl: Element = this.rootElRef?.nativeElement; // assumed defined
  
      replaceEl(rootEl, this.inPlaceOf);
      applyElAttrs(rootEl, undefined, this.elAttrs);
  
      // insurance for if Preact recreates and reroots inPlaceOf element
      this.inPlaceOf.style.display = 'none';
  
      this.reportEl(rootEl as HTMLElement);
    }
  
    ngOnChanges(changes: SimpleChanges) {
      const rootEl: Element | undefined = this.rootElRef?.nativeElement;
  
      // ngOnChanges is called before ngAfterViewInit (and before DOM initializes)
      // so make sure rootEl is defined before doing anything
      if (rootEl) {
        // If the ContentContainer's tagName changed, it will create a new DOM element in its
        // original place. Detect this and re-replace.
        if (this.inPlaceOf.parentNode !== dummyContainer) {
          replaceEl(rootEl, this.inPlaceOf);
          applyElAttrs(rootEl, undefined, this.elAttrs);
          this.reportEl(rootEl as HTMLElement);
        } else {
          const elAttrsChange = changes['elAttrs'];
  
          if (elAttrsChange) {
            applyElAttrs(rootEl, elAttrsChange.previousValue, elAttrsChange.currentValue);
          }
        }
      }
    }
  
    // invoked BEFORE component removed from DOM
    ngOnDestroy() {
      if (
        // protect against Preact recreating and rerooting inPlaceOf element
        this.inPlaceOf.parentNode === dummyContainer &&
        dummyContainer
      ) {
        dummyContainer.removeChild(this.inPlaceOf);
      }
  
      this.reportEl(null);
    }
  }
  
  function replaceEl(subject: Element, inPlaceOf: Element): void {
    inPlaceOf.parentNode?.insertBefore(subject, inPlaceOf.nextSibling);
  
    if (dummyContainer) {
      dummyContainer.appendChild(inPlaceOf);
    }
  }
  
  function applyElAttrs(
    el: Element,
    previousAttrs: Record<string, any> = {},
    currentAttrs: Record<string, any> = {}
  ): void {
    // these are called "attributes" but they manipulate DOM node *properties*
  
    for (const attrName in previousAttrs) {
      if (!(attrName in currentAttrs)) {
        (el as any)[attrName] = null;
      }
    }
  
    for (const attrName in currentAttrs) {
      (el as any)[attrName] = currentAttrs[attrName];
    }
  }
</file>

<file path="src/app/components/inicio/inicio.component.css">
.container{
    min-height: 100%;
      min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
}

.padre{
    margin:0;
    padding:0;
}
.login-box {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 400px;
    padding: 40px;
    transform: translate(-50%, -50%);
    background: rgba(247, 239, 239, 0.5);
    box-sizing: border-box;
    box-shadow: 0 15px 25px rgba(0,0,0,.6);
    border-radius: 10px;
  }
  .login-box h2 {
    margin: 0 0 30px;
    padding: 0;
    color: #201b1b;
    text-align: center;
  }
  .login-box .user-box {
    position: relative;
  }
  .login-box .user-box input {
    width: 100%;
    padding: 10px 0;
    font-size: 16px;
    color: #111111;
    margin-bottom: 30px;
    border: none;
    border-bottom: 1px solid #1d1b1b;
    outline: none;
    background: transparent;
  }
  .login-box .user-box label {
    position: absolute;
    top:0;
    left: 0;
    padding: 10px 0;
    font-size: 16px;
    color: #fff;
    pointer-events: none;
    transition: .5s;
  }
  .login-box .user-box span{
      padding: 10px 0;
  }
  
  .login-box .user-box input:focus ~ label,
  .login-box .user-box input:valid ~ label {
    top: -20px;
    left: 0;
    color: #3f403f;
    font-size: 12px;
    margin-bottom: 5px;
}
  
  
  .login-box form a {
    position: relative;
    display: inline-block;
    padding: 10px 20px;
    color: #CD1818;
    font-size: 16px;
    text-decoration: none;
    overflow: hidden;
    transition: .5s;
    margin-top: 70px;
    margin-left: 60px;
    letter-spacing: 4px
  }
 
 button{
    position: relative;
    display: inline-block;
    padding: 10px 20px;
    color: #CD1818;
    font-size: 16px;
    overflow: hidden;
    transition: .5s;
    margin-top: 70px;
    margin-left: 60px;
    letter-spacing: 4px
 }

 button:hover{
   text-decoration: none;
    background: #03e9f4;
    color: #CD1818;
    border-radius: 5px;
    box-shadow: 0 0 5px #03e9f4,
                0 0 25px #03e9f4,
                0 0 50px #03e9f4,
                0 0 100px #03e9f4;
 }
 .btn{
    margin-left: 40px;
    margin-bottom: 5px;
 }
  
  .login-box a:hover {
    background: #03e9f4;
    color: #000;
    border-radius: 5px;
    box-shadow: 0 0 5px #03e9f4,
                0 0 25px #03e9f4,
                0 0 50px #03e9f4,
                0 0 100px #03e9f4;
  }
  
  .login-box a span {
    position: absolute;
    display: block;
  }
  
  .login-box a span:nth-child(1) {
    top: 0;
    left: -100%;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, transparent, #CD1818);
    animation: btn-anim1 1s linear infinite;
  }
  
  @keyframes btn-anim1 {
    0% {
      left: -100%;
    }
    50%,100% {
      left: 100%;
    }
  }
  
  .login-box a span:nth-child(2) {
    top: -100%;
    right: 0;
    width: 2px;
    height: 100%;
    background: linear-gradient(180deg, transparent, #CD1818);
    animation: btn-anim2 1s linear infinite;
    animation-delay: .25s
  }
  
  @keyframes btn-anim2 {
    0% {
      top: -100%;
    }
    50%,100% {
      top: 100%;
    }
  }
  
  .login-box a span:nth-child(3) {
    bottom: 0;
    right: -100%;
    width: 100%;
    height: 2px;
    background: linear-gradient(270deg, transparent, #CD1818);
    animation: btn-anim3 1s linear infinite;
    animation-delay: .5s
  }
  
  @keyframes btn-anim3 {
    0% {
      right: -100%;
    }
    50%,100% {
      right: 100%;
    }
  }
  
  .login-box a span:nth-child(4) {
    bottom: -100%;
    left: 0;
    width: 2px;
    height: 100%;
    background: linear-gradient(360deg, transparent, #CD1818);
    animation: btn-anim4 1s linear infinite;
    animation-delay: .75s
  }
  
  @keyframes btn-anim4 {
    0% {
      bottom: -100%;
    }
    50%,100% {
      bottom: 100%;
    }
  }
  .login-box button span {
    position: absolute;
    display: block;
  }
  .login-box  button span:nth-child(1) {
    top: 0;
    left: -100%;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, transparent, #CD1818);
    animation: btn-anim1 1s linear infinite;
  }
  
  @keyframes btn-anim1 {
    0% {
      left: -100%;
    }
    50%,100% {
      left: 100%;
    }
  }
  
  .login-box  button span:nth-child(2) {
    top: -100%;
    right: 0;
    width: 2px;
    height: 100%;
    background: linear-gradient(180deg, transparent, #CD1818);
    animation: btn-anim2 1s linear infinite;
    animation-delay: .25s
  }
  
  @keyframes btn-anim2 {
    0% {
      top: -100%;
    }
    50%,100% {
      top: 100%;
    }
  }
  
  .login-box  button span:nth-child(3) {
    bottom: 0;
    right: -100%;
    width: 100%;
    height: 2px;
    background: linear-gradient(270deg, transparent, #CD1818);
    animation: btn-anim3 1s linear infinite;
    animation-delay: .5s
  }
  
  @keyframes btn-anim3 {
    0% {
      right: -100%;
    }
    50%,100% {
      right: 100%;
    }
  }
  
  .login-box  button span:nth-child(4) {
    bottom: -100%;
    left: 0;
    width: 2px;
    height: 100%;
    background: linear-gradient(360deg, transparent, #CD1818);
    animation: btn-anim4 1s linear infinite;
    animation-delay: .75s
  }
  
  @keyframes btn-anim4 {
    0% {
      bottom: -100%;
    }
    50%,100% {
      bottom: 100%;
    }
  }
</file>

<file path="src/app/components/inicio/inicio.component.html">
<div class="container">
  <div class="padre">
    <div class="login-box">
      <h2>Login</h2>
      <form [formGroup]="loginForm" (ngSubmit)="onSubmit()"  >
        <div class="user-box">
          <input type="email" formControlName="email" placeholder="Email" />
          <label for="email">Email</label>
        </div>
        <div class="user-box">
          <input type="password" formControlName="password" placeholder="Password" />
          <label for="password">Password</label>
        </div>
        <button [disabled]="!loginForm.valid" type="submit">Login</button>
      </form>
    </div>
  </div>
</div>
</file>

<file path="src/app/components/inicio/inicio.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { InicioComponent } from './inicio.component';

describe('InicioComponent', () => {
  let component: InicioComponent;
  let fixture: ComponentFixture<InicioComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ InicioComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(InicioComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/inicio/inicio.component.ts">
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';
import { LoginServiceService } from 'src/app/core/services/login-service.service';
import { PeopleModel } from '../../core/models/People';
import { LoginModel } from '../../core/models/Login';

@Component({
  selector: 'app-inicio',
  templateUrl: './inicio.component.html',
  styleUrls: ['./inicio.component.css']
})

export class InicioComponent implements OnInit {
login :LoginModel = new LoginModel();

public loginForm!: FormGroup;
public formgroupm!: any;


constructor(
  private formBuilder: FormBuilder,
  private loginService:LoginServiceService,
            private router:Router){

              this.loginForm = this.formBuilder.group({
                email: ['',Validators.required],
                password: ['',Validators.required]
            });

            }
ngOnInit(): void {}


onSubmit() {
  // TODO: Use EventEmitter with form value
  console.warn(this.loginForm.value);

  if(this.loginForm.invalid){
    console.log('Formulario invalido');
    return;
  }else{
    this.loginService.login(this.loginForm.value).subscribe(data=>this.router.navigate(['/dashboard'],{state:{id:data}}));
  }

  }


}
</file>

<file path="src/app/components/kiosk/components/employee-list/employee-list.component.css">
@import '../../../../../styles.css';

.employee-list {
    background-color: #e0f6ea;
    padding: 16px;
  }
  
  .employee-list-item {
    border-bottom: 1px solid #e0f6ea;
    padding: 10px;
  }

  .employee-list-item:hover {
    background-color: #e0e0e0; /* Change the background color on hover */
}

.employee-list-item.mat-list-item-selected {
    background-color: #b0b0b0; /* Change the background color when selected */
}

.navbar-right {
  /* Add your desired styles here, such as: */
  float: right;
  margin-right: 20px;
}

.navbar-right li {
  /* Style the individual tabs */
  display: inline-block;
  margin-left: 10px;
}

.navbar-right a {
  /* Style the links within the tabs */
  color: #333;
  text-decoration: none;
  padding: 10px 15px;
  border-radius: 5px;
}

.navbar-right a:hover {
  background-color: #f0f0f0;
}
</file>

<file path="src/app/components/kiosk/components/employee-list/employee-list.component.html">
<input type="text" id="searchTerm" name="searchTerm" class="form-control" [(ngModel)]="searchTerm" placeholder="Search employees">

<ul class="nav nav-tabs" id="nav-tab" role="tablist" >
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="all-tab" data-bs-toggle="tab" data-bs-target="#all" type="button" role="tab" aria-controls="all" aria-selected="true">All</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="onshift-tab" data-bs-toggle="tab" data-bs-target="#onshift" type="button" role="tab" aria-controls="onshift" aria-selected="false">Onshift</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="schedule-tab" data-bs-toggle="tab" data-bs-target="#schedule" type="button" role="tab" aria-controls="schedule" aria-selected="false">Schedule</button>
  </li>
</ul>
<p></p>

<ul class="list-group">
    <li class="list-group-item list-group-item-action"
      *ngFor="let employee of filteredEmployees()"
      [class.mat-list-item-selected]="selectedEmployee === employee"
      (click)="onEmployeeSelected(employee)">
      <div class="d-flex w-100 justify-content-between">
      <h5 class="mb-1">{{ employee.fullName }}</h5>
      <small>
        <span *ngIf="employee.status == 'On'" class="position-absolute top-40 start-90 translate-middle p-2 bg-success border border-light rounded-circle">
          <span class="visually-hidden">{{employee.status}}</span>
        </span>
        <span *ngIf="employee.status == 'Late'" class="position-absolute top-40 start-90 translate-middle p-2 bg-danger border border-light rounded-circle">
          <span class="visually-hidden">{{employee.status}}</span>
        </span>  
        <span *ngIf="employee.status == 'Off'" class="position-absolute top-40 start-90 translate-middle p-2 bg-secondary border border-light rounded-circle">
          <span class="visually-hidden">{{employee.status}}</span>
        </span>          
        </small>
    </div>
</li>
</ul>
</file>

<file path="src/app/components/kiosk/components/employee-list/employee-list.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { EmployeeListComponent } from './employee-list.component';

describe('EmployeeListComponent', () => {
  let component: EmployeeListComponent;
  let fixture: ComponentFixture<EmployeeListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [EmployeeListComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(EmployeeListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/kiosk/components/employee-list/employee-list.component.ts">
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatList } from '@angular/material/list';
import { FormsModule } from '@angular/forms';
import { KioskService } from '../../core/services/kiosk.service';
import { Employee } from '../../core/models/employee.model';
import { KioskemployeeService } from '../../core/services/kioskemployee.service';
import { KiosklocationService } from '../../core/services/kiosklocation.service';
import { LocationModel } from 'src/app/core/models/Location';

@Component({
  selector: 'app-employee-list',
  standalone: true,
  imports: [MatList, CommonModule, FormsModule],
  templateUrl: './employee-list.component.html',
  styleUrls: ['./employee-list.component.css']
})
export class EmployeeListComponent {
  employees: Employee[] = [];
  
//    [{id:1, name: 'John Doe', email: 'jdoe@gmail.com', status: 'On'  },
//    {id:2 , name: 'Jane Smith', email: 'jsmith@gmail.com', status: 'Late'  },
//    {id:3,  name: 'Alice Johnson', email: 'ajohnson@gmail.com', status: 'Off'  }];

  searchTerm: string = '';
  selectedEmployee: Employee;
  _employees: Employee[] = [];
  _location: LocationModel[] = [];

  constructor(private kioskService: KioskService, 
    private employeeService: KioskemployeeService,
  private locationService: KiosklocationService) {
    //let employee: Employee = [];//{ firstName : "Select employee from list",personId:0,email:"",status:""};
    //this.kioskService.setSelectedEmployee(employee);
    this.loadEmployees();
  }

  loadEmployees() {
    console.log('loading employees');
    this.employeeService.getAll('all_employees').subscribe((data) => (this._employees = data));
    console.log(this._employees);

  }

  loadLocations() {
    this.locationService.getAll('all_locations').subscribe((data) => (this._location = data));
  }

  filteredEmployees(): Employee[] {

    console.log(this._employees);

    return this._employees.filter(employee =>
      employee.fullName.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
      employee.email.toLowerCase().includes(this.searchTerm.toLowerCase())
    );
  }

  onEmployeeSelected(employee: Employee) {
    this.selectedEmployee = employee;
    this.kioskService.setSelectedEmployee(employee);
    console.log(employee);
  }
}
</file>

<file path="src/app/components/kiosk/components/photo-schedule/photo-schedule.component.css">
@import '../../../../../styles.css';


.photo-schedule {
    padding: 20px;
  }
</file>

<file path="src/app/components/kiosk/components/photo-schedule/photo-schedule.component.html">
<div class="d-flex justify-content-center">
<h2>{{selectedEmployee.fullName}}</h2>
</div>

<webcam *ngIf="!webcamImage" [trigger]="triggerObservable" (imageCapture)="handleImage($event)"></webcam>

<div *ngIf="webcamImage && selectedEmployee ">
  <img [src]="flippedImage" alt="Captured photo">
  <h3>Shift updated thanks!</h3>
  <button class="btn btn-secondary" (click)="clearEmployee()">Done</button>
</div>


<div *ngIf="countdown$  | async as count">
<div *ngIf="count > 0" style="background-color: rgb(179, 207, 239);width: 100%;height: 15%;">
  <div class="d-flex justify-content-center" style="padding-top: 5%;">
    <h4>Capturing photo in {{ count }} seconds...</h4>
</div>
</div>
</div>

<div *ngIf="!scheduling" class="photo-schedule">
    <div *ngIf="selectedEmployee">
      <button *ngIf="!webcamImage"  mat-raised-button color="primary" class="btn btn-success btn-sm" (click)="triggerImage('startSchedule')">Start Shift</button>      
      <button *ngIf="!webcamImage" mat-raised-button color="bg-danger" class="btn btn-danger btn-sm" (click)="triggerImage('endSchedule')">End Shift</button>
      <a class="btn"></a>
      <button *ngIf="!webcamImage" mat-raised-button color="bg-danger" class="btn btn-primary btn-sm" (click)="triggerImage('startBreak')">Start Break</button>
      <button *ngIf="!webcamImage" mat-raised-button color="bg-danger" class="btn btn-danger btn-sm" (click)="triggerImage('endBreak')">End Break</button>
      <a class="btn"></a>
      <button *ngIf="!webcamImage" mat-raised-button class="btn btn-secondary btn-sm" (click)="triggerImage('endBreak')">Cancel</button>
    </div>
  </div>
</file>

<file path="src/app/components/kiosk/components/photo-schedule/photo-schedule.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PhotoScheduleComponent } from './photo-schedule.component';

describe('PhotoScheduleComponent', () => {
  let component: PhotoScheduleComponent;
  let fixture: ComponentFixture<PhotoScheduleComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [PhotoScheduleComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(PhotoScheduleComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/kiosk/components/photo-schedule/photo-schedule.component.ts">
import { Component } from '@angular/core';
import { WebcamModule, WebcamImage, WebcamInitError } from 'ngx-webcam';
import { Subject, Observable, BehaviorSubject } from 'rxjs';
import { CommonModule } from '@angular/common';
import { KioskService } from '../../core/services/kiosk.service';
import { Employee } from '../../core/models/employee.model';
import { ScheduleEmployee } from '../../core/models/schedule.model';
import { TimerService } from '../../core/services/timer.service';

@Component({
  selector: 'app-photo-schedule',
  standalone: true,
  imports: [WebcamModule, CommonModule],
  templateUrl: './photo-schedule.component.html',
  styleUrl: './photo-schedule.component.css'
})
export class PhotoScheduleComponent {
  private trigger: Subject<void> = new Subject<void>();

  selectedEmployee: Employee;
  scheduleEmployee: ScheduleEmployee;
  scheduling: boolean = false;
  public webcamImage: WebcamImage = null;

  countdown$ = this.timerService.countdown;

  constructor(private kioskService: KioskService, private timerService: TimerService) {}

  ngOnInit() {
    this.kioskService.selectedEmployee$.subscribe(employee => {
      this.selectedEmployee = employee;
    });
  }

  public triggerImage(): void {
    this.scheduling = true;
    this.timerService.countdown = 3;
    this.timerService.startTimer();
    //this.countdown$ = this.timerService.countdown;
    setTimeout(()=>{
      this.triggerSnapshot();
    },3000);

    setTimeout(()=>{
      this.clearEmployee();
    },6000);
  }

  public clearEmployee(): void{
    this.webcamImage = null;
    this.scheduling = false;

    //let employee: Employee = {FullName : "Select employee from list",personId:0,email:"",status:""};
    //this.kioskService.setSelectedEmployee(employee);

  }

  private triggerSnapshot(): void {
    this.trigger.next();
  }

  public setSchedule(action: string): void {
    //let schedule = [{employee: this.selectedEmployee},{action: action}];\
    
    let time = new Date();

    this.scheduleEmployee = { employee :this.selectedEmployee,
      action: action, dateTime : time.toString(),
      dateTimeUTC: this.getNowUTC().toISOString(),
      location: {}
     }
    console.log(this.scheduleEmployee);
    this.kioskService.setscheduleEmployee(this.scheduleEmployee);
  }

  public handleImage(webcamImage: WebcamImage): void {
    this.flip(webcamImage.imageAsDataUrl);
    this.webcamImage = webcamImage;
  }

  flippedImage:any;

  public flip(src:any): void{
    const img = new Image();
    img.onload = ()=> {
      var c = document.createElement('canvas');
      c.width = img.width;
      c.height = img.height;
      var ctx = c.getContext('2d');
      ctx.scale(-1,1);
      ctx.drawImage(img,-img.width,0);
      img.onload = undefined; 
      const flippedImage = c.toDataURL();
      this.flippedImage=flippedImage;
    }
    img.src = src;
  }

  public get triggerObservable(): Observable<void> {
    return this.trigger.asObservable();
  }

  private getNowUTC() {
    const now = new Date();
    return new Date(now.getTime() + (now.getTimezoneOffset() * 60000));
  }

  private getUTC(Date_:Date) {
    const now = Date_; //new Date();
    return new Date(now.getTime() + (now.getTimezoneOffset() * 60000));
  }

  private getfromUTC(Date_:Date) {
    const now = Date_; //new Date();
    return new Date(now.getTime() - (now.getTimezoneOffset() * 60000));
  }

}
</file>

<file path="src/app/components/kiosk/components/todo-detail/todo-detail.component.html">
<!-- src/app/todo-detail/todo-detail.component.html -->
<div *ngIf="task">
    <h1>{{ task.title }}</h1>
    <p>{{ task.description }}</p>
    <p>Status: {{ task.lastAction }}</p>
    <button (click)="editTask()">Edit Task</button>
  </div>
</file>

<file path="src/app/components/kiosk/components/todo-detail/todo-detail.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TodoDetailComponent } from './todo-detail.component';

describe('TodoDetailComponent', () => {
  let component: TodoDetailComponent;
  let fixture: ComponentFixture<TodoDetailComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [TodoDetailComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(TodoDetailComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/kiosk/components/todo-detail/todo-detail.component.ts">
// src/app/todo-detail/todo-detail.component.ts
import { Component, inject, input, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { ToDoService } from '../../core/services/to-do.service';
import { Task } from '../../core/models/task.model';

@Component({
  selector: 'app-todo-detail',
  templateUrl: './todo-detail.component.html',
})
export class TodoDetailComponent implements OnInit {
  task: Task | null = null;
  taskId = input<string>();
  todoService = inject(ToDoService);

  ngOnInit() {
    if (this.taskId()) {
      this.loadTask(this.taskId());
    }
  }

  loadTask(id: string) {
    this.todoService.get(id).subscribe((task) => (this.task = task));
  }

  editTask() {
    // Navigate to edit task page
  }
}
</file>

<file path="src/app/components/kiosk/components/todo-list/todo-list.component.html">
<!-- src/app/todo-list/todo-list.component.html -->
<div>
    <h1>ToDo List</h1>
    <ul>
      <li *ngFor="let task of tasks" (click)="viewTask(task.id)">
        {{ task.title }} - {{ task.lastAction }}
      </li>
    </ul>
    <button (click)="addTask()">Add Task</button>
  </div>
</file>

<file path="src/app/components/kiosk/components/todo-list/todo-list.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TodoListComponent } from './todo-list.component';

describe('TodoListComponent', () => {
  let component: TodoListComponent;
  let fixture: ComponentFixture<TodoListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [TodoListComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(TodoListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/kiosk/components/todo-list/todo-list.component.ts">
// src/app/todo-list/todo-list.component.ts
import { Component, inject, OnInit } from '@angular/core';
import { ToDoService } from '../../core/services/to-do.service';
import { Task } from '../../core/models/task.model';

@Component({
  selector: 'app-todo-list',
  templateUrl: './todo-list.component.html',
})
export class TodoListComponent implements OnInit {
  tasks: Task[] = [];
  todoService = inject(ToDoService);

  ngOnInit() {
    this.loadTasks();
  }

  loadTasks() {
    this.todoService.getAll('all_task').subscribe((tasks) => (this.tasks = tasks));
  }

  viewTask(id: string) {
    // Navigate to detail page
  }

  addTask() {
    // Navigate to add task page
  }
}
</file>

<file path="src/app/components/kiosk/core/models/area.model.ts">
export interface Area
{
    id: number;
    name: string;
    location: Location;
}
</file>

<file path="src/app/components/kiosk/core/models/employee.model.ts">
export interface Employee {
  personId:number;
  firstName?:string;
  lastName?:string;
  managerId?:number;
  isManager: boolean;
  isSchedule: boolean;
  documentNumber?:string;
  createdDate?:Date;
  email?:string;
  phoneNumber?:number;
  mainAddress?:string;
  ManagerId?: number;
  companyId: string;
  isActive: boolean;
  status: string;
  fullName: string;
    // ... other properties
  }
</file>

<file path="src/app/components/kiosk/core/models/location.models.ts">
export interface LocationModel
{
    id: number;
    name: string;
}
</file>

<file path="src/app/components/kiosk/core/models/schedule.model.ts">
export interface ScheduleEmployee{
    employee: any;
    action: string;
    dateTime: string;
    dateTimeUTC: string;
    location: any;
}
</file>

<file path="src/app/components/kiosk/core/models/task.model.ts">
export interface Task {
    TaskShiftId: string;
    TaskShiftName: string;
    Comment: string;
    lastAction: 'in-progress' | 'done';
    userId: string;
  }
</file>

<file path="src/app/components/kiosk/core/services/core-api.service.spec.ts">
import { TestBed } from '@angular/core/testing';
import { CoreApiService } from './core-api.service';


describe('CoreApiService', () => {
  let service: CoreApiService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(CoreApiService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/components/kiosk/core/services/core-api.service.ts">
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { inject, Injectable } from '@angular/core';
import { map, Observable, switchMap, catchError, from, of, throwError } from 'rxjs';
import { environment } from 'src/environments/environment';
import { v4 as uuidv4 } from 'uuid';
import { DataService } from './data.service';
import { QueryOptions } from './query-options.service';
import { options } from '@fullcalendar/core/preact';

@Injectable({
  providedIn: 'root',
})
export abstract class CoreApiService<T> {
  http = inject(HttpClient);
  dataService = inject(DataService);

  url = environment.apiUrl;

  abstract dbPath: string;
  private readonly token: string;
  private httpOptions: any;

  constructor() {
    const user = JSON.parse(localStorage.getItem('user')!);
    this.token = user.stsTokenManager.accessToken;
    this.httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Authorization: `Bearer ${this.token}`,
      }),
    };
  }

  create(data: T & { [x: string]: any }): Observable<T> {
    const id = uuidv4();
    (data as any)['createdAt'] = new Date().toISOString();
    (data as any)['id'] = id;
    const endpoint = `${this.url}${this.dbPath}`;
    console.log('navigator',navigator.onLine);

    if (navigator.onLine) {
      return this.http.post<T>(endpoint, data).pipe(
        switchMap((response) =>
          this.dataService.postData<T>(this.dbPath, endpoint, response).pipe(map(() => response)),
        ),
        catchError((error) =>
          this.dataService.saveTransaction(this.dbPath, id, data, 'POST', endpoint).pipe(
            map(() => {
              throw error;
            }),
          ),
        ),
      );
    } else {
      return this.dataService.saveTransaction(this.dbPath, id, data, 'POST', endpoint).pipe(
        switchMap((data: T | null) => {
          if (data) {
            return new Observable<T>((subscriber) => {
              subscriber.next(data);
            });
          } else {
            return new Observable<T>((subscriber) => {
              subscriber.error('Error');
            });
          }
        }),
      );
    }
  }

  update(id: string, data: any): Observable<T> {
    (data as any)['editedAt'] = new Date().toISOString();
    const endpoint = `${this.url}${this.dbPath}/${id}`;

    if (navigator.onLine) {
      return this.http.put<T>(endpoint, data).pipe(
        switchMap((response) =>
          this.dataService.putData<T>(this.dbPath, endpoint, id, response).pipe(map(() => response)),
        ),
        catchError((error) =>
          this.dataService.saveTransaction(this.dbPath, id, data, 'PUT', endpoint).pipe(
            map(() => {
              throw error;
            }),
          ),
        ),
      );
    } else {
      return this.dataService.saveTransaction(this.dbPath, id, data, 'PUT', endpoint);
    }
  }

  delete(id: string): Observable<T> {
    const endpoint = `${this.url}$${this.dbPath}/${id}`;

    if (navigator.onLine) {
      return this.http.delete<T>(endpoint).pipe(
        switchMap((response) => this.dataService.deleteData<void>(this.dbPath, endpoint, id).pipe(map(() => response))),
        catchError((error) =>
          this.dataService.saveTransaction(this.dbPath, id, null, 'DELETE', endpoint).pipe(
            map(() => {
              throw error;
            }),
          ),
        ),
      );
    } else {
      return this.dataService.saveTransaction(this.dbPath, id, null, 'DELETE', endpoint).pipe(
        switchMap((data: T | null) => {
          if (data) {
            return new Observable<T>((subscriber) => {
              subscriber.next(data);
            });
          } else {
            return new Observable<T>((subscriber) => {
              subscriber.error('Error');
            });
          }
        }),
      );
    }
  }

  get(id: string): Observable<T | null> {
    const companyId = localStorage.getItem('CompanyId');
    const endpoint = `${this.url}${companyId}/${this.dbPath}/${id}`;
    const key = `${this.dbPath}_${id}`;

    if (navigator.onLine) {
      return this.http.get<T>(endpoint,{
        headers:{
          Authorization: `Bearer ${this.token}`,
        }
      }).pipe(
        switchMap((response) => this.dataService.setLocalData(this.dbPath, key, response).pipe(map(() => response))),
        catchError((error) =>
          from(this.dataService.getLocalData<T>(this.dbPath, key)).pipe(
            map((localData) => {
              throw error;
            }),
          ),
        ),
      );
    } else {
      return from(this.dataService.getLocalData<T>(this.dbPath, id));
    }
  }

  getAll(queryOptions: string): Observable<T[]> { 
    const companyId = localStorage.getItem('CompanyId');
    const endpoint = `${this.url}${companyId}/${this.dbPath}`;
    queryOptions = `queryOptions_${companyId}`;
    console.log('navigator',navigator.onLine);

    const key = this.generateKeyFromQueryOptions(queryOptions);
    if (navigator.onLine) {
      return this.http.get<any[]>(endpoint,
        {
          headers:{
            Authorization: `Bearer ${this.token}`,
          }
        }
      ).pipe(
        switchMap((response) => this.dataService.setLocalData(this.dbPath, key, response).pipe(map(() => response))),
        catchError((error) =>
          //console.log('error',error.toString());
          from(this.dataService.getLocalData<T[]>(this.dbPath, key)).pipe(
            switchMap((localData) => {
              if (localData) {
                return of(localData);
              } else {
                return throwError(() => error);
              }
            }),
          ),
        ),
      );
    } else {
      //return from(this.dataService.getLocalData<T>(this.dbPath, key));
      return from(this.dataService.getLocalData<T[]>(this.dbPath, key)).pipe(
        switchMap((data) => {
          if (data) {
            return of(data);
          } else {
            return throwError(() => new Error('Offline and no local data available'));
          }
        }),
      );      
    }
  }

  getFilterAll(queryOptions: QueryOptions): Observable<T[]> {
    return from(this.getUserId()).pipe(
      switchMap((userId) => {
        let params = new HttpParams();

        if (queryOptions.limit) {
          params = params.set('limit', queryOptions.limit.toString());
        }
        if (queryOptions.orderBy) {
          params = params.set('orderBy', queryOptions.orderBy);
        }
        if (queryOptions.startAt) {
          params = params.set('startAt', queryOptions.startAt);
        }
        if (queryOptions.startAfter) {
          params = params.set('startAfter', queryOptions.startAfter);
        }
        if (queryOptions.endAt) {
          params = params.set('endAt', queryOptions.endAt);
        }
        if (queryOptions.endBefore) {
          params = params.set('endBefore', queryOptions.endBefore);
        }
        if (queryOptions.where) {
          params = params.set('where.field', queryOptions.where.field);
          params = params.set('where.operator', queryOptions.where.operator);
          params = params.set('where.value', String(queryOptions.where.value));
        } else {
          params = params.set('where.field', 'userId');
          params = params.set('where.operator', '==');
          params = params.set('where.value', userId ?? '');
        }

        const key = this.generateKeyFromQueryOptions(queryOptions);
        //const endpoint = this.generateEndpointFromQueryOptions(queryOptions);
        const companyId = localStorage.getItem('CompanyId');
        const endpoint= `${this.url}${companyId}/${this.dbPath}`;

        if (navigator.onLine) {
          return this.http.get<any[]>(endpoint, { params }).pipe(
            switchMap((response) =>
              this.dataService.setLocalData(this.dbPath, key, response).pipe(map(() => response)),
            ),
            catchError((error) =>
              from(this.dataService.getLocalData<T[]>(this.dbPath, key)).pipe(
                switchMap((localData) => {
                  if (localData) {
                    return of(localData);
                  } else {
                    return throwError(() => error);
                  }
                }),
              ),
            ),
          );
        } else {
          return from(this.dataService.getLocalData<T[]>(this.dbPath, key)).pipe(
            switchMap((data) => {
              if (data) {
                return of(data);
              } else {
                return throwError(() => new Error('Offline and no local data available'));
              }
            }),
          );
        }
      }),
    );
  }

  public async getUserId(): Promise<string | null> {
    const user = '1'; //this.auth.currentUser;
    return '1231241';//user?.uid ?? null;
  }

  private generateKeyFromQueryOptions(queryOptions: any): string {
    return JSON.stringify(queryOptions);
  }

  private generateEndpointFromQueryOptions(queryOptions: any): string {
    const params = new URLSearchParams(queryOptions).toString();
    return `${this.url}${this.dbPath}`;
  }
}
</file>

<file path="src/app/components/kiosk/core/services/data.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { DataService } from './data.service';

describe('DataService', () => {
  let service: DataService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(DataService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/components/kiosk/core/services/data.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, from, of, lastValueFrom } from 'rxjs';
import { switchMap, map, catchError } from 'rxjs/operators';
import Dexie from 'dexie';
import * as CryptoJS from 'crypto-js';
import { v4 as uuidv4 } from 'uuid';

@Injectable({
  providedIn: 'root',
})
export class DataService<T> {
  private secretKey = 'CHART-PAPER-SCISSORS-ROCK-PENCIL';
  private db!: Dexie;
  private INSTALLATION_KEY = 'installation_id';

  constructor(private http: HttpClient) {
    this.initializeDatabase();
    window.addEventListener('online', () => this.syncTransactions());
  }

  private initializeDatabase() {
    this.db = new Dexie('MyDatabase');
    this.db.version(1).stores({
      todos: 'key',
      app_meta: 'key',
      transactions: '++id, collection, key, data, timestamp, method, endpoint, payload',
      people: 'key',
      person: 'key',
      locations: 'key',
      areas: 'key',
      tasks: 'key'
    });

    this.checkInstallationId();
  }

  private async checkInstallationId() {
    const installationId = await this.db.table('app_meta').get(this.INSTALLATION_KEY);

    if (!installationId) {
      await this.setInstallationId();
    } else {
      // This means the app has been reinstalled or data was wiped
      await this.wipeAllData();
      await this.setInstallationId();
    }
  }

  private async setInstallationId() {
    const installationId = uuidv4();
    await this.db.table('app_meta').put({ key: this.INSTALLATION_KEY, value: installationId });
  }

  getData<T>(collection: string, key: string, endpoint: string, params?: any): Observable<T | null> {
    return from(this.getLocalData<T>(collection, key)).pipe(
      switchMap((localData) => {
        if (navigator.onLine) {
          return this.fetchFromApiAndStore<T>(collection, key, endpoint, params).pipe(
            catchError(() => of(localData)), // In case of error, return local data
          );
        } else {
          return of(localData);
        }
      }),
    );
  }

  fetchFromApiAndStore<T>(collection: string, key: string, endpoint: string, params?: any): Observable<T> {
    return this.http.get<T>(endpoint, { params }).pipe(
      switchMap((data) => this.setLocalData(collection, key, data).pipe(map(() => data))),
      switchMap((data) => this.saveTransaction(collection, key, data, 'GET', endpoint, params).pipe(map(() => data))), // Save snapshot of the transaction
    );
  }

  postData<T>(collection: string, endpoint: string, data: any): Observable<T> {
    if (navigator.onLine) {
      return this.http
        .post<T>(endpoint, data)
        .pipe(
          switchMap((response) =>
            this.saveTransaction(collection, null, response, 'POST', endpoint, data).pipe(map(() => response)),
          ),
        );
    } else {
      return this.saveTransaction(collection, null, data, 'POST', endpoint);
    }
  }

  putData<T>(collection: string, endpoint: string, key: string, data: any): Observable<T> {
    if (navigator.onLine) {
      return this.http
        .put<T>(endpoint, data)
        .pipe(
          switchMap((response) =>
            this.saveTransaction(collection, key, response, 'PUT', endpoint, data).pipe(map(() => response)),
          ),
        );
    } else {
      return this.saveTransaction(collection, key, data, 'PUT', endpoint);
    }
  }

  deleteData<T>(collection: string, endpoint: string, key: string): Observable<T | null> {
    if (navigator.onLine) {
      return this.http
        .delete<T>(endpoint)
        .pipe(
          switchMap((response) =>
            this.saveTransaction(collection, key, response, 'DELETE', endpoint).pipe(map(() => response)),
          ),
        );
    } else {
      return this.saveTransaction<T>(collection, key, null, 'DELETE', endpoint);
    }
  }

  setLocalData<T>(collection: string, key: string, data: T): Observable<T> {
    const encryptedData = CryptoJS.AES.encrypt(JSON.stringify(data), this.secretKey).toString();
    return from(this.db.table(collection).put({ key, value: encryptedData })).pipe(map(() => data));
  }

  getLocalData<T>(collection: string, key: string): Promise<T | null> {
    return this.db
      .table(collection)
      .get({ key })
      .then((record) => {
        if (record && record.value) {
          const bytes = CryptoJS.AES.decrypt(record.value, this.secretKey);
          const decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));
          return decryptedData as T;
        }
        return null;
      })
      .catch((error) => {
        console.log('Error getting data from storage', error);
        return null;
      });
  }

  clearData(collection: string, key: string): Observable<void> {
    return from(this.db.table(collection).delete(key));
  }

  clearAllData(collection: string): Observable<void> {
    return from(this.db.table(collection).clear());
  }

  wipeAllData(): Promise<void[]> {
    const collections = [
      'todos',
      'transactions',
      'people',
      'person',
      'locations',
      'areas',
      'tasks'
    ];
    return Promise.all(collections.map((collection) => this.db.table(collection).clear()));
  }

  saveTransaction<T>(
    collection: string,
    key: string | null,
    data: T | null,
    method: 'GET' | 'POST' | 'PUT' | 'DELETE',
    endpoint: string,
    payload?: any,
  ): Observable<T | null> {
    const transaction = {
      collection,
      key,
      data,
      method,
      endpoint,
      payload,
      timestamp: new Date().toISOString(),
    };
    return from(this.db.table('transactions').add(transaction)).pipe(map(() => data));
  }

  async syncTransactions(): Promise<void> {
    const transactions = await this.db.table('transactions').toArray();
    for (const transaction of transactions) {
      try {
        let response;
        if (transaction.method === 'POST') {
          response = await lastValueFrom(this.http.post(transaction.endpoint, transaction.payload));
        } else if (transaction.method === 'PUT') {
          response = await lastValueFrom(this.http.put(transaction.endpoint, transaction.payload));
        } else if (transaction.method === 'DELETE') {
          response = await lastValueFrom(this.http.delete(transaction.endpoint));
        }
        if (response) {
          await this.db.table('transactions').delete(transaction.id); // Remove transaction after successful sync
        }
      } catch (error) {
        console.log('Error syncing transaction', error);
        // If there's an error, keep the transaction for retry
      }
    }
  }

  async saveMultipleData(dataMap: { [key: string]: any[] }): Promise<void> {
    const savePromises: Promise<void>[] = [];

    for (const collection in dataMap) {
      const dataArray = dataMap[collection];
      for (const data of dataArray) {
        const id = data.id || uuidv4();
        savePromises.push(lastValueFrom(this.setLocalData(collection, id, data)).then(() => {}));
      }
    }

    await Promise.all(savePromises);
  }

  async getMultipleData(collectionKeys: string[]): Promise<{ [key: string]: any[] }> {
    const getPromises = collectionKeys.map((collection) =>
      this.db
        .table(collection)
        .toArray()
        .then((records) => ({
          collection,
          records: records.map((record) => {
            const bytes = CryptoJS.AES.decrypt(record.value, this.secretKey);
            return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));
          }),
        })),
    );

    const results = await Promise.all(getPromises);
    const dataMap: { [key: string]: any[] } = {};
    for (const result of results) {
      dataMap[result.collection] = result.records;
    }
    return dataMap;
  }
}
</file>

<file path="src/app/components/kiosk/core/services/kiosk.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { KioskService } from './kiosk.service';

describe('KioskService', () => {
  let service: KioskService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(KioskService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/components/kiosk/core/services/kiosk.service.ts">
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { Employee } from '../models/employee.model';
import { ScheduleEmployee } from '../models/schedule.model';

@Injectable({
  providedIn: 'root'
})
export class KioskService {
  private selectedEmployeeSource = new BehaviorSubject<Employee>(null);
  selectedEmployee$ = this.selectedEmployeeSource.asObservable();

  private scheduleEmployeeSource = new BehaviorSubject<ScheduleEmployee>(null);
  scheduleEmployee$ = this.scheduleEmployeeSource.asObservable();  

  setSelectedEmployee(employee: Employee) {
    this.selectedEmployeeSource.next(employee);
  }

  setscheduleEmployee(schedule: ScheduleEmployee)
  {
    this.scheduleEmployeeSource.next(schedule);
  }

  constructor() { }
}
</file>

<file path="src/app/components/kiosk/core/services/kioskemployee.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { KioskemployeeService } from './kioskemployee.service';

describe('KioskemployeeService', () => {
  let service: KioskemployeeService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(KioskemployeeService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/components/kiosk/core/services/kioskemployee.service.ts">
import { Injectable } from '@angular/core';
import { CoreApiService } from './core-api.service';
import { Employee } from '../models/employee.model';

@Injectable({
  providedIn: 'root'
})
export class KioskemployeeService extends CoreApiService<Employee> {
  dbPath = 'people';
}
</file>

<file path="src/app/components/kiosk/core/services/kiosklocation.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { KiosklocationService } from './kiosklocation.service';

describe('KiosklocationService', () => {
  let service: KiosklocationService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(KiosklocationService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/components/kiosk/core/services/kiosklocation.service.ts">
import { Injectable } from '@angular/core';
import { CoreApiService } from './core-api.service';
import { LocationModel } from 'src/app/core/models/Location';

@Injectable({
  providedIn: 'root'
})
export class KiosklocationService extends CoreApiService<LocationModel> {
  dbPath = 'location';
}
</file>

<file path="src/app/components/kiosk/core/services/query-options.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { QueryOptionsService } from './query-options.service';

describe('QueryOptionsService', () => {
  let service: QueryOptionsService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(QueryOptionsService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/components/kiosk/core/services/query-options.service.ts">
export interface WhereCondition {
  field: string;
  operator: '==' | '<' | '<=' | '>' | '>=' | 'array-contains' | 'in' | 'array-contains-any' | 'not-in';
  value: string | string[] | number | number[] | boolean;
}

export interface QueryOptions {
  limit?: number;
  orderBy?: string;
  startAt?: string;
  startAfter?: string;
  endAt?: string;
  endBefore?: string;
  where?: WhereCondition;
  whereIn?: { field: string; values: string[] };
  whereArrayContains?: { field: string; value: string };
  whereArrayContainsAny?: { field: string; values: string[] };
  whereFieldPath?: WhereCondition;
  whereFieldPathIn?: { field: string; values: string[] };
  whereFieldPathArrayContains?: { field: string; value: string };
  whereFieldPathArrayContainsAny?: { field: string; values: string[] };
  startAtFieldPath?: { field: string; value: string };
  startAfterFieldPath?: { field: string; value: string };
  endAtFieldPath?: { field: string; value: string };
  endBeforeFieldPath?: { field: string; value: string };
}
</file>

<file path="src/app/components/kiosk/core/services/timer.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { TimerService } from './timer.service';

describe('TimerService', () => {
  let service: TimerService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(TimerService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/components/kiosk/core/services/timer.service.ts">
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class TimerService {
  private   
 countdown$ = new BehaviorSubject<number>(0);

  get countdown(): Observable<number> {
    return this.countdown$.asObservable();
  }

  set countdown(value: number) {
    //this.countdown$ = new BehaviorSubject<number>(value);
    this.countdown$.next(value);
  }

   startTimer() {
    const interval = setInterval(() => {
      const currentCount = this.countdown$.value - 1;
      if (currentCount >= 0) {
        this.countdown$.next(currentCount);
      } else {
        clearInterval(interval);
        //this.countdown$.complete();
      }
    }, 1000);
  }

  customTimer(value: number){
    const newCount = value;
    //this.countdown$ = new BehaviorSubject<number>(newCount);
    this.countdown$.next(newCount);
    this.startTimer();
  }
}
</file>

<file path="src/app/components/kiosk/core/services/to-do.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { ToDoService } from './to-do.service';

describe('ToDoService', () => {
  let service: ToDoService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(ToDoService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/components/kiosk/core/services/to-do.service.ts">
import { Injectable } from '@angular/core';
import { CoreApiService } from './core-api.service';
import { Task } from '../models/task.model';

@Injectable({
  providedIn: 'root',
})
export class ToDoService extends CoreApiService<Task> {
  dbPath = 'taskshift';
}
</file>

<file path="src/app/components/kiosk/kiosk.component.css">
@import '../../../../node_modules/bootstrap/dist/css/bootstrap.min.css';
@import '../../../../node_modules/font-awesome/css/font-awesome.min.css';
@import '../../../styles.css';




body {
  margin: 0px;
  background: #f5f5f5;
}


.sidenav-container {
    display: flex;
    height: 100%;
  }
  mat-sidenav {
    width: 250px;
  }

  .sidenav-container {
    display: flex;
    height: 100vh; /* Full viewport height */
  }
  
  .sidenav {
    width: 250px; /* Fixed width for sidenav */
    flex-shrink: 0; /* Prevent shrinking */
  }
  
  .sidenav-content {
    flex-grow: 1; /* Allow content to grow and fill the remaining space */
    padding: 16px; /* Optional padding */
  }
</file>

<file path="src/app/components/kiosk/kiosk.component.html">
<mat-sidenav-container class="sidenav-container">
    <mat-sidenav mode="side" opened>
      <app-employee-list></app-employee-list>
    </mat-sidenav>
    <mat-sidenav-content>
      <app-photo-schedule></app-photo-schedule>
    </mat-sidenav-content>
  </mat-sidenav-container>
</file>

<file path="src/app/components/kiosk/kiosk.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { KioskComponent } from './kiosk.component';

describe('KioskComponent', () => {
  let component: KioskComponent;
  let fixture: ComponentFixture<KioskComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [KioskComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(KioskComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/kiosk/kiosk.component.ts">
import { Component } from '@angular/core';
import { PhotoScheduleComponent } from './components/photo-schedule/photo-schedule.component';
import { EmployeeListComponent } from './components/employee-list/employee-list.component';
import { MatSidenav, MatSidenavContainer, MatSidenavContent } from '@angular/material/sidenav';

@Component({
  selector: 'app-kiosk',
  standalone: true,
  imports: [MatSidenav, 
    MatSidenavContainer,
    MatSidenavContent, 
    PhotoScheduleComponent, 
    EmployeeListComponent],
  templateUrl: './kiosk.component.html',
  styleUrl: './kiosk.component.css'
})
export class KioskComponent {

}
</file>

<file path="src/app/components/sign-in/sign-in.component.html">
<div class="displayTable">
    <div class="displayTableCell">
      <div class="authBlock">
        <h3>Sign In</h3>
        <div class="formGroup">
          <input
            type="text"
            class="formControl"
            placeholder="Username"
            #userName
            required
          />
        </div>
        <div class="formGroup">
          <input
            type="password"
            class="formControl"
            placeholder="Password"
            #userPassword
            required
          />
        </div>
        <!-- Calling SignIn Api from AuthService -->
        <div class="formGroup">
          <input
            type="button"
            class="btn btnPrimary"
            value="Log in"
            (click)="authService.SignIn(userName.value, userPassword.value)"
          />
        </div>
        <div class="formGroup">
          <span class="or"><span class="orInner">Or</span></span>
        </div>
        <div class="forgotPassword">
          <span routerLink="/forgot-password">Forgot Password?</span>
        </div>
      </div>
      <div class="redirectToLogin">
        <span
          >Don't have an account?<span
            class="redirect"
            routerLink="/register-user"
          >
            Sign Up</span
          ></span
        >
      </div>
    </div>
  </div>
</file>

<file path="src/app/components/sign-in/sign-in.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SignInComponent } from './sign-in.component';

describe('SignInComponent', () => {
  let component: SignInComponent;
  let fixture: ComponentFixture<SignInComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ SignInComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(SignInComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/sign-in/sign-in.component.ts">
import { Component, OnInit } from '@angular/core';
import { AuthService } from "src/app/core/services/auth.service";

@Component({
  selector: 'app-sign-in',
  templateUrl: './sign-in.component.html',
  styleUrls: ['./sign-in.component.css']
})

//todo: login upgrade google
//https://medium.com/@gabriel.cournelle/firebase-authentication-in-angular-ab1b66d041dc

export class SignInComponent implements OnInit {
  constructor(
    public authService: AuthService
  ) { }
  ngOnInit() { }
}
</file>

<file path="src/app/components/sign-out/sign-out.component.html">
<p>sign-out works!</p>
</file>

<file path="src/app/components/sign-out/sign-out.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SignOutComponent } from './sign-out.component';

describe('SignOutComponent', () => {
  let component: SignOutComponent;
  let fixture: ComponentFixture<SignOutComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ SignOutComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(SignOutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/sign-out/sign-out.component.ts">
import { Component } from '@angular/core';

@Component({
  selector: 'app-sign-out',
  templateUrl: './sign-out.component.html',
  styleUrls: ['./sign-out.component.css']
})
export class SignOutComponent {

}
</file>

<file path="src/app/components/sign-up/sign-up.component.html">
<div class="displayTable">
    <div class="displayTableCell">
      <div class="authBlock">
        <h3>Sign Up</h3>
        <div class="formGroup">
          <input
            type="email"
            class="formControl"
            placeholder="Email Address"
            #userEmail
            required
          />
        </div>
        <div class="formGroup">
          <input
            type="password"
            class="formControl"
            placeholder="Password"
            #userPwd
            required
          />
        </div>
        <div class="formGroup">
          <input
            type="button"
            class="btn btnPrimary"
            value="Sign Up"
            (click)="authService.SignUp(userEmail.value, userPwd.value)"
          />
        </div>
        <div class="formGroup">
          <span class="or"><span class="orInner">Or</span></span>
        </div>
      <div class="redirectToLogin">
        <span
          >Already have an account?
          <span class="redirect" routerLink="/sign-in">Log In</span></span
        >
      </div>
    </div>
  </div>
</file>

<file path="src/app/components/sign-up/sign-up.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SignUpComponent } from './sign-up.component';

describe('SignUpComponent', () => {
  let component: SignUpComponent;
  let fixture: ComponentFixture<SignUpComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ SignUpComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(SignUpComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/sign-up/sign-up.component.ts">
import { Component, OnInit } from '@angular/core';
import { AuthService } from "src/app/core/services/auth.service";
@Component({
  selector: 'app-sign-up',
  templateUrl: './sign-up.component.html',
  styleUrls: ['./sign-up.component.css']
})
export class SignUpComponent implements OnInit {
  constructor(
    public authService: AuthService
  ) { }
  ngOnInit() { }
}
</file>

<file path="src/app/components/verify-email/verify-email.component.html">
<div class="displayTable">
    <div class="displayTableCell">
      <div class="authBlock">
        <h3>Thank You for Registering</h3>
        <div class="formGroup" *ngIf="authService.userData as user">
          <p class="text-center">We have sent a confirmation email to <strong>{{user.email}}</strong>.</p>
          <p class="text-center">Please check your email and click on the link to verfiy your email address.</p>
        </div>
        
        <!-- Calling SendVerificationMail() method using authService Api -->
        <div class="formGroup">
          <button type="button" class="btn btnPrimary" (click)="authService.SendVerificationMail()">
            <i class="fas fa-redo-alt"></i>
            Resend Verification Email
          </button>
        </div>
      </div>
      <div class="redirectToLogin">
        <span>Go back to?<span class="redirect" routerLink="/sign-in"> Sign in</span></span>
      </div>
    </div>
  </div>
</file>

<file path="src/app/components/verify-email/verify-email.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { VerifyEmailComponent } from './verify-email.component';

describe('VerifyEmailComponent', () => {
  let component: VerifyEmailComponent;
  let fixture: ComponentFixture<VerifyEmailComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ VerifyEmailComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(VerifyEmailComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/verify-email/verify-email.component.ts">
import { Component, OnInit } from '@angular/core';
import { AuthService } from "src/app/core/services/auth.service";
@Component({
  selector: 'app-verify-email',
  templateUrl: './verify-email.component.html',
  styleUrls: ['./verify-email.component.css']
})
export class VerifyEmailComponent implements OnInit {
  constructor(
    public authService: AuthService
  ) { }
  ngOnInit() {
  }
}
</file>

<file path="src/app/core/models/Activity.ts">
export class ActivityModel {
    activityId: number = 0;
    subject?: string;
    semodule?: string;
    activitytype?: string;
    date_start?: string;
    // due_date: string;
    time_start?: string;
    time_end?: string;
    sendnotification?: string;
    userid?: number;
    log_time?: string; 
}
</file>

<file path="src/app/core/models/Area.ts">
export class AreaModel{
    areaId:number = 0;
    areaName?:string;
    locationId: number = 0;
    companyId: string = '';
    isActive: boolean = true;
    isDeleted: boolean = false;
    created? : Date;
    updated? : Date;
    deleted? : Date;
}
</file>

<file path="src/app/core/models/Company.ts">
export class companyModel{
  companyId: string= '';
  companyName: string = '';
  address: string = '';
  externalCode: string = '';
  config: string = '';
  isActive: string = '';
  isDeleted: string = '';
  created?: Date;
  updated?: Date;
  deleted?: Date;
}
</file>

<file path="src/app/core/models/Country.ts">
export class Country{
  CountryId: number = 0;
  CountryCode: string = '';
  CountryName: string = '';
}
</file>

<file path="src/app/core/models/Ilocation.ts">
export interface ILocation{
    locationId:number;
    locationName?:string;
    createdDate?:Date;
    timeZoneId: number;
    geoLocation: string;
    latitude: string;
    longitude: string;
    locationAddress: string;
    cityCode: string;
    stateCode: string;
    zipcode: String;
    countryCode: string;
    companyId : string;
    locationConfig: string;
    notification: boolean;
    validateOnSite : boolean;
    validateRatio : boolean;
    ration :string;
    ratioMax :number;
    isActive: boolean;
    isDeleted: boolean;
    created?: Date;
    updated?: Date;
    deleted?: Date;
}
</file>

<file path="src/app/core/models/Location.ts">
import { ILocation } from "./Ilocation";

export class LocationModel implements ILocation{
    locationId:number=0;
    locationName?:string;
    createdDate?:Date;
    timeZoneId: number = 0;
    geoLocation: string = '';
    latitude: string = '';
    longitude: string = '';
    locationAddress: string = '';
    cityCode: string ='';
    stateCode: string ='';
    zipcode: String = '';
    countryCode: string = '';
    companyId : string = '';
    locationConfig: string = '';
    notification: boolean = true;
    validateOnSite : boolean = true;
    validateRatio : boolean = true;
    ration :string = '';
    ratioMax :number = 5;
    isActive: boolean = false;
    isDeleted: boolean = false;
    created?: Date;
    updated?: Date;
    deleted?: Date;
}
</file>

<file path="src/app/core/models/Login.ts">
export class LoginModel{
    password?:string;
    email?:string;
}
</file>

<file path="src/app/core/models/People.ts">
export class PeopleModel{
    personId:number = 0;
    firstName?:string;
    lastName?:string;
    managerId?:number =0;
    isManager: boolean = false;
    isSchedule: boolean = false;
    documentNumber?:string;
    createdDate?:Date;
    email?:string;
    phoneNumber?:number;
    mainAddress?:string;
    ManagerId?: number;
    companyId: string = '';
    isActive: boolean = false;
    isDeleted: boolean = false;
    created?: Date;
    updated?: Date;
    deleted?: Date;
}
</file>

<file path="src/app/core/models/Role.ts">
export class RoleModel{
    RoleId?:number;
    RoleName?:string;
}
</file>

<file path="src/app/core/models/Schedule.ts">
export class ScheduleModel
{
    scheduleId: number = 0;
    personId? : number;
    taskShiftId?: number;
    keyCode?: string;
    scheduledate: string = "";
    startTime: string = "";
    endTime: string = "";
    areaId? : number;
    locationId? : number;
    tagColor?: string;
    companyId: string = '';
    IsActive: boolean = true;
    IsDeleted: boolean = false;
    Created?: Date;
    Updated?: Date;
    Deleted?: Date;
}
</file>

<file path="src/app/core/models/ScheduleShift.ts">
export class ScheduleShiftModel
{
    scheduleShiftId: number = 0;
    subject?: string;
    description? : string;
    startTime!: Date;
    endTime? : Date;
    personId? : number;
    scheduleId? : number;
    areaId? : number;
    locationId? : number;
    isActive? : boolean
    isDeleted? : boolean;
    companyId?: string;
    geoLocationStart? : string;
    geoLocationEnd?: string;
    created? : Date;
    updated? : Date;
    deleted? : Date;
    CompanyId: string = '';
}
</file>

<file path="src/app/core/models/TaskShift.ts">
export class TaskShiftModel{
    taskShiftId:number=0;
    taskShiftName?:string;
    comment?:string;
    isSchedule: boolean = true;
    taskDate?: Date;
    startTime?: string;
    endTime?: string;
    createdDate?:string;
    companyId: string = '';
    locationId: number = 0;
    areaId: number = 0;
    personId: number = 0;
    isActive: boolean = true;
    isDeleted: boolean = false;
    createdBy: number = 0;
    created?: Date;
    updated?: Date;
    deleted?: Date;
}
</file>

<file path="src/app/core/models/Time_zone.ts">
export class Time_Zone{
  public Id: number = 0;
  public ZoneName: string = '';
  public CountryCode: string = '';
  public Abbreviation: string = '';
  public Time_Start: number = 0;
  public GmtOffset: number = 0;
  public DST: string = '';


}
</file>

<file path="src/app/core/models/User.ts">
export interface User {
    uid: string;
    email: string;
    displayName: string;
    photoURL: string;
    emailVerified: boolean;
 }
</file>

<file path="src/app/core/models/UserCompany.ts">
export class UserCompanyModel{
  userCompanyId : number;
  companyId : string;
  userProfileId : number;
}
</file>

<file path="src/app/core/models/UserRole.ts">
export class UserRoleModel{
    userRoleId?:number;
    userProfileId?:number;
    roleId?:number;
    personId?:number;
}
</file>

<file path="src/app/core/models/Weather.ts">
export interface WeatherModel {
    request: Request
    location: Location
    current: Current
  }
  
  export interface Request {
    type: string
    query: string
    language: string
    unit: string
  }
  
  export interface Location {
    name: string
    country: string
    region: string
    lat: string
    lon: string
    timezone_id: string
    localtime: string
    localtime_epoch: number
    utc_offset: string
  }
  
  export interface Current {
    observation_time: string
    temperature: number
    weather_code: number
    weather_icons: string[]
    weather_descriptions: string[]
    wind_speed: number
    wind_degree: number
    wind_dir: string
    pressure: number
    precip: number
    humidity: number
    cloudcover: number
    feelslike: number
    uv_index: number
    visibility: number
  }
</file>

<file path="src/app/core/services/activity.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { ActivityService } from './activity.service';

describe('ActivityService', () => {
  let service: ActivityService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(ActivityService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/activity.service.ts">
import { EventInput } from '@fullcalendar/core';

let eventGuid = 0;
const TODAY_STR = new Date().toISOString().replace(/T.*$/, ''); // YYYY-MM-DD of today

export const INITIAL_EVENTS: EventInput[] = [
  {
    id: createEventId(),
    title: 'All-day event',
    start: TODAY_STR +'T08:00:00',
    end: TODAY_STR+ 'T14:00:00',
    allDay: false,
    backgroundColor: 'orange'

  },
  {
    id: createEventId(),
    title: 'Timed event',
    start: TODAY_STR + 'T06:00:00',
    end: TODAY_STR + 'T07:00:00',
    allDay: false,
    backgroundColor: 'red',


  }
];

export function createEventId() {
  return String(eventGuid++);
}
</file>

<file path="src/app/core/services/area.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { AreaService } from './area.service';

describe('AreaService', () => {
  let service: AreaService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(AreaService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/area.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment as env } from '../../../environments/environment';
import { AreaModel } from '../models/Area';
import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root',
})
export class AreaService {
  private readonly token: string;
  private httpOptions: any;
  private endPoint = '/Areas/';

  constructor(private http: HttpClient) {
    const user = JSON.parse(localStorage.getItem('user')!);
    this.token = user.stsTokenManager.accessToken;
    this.httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Authorization: `Bearer ${this.token}`,
      }),
    };
  }

  GetAreas(): Observable<any> {
    const companyId = localStorage.getItem('CompanyId');
    const url = `${env.apiUrl}${companyId}${this.endPoint}`;
    return this.http.get(url, {
      headers:{
        Authorization: `Bearer ${this.token}`,
      }
    }).pipe(
      map((response: any) => {
        // Transform the response data if needed
        return response;
      }),
      catchError((error: any) => {
        console.error('Error getting areas:', error);
        return throwError('Failed to get areas');
      })
    );
  }

  GetArea(id: string): Observable<any> {
    const companyId = localStorage.getItem('CompanyId');
    const url = `${env.apiUrl}${companyId}${this.endPoint}${id}`;
    return this.http.get(url, this.httpOptions).pipe(
      catchError((error: any) => {
        console.error('Error getting area:', error);
        return throwError('Failed to get area');
      })
    );
  }

  PostArea(model: AreaModel): Observable<AreaModel> {
    const companyId = localStorage.getItem('CompanyId');
    model.companyId = companyId;
    const url = `${env.apiUrl}${companyId}${this.endPoint}`;
    return this.http.post(url, model, this.httpOptions).pipe(
      map((resp: any) => {
        model.areaId = resp.areaId;
        return model;
      }),
      catchError((error: any) => {
        console.error('Error posting area:', error);
        return throwError('Failed to post area');
      })
    );
  }



  PutArea(model: AreaModel)
  {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${model.areaId}`;
    return this.http.put(url,model, this.httpOptions)
    .pipe(
      map( (resp: any) => {
        console.log(resp);
        //model.areaId = resp.areaId;
        return model;
      }),
      catchError((error: any) => {
        console.error('Error updating area:', error);
        return throwError('Failed to update area');
      })
    );
  }

  DeleteArea(id: any)
  {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${id}`;
    var headers = new Headers();
    headers.append('Content-Type', 'application/json');
    return this.http.delete(url,this.httpOptions);
  }

  findByName(name: any): Observable<AreaModel[]> {
    return this.http.get<AreaModel[]>(`${env.apiUrl}?name=${name}`).pipe(
      catchError((error: any) => {
        console.error('Error finding area by name:', error);
        return throwError('Failed to find area by name');
      })
    );
  }
}
</file>

<file path="src/app/core/services/areas.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment as env } from '../../../environments/environment';
import { AreaModel } from '../models/Area';
import { catchError, map } from 'rxjs/operators'; // Import the map operator

@Injectable({
  providedIn: 'root'
})
export class AreasService {

  private readonly token: string;
  public httpOptions: any;

  constructor(private http: HttpClient) {
    console.log('Hello ClienteServiceProvider Provider');
    let user = JSON.parse(localStorage.getItem('user')!);
    this.token = user.stsTokenManager.accessToken;

    this.httpOptions =  {
      headers: new HttpHeaders({
        'Content-Type':  'application/json',
        Authorization: `Bearer ${this.token}`,
      })};
  }


  // Get all areas
  getAreas() {
    const apiUrl = `${env.apiUrl}api/Areas/`;
    return this.http.get(apiUrl).pipe(
      map((response: any) => response.data) // Example transformation using map operator
    );
  }

  // Get area by id
  getArea(id: string) {
    const apiUrl = `${env.apiUrl}api/Areas/${id}`;
    return this.http.get(apiUrl).pipe(
      map((response: any) => response.data) // Example transformation using map operator
    );
  }

  // Post new area
  postArea(model: AreaModel) {
    const apiUrl = `${env.apiUrl}api/Areas/`;
    return this.http.post(apiUrl, model, this.httpOptions).pipe(
      map((response: any) => response.data) // Example transformation using map operator
    );
  }

  // Update area
  putArea(model: AreaModel) {
    const apiUrl = `${env.apiUrl}api/Areas/${model.areaId}`;
    return this.http.put(apiUrl, model, this.httpOptions).pipe(
      map((response: any) => response.data) // Example transformation using map operator
    );
  }

  // Delete area
  deleteArea(id: string) {
    const apiUrl = `${env.apiUrl}api/Areas/${id}`;
    return this.http.delete(apiUrl).pipe(
      catchError((err: any) => {
        console.error(err);
        throw err;
      })
    );
  }

  // Find area by name
  findByName(name: string) {
    const apiUrl = `${env.apiUrl}?name=${name}`;
    return this.http.get(apiUrl).pipe(
      map((response: any) => response.data) // Example transformation using map operator
    );
  }
}
</file>

<file path="src/app/core/services/auth.service.ts">
import { Injectable, NgZone } from '@angular/core';
import { User } from '../models/User';
import {
  AngularFirestore,
  AngularFirestoreDocument,
} from '@angular/fire/compat/firestore';
import * as auth from 'firebase/auth';
import { AngularFireAuth } from '@angular/fire/compat/auth';
import { Router } from '@angular/router';
import { environment as env } from '../../../environments/environment';
import { PeopleModel } from '../models/People';
import { HttpClient } from '@angular/common/http';
import { PeopleService } from './people.service';
@Injectable({
  providedIn: 'root',
})
export class AuthService {
  userData: any; // Save logged in user data
  constructor(
    public afs: AngularFirestore, // Inject Firestore service
    public afAuth: AngularFireAuth, // Inject Firebase auth service
    public router: Router,
    public ngZone: NgZone, // NgZone service to remove outside scope warning
    protected http: HttpClient,
  ) {
    /* Saving user data in localstorage when 
    logged in and setting up null when logged out */
    this.afAuth.authState.subscribe((user) => {
      if (user) {
        this.userData = user;
        localStorage.setItem('user', JSON.stringify(this.userData));
        JSON.parse(localStorage.getItem('user')!);
      } else {
        localStorage.setItem('user', 'null');
        JSON.parse(localStorage.getItem('user')!);
      }
    });
  }
  // Sign in with email/password
  SignIn(email: string, password: string) {
    return this.afAuth
      .signInWithEmailAndPassword(email, password)
      .then((result) => {
        this.SetUserData(result.user);
        this.afAuth.authState.subscribe((user) => {
          if (user) {
            this.router.navigate(['dashboard']);
            //this.peopleService.GetbyEmail(email).subscribe(
            //  (data:any) => {
            //    console.log('person',data);
            //    this.router.navigate(['dashboard']);
            //  })
          }
        });
      })
      .catch((error) => {
        window.alert(error.message);
      });
  }
  // Sign up with email/password
  SignUp(email: string, password: string) {
    return this.afAuth
      .createUserWithEmailAndPassword(email, password)
      .then((result) => {
        /* Call the SendVerificaitonMail() function when new user sign 
        up and returns promise */
        this.SendVerificationMail();
        this.SetUserData(result.user);
      })
      .catch((error) => {
        window.alert(error.message);
      });
  }
  // Send email verfificaiton when new user sign up
  SendVerificationMail() {
    return this.afAuth.currentUser
      .then((u: any) => u.sendEmailVerification())
      .then(() => {
        this.router.navigate(['verify-email-address']);
      });
  }
  // Reset Forggot password
  ForgotPassword(passwordResetEmail: string) {
    return this.afAuth
      .sendPasswordResetEmail(passwordResetEmail)
      .then(() => {
        window.alert('Password reset email sent, check your inbox.');
      })
      .catch((error) => {
        window.alert(error);
      });
  }
  // Returns true when user is looged in and email is verified
  get isLoggedIn(): boolean {
    const user = JSON.parse(localStorage.getItem('user')!);
    return user !== null && user.emailVerified !== false ? true : false;
  }

  // Sign in with Google
  GoogleAuth() {
    return this.AuthLogin(new auth.GoogleAuthProvider()).then((res: any) => {
      this.router.navigate(['dashboard']);
    });
  }
  // Auth logic to run auth providers
  AuthLogin(provider: any) {
    return this.afAuth
      .signInWithPopup(provider)
      .then((result) => {
        this.router.navigate(['dashboard']);
        this.SetUserData(result.user);
      })
      .catch((error) => {
        window.alert(error);
      });
  }

  GetbyEmail(id: string) {
    var url = env.apiUrl + 'auth/' + id;
    return this.http.get(url)
      .pipe();
  }

  /* Setting up user data when sign in with username/password, 
  sign up with username/password and sign in with social auth  
  provider in Firestore database using AngularFirestore + AngularFirestoreDocument service */
  SetUserData(user: any) {
    const userRef: AngularFirestoreDocument<any> = this.afs.doc(
      `users/${user.uid}`
    );
    const userData: User = {
      uid: user.uid,
      email: user.email,
      displayName: user.displayName,
      photoURL: user.photoURL,
      emailVerified: user.emailVerified,
    };
    return userRef.set(userData, {
      merge: true,
    });
  }
  // Sign out
  SignOut() {
    return this.afAuth.signOut().then(() => {
      //localStorage.setItem('user', 'null');
      localStorage.removeItem('user');
      this.router.navigate(['sign-in']);
    });
  }
}
</file>

<file path="src/app/core/services/company.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { CompanyService } from './company.service';

describe('CompanyService', () => {
  let service: CompanyService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(CompanyService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/company.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment as env } from '../../../environments/environment';
import { map, Observable } from 'rxjs';
import { companyModel } from '../models/Company';

@Injectable({
  providedIn: 'root'
})
export class CompanyService {
  response: any;
  data: any;
  endPoint = '/Companies/';

  private readonly token: string;
  public httpOptions: any;

  static get parameters() {
    return [[HttpClient]];
  }
  constructor(protected http: HttpClient) {
    let user = JSON.parse(localStorage.getItem('user')!);
    this.token = user.stsTokenManager.accessToken;
    this.httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Authorization: `Bearer ${this.token}`,
      })
    };
  }

  private GetToken() {
    let user = JSON.parse(localStorage.getItem('user')!);
    return user.stsTokenManager.accessToken;
  }

  GetCompanies() {
    var url = `${env.apiUrl}${this.endPoint}`;
    return this.http.get(url, {
      headers: {
        Authorization: `Bearer ${this.token}`,
      }
    }).pipe();
  }

  GetCompany(id: string) {
    var url = `${env.apiUrl}${this.endPoint}${id}`;
    return this.http.get(url, {
      headers: {
        Authorization: `Bearer ${this.token}`,
      }
    }).pipe();
  }

  PostCompany(model: companyModel) {
    var url = `${env.apiUrl}${this.endPoint}`;
    return this.http.post(url, model, this.httpOptions)
      .pipe(
        map((resp: any) => {
          console.log(resp);
          // Assuming the response contains the company ID
          model.companyId = resp.companyId;
          return model;
        })
      );
  }

  PutCompany(model: companyModel) {
    var url = `${env.apiUrl}${this.endPoint}${model.companyId}`;
    return this.http.put(url, model, this.httpOptions)
      .pipe(
        map((resp: any) => {
          console.log(resp);
          return model;
        })
      );
  }

  DeleteCompany(id: any) {
    var url = `${env.apiUrl}${this.endPoint}${id}`;
    return this.http.delete(url, this.httpOptions);
  }

  findByName(name: any): Observable<companyModel[]> {
    return this.http.get<companyModel[]>(`${env.apiUrl}?name=${name}`);
  }
}
</file>

<file path="src/app/core/services/google-analytics.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { GoogleAnalyticsService } from './google-analytics.service';

describe('GoogleAnalyticsServiceService', () => {
  let service: GoogleAnalyticsService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(GoogleAnalyticsService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/google-analytics.service.ts">
import { Injectable } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { environment } from '../../../environments/environment';

declare var gtag: Function;

@Injectable({
  providedIn: 'root',
})
export class GoogleAnalyticsService {
  constructor(private router: Router) {}

  public initialize() {
    this.onRouteChange();

    // dynamically add analytics scripts to document head
    try {
      const url = 'https://www.googletagmanager.com/gtag/js?id=';
      const gTagScript = document.createElement('script');      
      gTagScript.async = true;
      gTagScript.src = `${url}${environment.googleAnalyticsId}`;
      document.head.appendChild(gTagScript);

      const dataLayerScript = document.createElement('script');
      dataLayerScript.innerHTML = `
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', '${environment.googleAnalyticsId}', {'send_page_view': false});`;
      document.head.appendChild(dataLayerScript);
    } catch (e) {
      console.error('Error adding Google Analytics', e);
    }
  }

  // track visited routes
  private onRouteChange() {    
    this.router.events.subscribe((event) => {
      if (event instanceof NavigationEnd) {
        gtag('config', environment.googleAnalyticsId, {
          page_path: event.urlAfterRedirects,
        });
      }
    });
  }

  // use gtag.js to send Google Analytics Events
  public event(action: string, eventCategory?: string, eventLabel?: string, value?: string) {
    gtag('event', action, {
      ...(eventCategory && { event_category: eventCategory }),
      ...(eventLabel && { event_label: eventLabel }),
      ...(value && { value: value }),
    });
  }
}
</file>

<file path="src/app/core/services/location.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { LocationService } from './location.service';

describe('LocationService', () => {
  let service: LocationService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(LocationService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/location.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment as env } from '../../../environments/environment';
import { LocationModel } from '../models/Location';
import { map, Observable } from 'rxjs';
import { Location } from '@angular/common';

@Injectable({
  providedIn: 'root'
})
export class LocationService {
  response: any;
  data: any;
  endPoint = '/Locations/';

  private readonly token: string;
  public httpOptions: any;

  static get parameters() {
    return [[HttpClient]];
  }
  constructor(protected http: HttpClient) {
    let user = JSON.parse(localStorage.getItem('user')!);
    this.token = user.stsTokenManager.accessToken;
    //console.log('Hello ClienteServiceProvider Provider');
    this.httpOptions =  {
      headers: new HttpHeaders({
        'Content-Type':  'application/json',
        Authorization: `Bearer ${this.token}`,
      })};
  }

  private GetToken() {
    let user = JSON.parse(localStorage.getItem('user')!);
    //console.log(user);
     return user.stsTokenManager.accessToken;
  }

  GetLocations() {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}`;
    return this.http.get(url,
      {
        headers:{
          Authorization: `Bearer ${this.token}`,
        }
      }).pipe();
  }

  GetLocation(id:string) {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${id}`;

    return this.http.get(url,{
      headers:{
        Authorization: `Bearer ${this.token}`,
      }
    })
      .pipe();
  }

  PostLocation(model: LocationModel)
  {
    var companyId = localStorage.getItem('CompanyId');
    model.companyId = companyId;
    var url = `${env.apiUrl}${companyId}${this.endPoint}`;
    return this.http.post(url, model, this.httpOptions)
      .pipe(
        map( (resp: any) => {
          console.log(resp);
          model.locationId = resp.LocationId;
          return model;
        })
      );
  }

  PutLocation(model: LocationModel)
  {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${model.locationId}`;
    return this.http.put(url,model, this.httpOptions)
    .pipe(
      map( (resp: any) => {
        console.log(resp);
        //model.areaId = resp.areaId;
        return model;
      })
    );
  }

  DeleteLocation(id: any)
  {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${id}`;
    var headers = new Headers();
    headers.append('Content-Type', 'application/json');
    return this.http.delete(url,this.httpOptions);
  }

  findByName(name: any): Observable<LocationModel[]> {
    return this.http.get<LocationModel[]>(`${env.apiUrl}?name=${name}`);
  }
}
</file>

<file path="src/app/core/services/login-service.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { LoginServiceService } from './login-service.service';

describe('LoginServiceService', () => {
  let service: LoginServiceService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(LoginServiceService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/login-service.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { PeopleModel } from '../models/People';
import { environment as env } from '../../../environments/environment';
import { personalData } from '../../data';
import { map } from 'rxjs';
import { LoginModel } from '../models/Login';

@Injectable({
  providedIn: 'root'
})
export class LoginServiceService {
  endPoint = 'People/login';
  constructor(private http:HttpClient) {
    }
    public httpOptions = {
      headers: new HttpHeaders({
        'Content-Type':  'application/json'
      })
    };
    response: any;
    data: any
   login(model:any){
    var url = env.apiUrl + this.endPoint;
    console.log(model);
    return this.http.post(url,model,this.httpOptions).pipe(map((resp:any)=>{
      console.log(resp);
      return resp; 
    })
    );
   }
}
</file>

<file path="src/app/core/services/people.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { PeopleService } from './people.service';

describe('PeopleService', () => {
  let service: PeopleService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(PeopleService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/people.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment as env } from '../../../environments/environment';
import { PeopleModel } from '../models/People';
import { map, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class PeopleService {

  private readonly token: string;
  public httpOptions = {
    headers: new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': 'my-auth-token'
    })
  };

  static get parameters() {
    return [[HttpClient]];
  }
  constructor(protected http: HttpClient) {
    let user = JSON.parse(localStorage.getItem('user')!);
    this.token = user.stsTokenManager.accessToken;
   // console.log('Hello ClienteServiceProvider Provider');
    this.httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Authorization: `Bearer ${this.token}`,
      })
    };
  }

  private baseApiUrl = localStorage.getItem("urlapi");
  response: any;
  data: any;
  endPoint = '/People/';

  GetPeople() {

      var companyId = localStorage.getItem('CompanyId');
      var url = `${env.apiUrl}${companyId}${this.endPoint}`;
      return this.http.get(url,
        {
          headers:{
            Authorization: `Bearer ${this.token}`,
          }
        }).pipe();
  }

  GetPerson(id: string) {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${id}`;
    return this.http.get(url,this.httpOptions)
      .pipe();
  }

  GetbyEmail(id: string) {
    var url = env.apiUrl + 'auth/' + id;
    return this.http.get(url)
      .pipe();
  }

  PostPerson(model: PeopleModel) {
    var companyId = localStorage.getItem('CompanyId');
    model.companyId = companyId;
    var url = `${env.apiUrl}${companyId}${this.endPoint}`;
    return this.http.post(url, model, this.httpOptions)
      .pipe(
        map((resp: any) => {
          console.log(resp);
          model.personId = resp.personId;
          return model;
        })
      );
  }

  PutPerson(model: PeopleModel) {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${model.personId}`;
    return this.http.put(url, model, this.httpOptions)
      .pipe(
        map((resp: any) => {
          console.log(resp);
          //model.areaId = resp.areaId;
          return model;
        })
      );
  }

  findByName(name: any): Observable<PeopleModel[]> {
    return this.http.get<PeopleModel[]>(`${env.apiUrl}?name=${name}`,this.httpOptions);
  }

  //DeletePerson(id: string)
  //{
  //  var headers = new Headers();
  //  headers.append('Content-Type', 'application/json');
  //  var url = env.apiUrl + this.endPoint + id;
  //  return this.http.delete(url);  
  //}

  DeletePerson(id: any) {
    var headers = new Headers();
    headers.append('Content-Type', 'application/json');
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${id}`;
    return this.http.delete(url,this.httpOptions);
  }
}
</file>

<file path="src/app/core/services/role.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { RoleService } from './role.service';

describe('RoleService', () => {
  let service: RoleService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(RoleService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/role.service.ts">
import { Injectable } from '@angular/core';
import { environment as env } from '../../../environments/environment';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { RoleModel } from '../models/Role'
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class RoleService {
 myApiUrl:string;
 endpoint:string;
 private readonly token: string;
 public httpOptions = {
   headers: new HttpHeaders({
     'Content-Type':  'application/json',
     'Authorization': 'my-auth-token'
   })
 };
 
  constructor(private http:HttpClient) {
    let user = JSON.parse(localStorage.getItem('user')!);
    this.token = user.stsTokenManager.accessToken;
    console.log('Hello ClienteServiceProvider Provider');
    this.httpOptions =  {
      headers: new HttpHeaders({
        'Content-Type':  'application/json',
        Authorization: `Bearer ${this.token}`,
      })};

    this.myApiUrl= env.apiUrl;
    this.endpoint='/role/';
   }
   PostRole(role:RoleModel ):Observable<any>{
      return this.http.post(this.myApiUrl+this.endpoint,role);
  }
  GetRole():Observable<any>{
    return this.http.get(this.myApiUrl+this.endpoint+'GetRole')
  }
  GetRolebyId(idRole:number):Observable<any>{
    return this.http.get(this.myApiUrl+this.endpoint+idRole)
  }
  DeleteRole(idArea:number):Observable<any>{
    return this.http.delete(this.myApiUrl+this.endpoint+idArea)
  }
  PutRole(idRole:number,role:RoleModel):Observable<any>{
    return this.http.put(this.myApiUrl+this.endpoint+idRole,role)
  }
}
</file>

<file path="src/app/core/services/schedule-clock.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { ScheduleClockService } from './schedule-clock.service';

describe('ScheduleClockService', () => {
  let service: ScheduleClockService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(ScheduleClockService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/schedule-clock.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment as env } from '../../../environments/environment';
import { ScheduleShiftModel } from '../models/ScheduleShift';
import { map, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ScheduleClockService {

  static get parameters() {
    return [[HttpClient]];
  }
  constructor(protected http: HttpClient) {
    let user = JSON.parse(localStorage.getItem('user')!);
    this.token = user.stsTokenManager.accessToken;
    //console.log('Hello ClienteServiceProvider Provider');
    this.httpOptions =  {
      headers: new HttpHeaders({
        'Content-Type':  'application/json',
        Authorization: `Bearer ${this.token}`,
      })};
  }


  httpOptions: any;
  token: any;
  response: any;
  data: any;
  endPoint = '/ScheduleShifts/';


  GetScheduleShifts() {

    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}`;    
    return this.http.get(url,
      {
        headers:{
          Authorization: `Bearer ${this.token}`,
        }
      }).pipe();
  }

  GetScheduleShift(id:string) {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${id}`;   
    return this.http.get(url,this.httpOptions)
      .pipe();
  }

  PostScheduleShift(model: ScheduleShiftModel)
  {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}`; 
    model.companyId = companyId;
    return this.http.post(url, model, this.httpOptions)
      .pipe(
        map( (resp: any) => {
          console.log(resp);
          model = resp;
          return resp;
        })
      );
  }

  PutScheduleShift(model: ScheduleShiftModel)
  {
    //let bodyString = JSON.stringify(model);
    //console.log(bodyString);
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${model.scheduleShiftId}`;     
    return this.http.put(url,model, this.httpOptions)
    .pipe(
      map( (resp: any) => {
        console.log(resp);
        //model.areaId = resp.areaId;
        return model;
      })
    );
  }

  DeleteScheduleShift(id: any)
  {
    var headers = new Headers();
    headers.append('Content-Type', 'application/json');
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${id}`; 
    return this.http.delete(url,this.httpOptions)
  }
}
  //DeleteSchedule(model: any)
  //{
  //  var headers = new Headers();
  //  headers.append('Content-Type', 'application/json');
</file>

<file path="src/app/core/services/schedule.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { ScheduleService } from './schedule.service';

describe('ScheduleService', () => {
  let service: ScheduleService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(ScheduleService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/schedule.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment as env } from '../../../environments/environment';
import { ScheduleModel } from '../models/Schedule';
import { map, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ScheduleService {

  static get parameters() {
    return [[HttpClient]];
  }

  private readonly token: string;

  constructor(protected http: HttpClient) {
    let user = JSON.parse(localStorage.getItem('user')!);
    this.token = user.stsTokenManager.accessToken;
    //console.log('Hello ClienteServiceProvider Provider');
    this.httpOptions =  {
      headers: new HttpHeaders({
        'Content-Type':  'application/json',
        Authorization: `Bearer ${this.token}`,
      })};
  }

  public httpOptions = {
    headers: new HttpHeaders({
      'Content-Type':  'application/json'
    })
  };

  response: any;
  data: any;
  endPoint = '/Schedule/';

  GetSchedules() {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}`; 
    return this.http.get(url,
      {
        headers:{
          Authorization: `Bearer ${this.token}`,
        }
      }).pipe();
  }

  GetSchedule(id:string) {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${id}`; 
    return this.http.get(url,this.httpOptions)
      .pipe();
  }

  PostSchedule(model: ScheduleModel)
  {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}`; 
    model.companyId = companyId;
    return this.http.post(url, model, this.httpOptions)
      .pipe(
        map( (resp: any) => {
          console.log(resp);
          model.scheduleId = resp.scheduleId;
          return model;
        })
      );
  }

  PutSchedule(model: ScheduleModel)
  {
    //let bodyString = JSON.stringify(model);
    //console.log(bodyString);
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${model.scheduleId}`;     
    return this.http.put(url,model, this.httpOptions)
    .pipe(
      map( (resp: any) => {
       // console.log(resp);
        //model.scheduleId = resp.scheduleId;
        return model;
      })
    );
  }

  DeleteSchedule(id: any)
  {
    var headers = new Headers();
    headers.append('Content-Type', 'application/json');
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${id}`;  
    return this.http.delete(url,this.httpOptions);
  }
}
  //DeleteSchedule(model: any)
  //{
  //  var headers = new Headers();
  //  headers.append('Content-Type', 'application/json');
</file>

<file path="src/app/core/services/task-shift.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { TaskShiftService } from './task-shift.service';

describe('TaskShiftService', () => {
  let service: TaskShiftService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(TaskShiftService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/task-shift.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment as env } from '../../../environments/environment';
import { TaskShiftModel } from '../models/TaskShift';
import { map, Observable } from 'rxjs';


@Injectable({
  providedIn: 'root'
})
export class TaskShiftService {

  static get parameters() {
    return [[HttpClient]];
  }

  private readonly token: string;
  public httpOptions: any;

  constructor(protected http: HttpClient) {
    let user = JSON.parse(localStorage.getItem('user')!);
    this.token = user.stsTokenManager.accessToken;
    //console.log('Hello ClienteServiceProvider Provider');
    this.httpOptions =  {
      headers: new HttpHeaders({
        'Content-Type':  'application/json',
        Authorization: `Bearer ${this.token}`,
      })};
  }



  response: any;
  data: any;
  endPoint = '/TaskShifts/';  //No encontre donde Buscar el nombre del endPoint

  GetTaskShift() {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}`; 
    return this.http.get(url,
      {
        headers:{
          Authorization: `Bearer ${this.token}`,
        }
      }).pipe();
  }

  GetTaskShiftID(id:string) {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${id}`; 
    return this.http.get(url,this.httpOptions)
      .pipe();
  }

  PostTaskShift(model: TaskShiftModel)
  {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}`; 
    model.companyId = companyId;
    return this.http.post(url, model, this.httpOptions)
    .pipe(
      map( (resp: any) => {
        console.log(resp);
        model.taskShiftId = resp.taskShiftId;
        return model;
      })
    );
  }

  PutTaskShift(model: TaskShiftModel)
  {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${model.taskShiftId}`; 
    return this.http.put(url,model, this.httpOptions)
    .pipe(
      map( (resp: any) => {
        console.log(resp);
        //model.taskShiftId = resp.taskShiftId;
        return model;
      })
    );
  }

  DeleteTaskShift(id: any)
  {
    var headers = new Headers();
    headers.append('Content-Type', 'application/json');
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${id}`; 
    return this.http.delete(url,this.httpOptions);
  }

}
</file>

<file path="src/app/core/services/user-company.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { UserCompanyService } from './user-company.service';

describe('UserCompanyService', () => {
  let service: UserCompanyService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(UserCompanyService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/user-company.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment as env } from '../../../environments/environment';
import { UserCompanyModel } from '../models/UserCompany';
import { map, Observable } from 'rxjs';
import { companyModel } from '../models/Company';

@Injectable({
  providedIn: 'root'
})
export class UserCompanyService {
  response: any;
  data: any;
  endPoint = '/UserCompanies/';

  private readonly token: string;
  public httpOptions: any;

  static get parameters() {
    return [[HttpClient]];
  }
  constructor(protected http: HttpClient) {
    let user = JSON.parse(localStorage.getItem('user')!);
    this.token = user.stsTokenManager.accessToken;
    this.httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Authorization: `Bearer ${this.token}`,
      })
    };
  }

  private GetToken() {
    let user = JSON.parse(localStorage.getItem('user')!);
    return user.stsTokenManager.accessToken;
  }

  GetUserCompanies() {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}`;
    return this.http.get(url, {
      headers: {
        Authorization: `Bearer ${this.token}`,
      }
    }).pipe();
  }

  GetUserCompany(id: string) {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${id}`;
    return this.http.get(url, {
      headers: {
        Authorization: `Bearer ${this.token}`,
      }
    }).pipe();
  }

  PostUserCompany(model: UserCompanyModel) {
    var companyId = localStorage.getItem('CompanyId');
    model.companyId = companyId;
    var url = `${env.apiUrl}${companyId}${this.endPoint}`;
    return this.http.post(url, model, this.httpOptions)
      .pipe(
        map((resp: any) => {
          console.log(resp);
          model.userCompanyId = resp.userCompanyId;
          return model;
        })
      );
  }

  PutUserCompany(model: UserCompanyModel) {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${model.userCompanyId}`;
    return this.http.put(url, model, this.httpOptions)
      .pipe(
        map((resp: any) => {
          console.log(resp);
          return model;
        })
      );
  }

  DeleteUserCompany(id: any) {
    var companyId = localStorage.getItem('CompanyId');
    var url = `${env.apiUrl}${companyId}${this.endPoint}${id}`;
    return this.http.delete(url, this.httpOptions);
  }

  findByUserAndCompany(userId: string, companyId: string): Observable<UserCompanyModel[]> {
    return this.http.get<UserCompanyModel[]>(`${env.apiUrl}?userId=${userId}&companyId=${companyId}`);
  }
}
</file>

<file path="src/app/core/services/user.service.ts">
export interface UserService {
}
</file>

<file path="src/app/core/services/weather.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { WeatherService } from './weather.service';

describe('WeatherServiceService', () => {
  let service: WeatherService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(WeatherService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/weather.service.ts">
import { query } from '@angular/animations';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class WeatherService {
  
  public httpOptions = {
    headers: new HttpHeaders({
      'Content-Type':  'application/json'
    })
  };


  response: any;
  data: any;
  endPoint = '/Schedules/';

  constructor(protected http: HttpClient) { }

  GetWeather(location){
    var url = `http://api.weatherstack.com/current`;
    return this.http.get(url,
      {
        params: {
          access_key: "dd5f2160428e3a2e7a88f631f6026cc8",
          query: location,
        }
      }).pipe();
  }
}
</file>

<file path="src/app/data.ts">
/**
 * Schedule datasource
 */

 export let scheduleData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Explosion of Betelgeuse Star',
      Location: 'Space Centre USA',
      StartTime: new Date(2021, 0, 10, 9, 30),
      EndTime: new Date(2021, 0, 10, 11, 0),
      CategoryColor: '#1aaa55'
    }, {
      Id: 2,
      Subject: 'Thule Air Crash Report',
      Location: 'Newyork City',
      StartTime: new Date(2021, 0, 11, 12, 0),
      EndTime: new Date(2021, 0, 11, 14, 0),
      CategoryColor: '#357cd2'
    }, {
      Id: 3,
      Subject: 'Blue Moon Eclipse',
      Location: 'Space Centre USA',
      StartTime: new Date(2021, 0, 12, 9, 30),
      EndTime: new Date(2021, 0, 12, 11, 0),
      CategoryColor: '#7fa900'
    }, {
      Id: 4,
      Subject: 'Meteor Showers in 2021',
      Location: 'Space Centre USA',
      StartTime: new Date(2021, 0, 13, 13, 0),
      EndTime: new Date(2021, 0, 13, 14, 30),
      CategoryColor: '#ea7a57'
    }, {
      Id: 5,
      Subject: 'Milky Way as Melting pot',
      Location: 'Space Centre USA',
      StartTime: new Date(2021, 0, 14, 12, 0),
      EndTime: new Date(2021, 0, 14, 14, 0),
      CategoryColor: '#00bdae'
    }, {
      Id: 6,
      Subject: 'Mysteries of Bermuda Triangle',
      Location: 'Bermuda',
      StartTime: new Date(2021, 0, 14, 9, 30),
      EndTime: new Date(2021, 0, 14, 11, 0),
      CategoryColor: '#f57f17'
    }, {
      Id: 7,
      Subject: 'Glaciers and Snowflakes',
      Location: 'Himalayas',
      StartTime: new Date(2021, 0, 15, 11, 0),
      EndTime: new Date(2021, 0, 15, 12, 30),
      CategoryColor: '#1aaa55'
    }, {
      Id: 8,
      Subject: 'Life on Mars',
      Location: 'Space Centre USA',
      StartTime: new Date(2021, 0, 16, 9, 0),
      EndTime: new Date(2021, 0, 16, 10, 0),
      CategoryColor: '#357cd2'
    }, {
      Id: 9,
      Subject: 'Alien Civilization',
      Location: 'Space Centre USA',
      StartTime: new Date(2021, 0, 18, 11, 0),
      EndTime: new Date(2021, 0, 18, 13, 0),
      CategoryColor: '#7fa900'
    }, {
      Id: 10,
      Subject: 'Wildlife Galleries',
      Location: 'Africa',
      StartTime: new Date(2021, 0, 20, 11, 0),
      EndTime: new Date(2021, 0, 20, 13, 0),
      CategoryColor: '#ea7a57'
    }, {
      Id: 11,
      Subject: 'Best Photography 2021',
      Location: 'London',
      StartTime: new Date(2021, 0, 21, 9, 30),
      EndTime: new Date(2021, 0, 21, 11, 0),
      CategoryColor: '#00bdae'
    }, {
      Id: 12,
      Subject: 'Smarter Puppies',
      Location: 'Sweden',
      StartTime: new Date(2021, 0, 8, 10, 0),
      EndTime: new Date(2021, 0, 8, 11, 30),
      CategoryColor: '#f57f17'
    }, {
      Id: 13,
      Subject: 'Myths of Andromeda Galaxy',
      Location: 'Space Centre USA',
      StartTime: new Date(2021, 0, 6, 10, 30),
      EndTime: new Date(2021, 0, 6, 12, 30),
      CategoryColor: '#1aaa55'
    }, {
      Id: 14,
      Subject: 'Aliens vs Humans',
      Location: 'Research Centre of USA',
      StartTime: new Date(2021, 0, 5, 10, 0),
      EndTime: new Date(2021, 0, 5, 11, 30),
      CategoryColor: '#357cd2'
    }, {
      Id: 15,
      Subject: 'Facts of Humming Birds',
      Location: 'California',
      StartTime: new Date(2021, 0, 19, 9, 30),
      EndTime: new Date(2021, 0, 19, 11, 0),
      CategoryColor: '#7fa900'
    }, {
      Id: 16,
      Subject: 'Sky Gazers',
      Location: 'Alaska',
      StartTime: new Date(2021, 0, 22, 11, 0),
      EndTime: new Date(2021, 0, 22, 13, 0),
      CategoryColor: '#ea7a57'
    }, {
      Id: 17,
      Subject: 'The Cycle of Seasons',
      Location: 'Research Centre of USA',
      StartTime: new Date(2021, 0, 11, 5, 30),
      EndTime: new Date(2021, 0, 11, 7, 30),
      CategoryColor: '#00bdae'
    }, {
      Id: 18,
      Subject: 'Space Galaxies and Planets',
      Location: 'Space Centre USA',
      StartTime: new Date(2021, 0, 11, 17, 0),
      EndTime: new Date(2021, 0, 11, 18, 30),
      CategoryColor: '#f57f17'
    }, {
      Id: 19,
      Subject: 'Lifecycle of Bumblebee',
      Location: 'San Fransisco',
      StartTime: new Date(2021, 0, 14, 6, 0),
      EndTime: new Date(2021, 0, 14, 7, 30),
      CategoryColor: '#7fa900'
    }, {
      Id: 20,
      Subject: 'Alien Civilization',
      Location: 'Space Centre USA',
      StartTime: new Date(2021, 0, 14, 16, 0),
      EndTime: new Date(2021, 0, 14, 18, 0),
      CategoryColor: '#ea7a57'
    }, {
      Id: 21,
      Subject: 'Alien Civilization',
      Location: 'Space Centre USA',
      StartTime: new Date(2021, 0, 10, 14, 0),
      EndTime: new Date(2021, 0, 10, 16, 0),
      CategoryColor: '#ea7a57'
    }, {
      Id: 22,
      Subject: 'The Cycle of Seasons',
      Location: 'Research Centre of USA',
      StartTime: new Date(2021, 0, 12, 14, 30),
      EndTime: new Date(2021, 0, 12, 16, 0),
      CategoryColor: '#00bdae'
    }, {
      Id: 23,
      Subject: 'Sky Gazers',
      Location: 'Greenland',
      StartTime: new Date(2021, 0, 15, 14, 30),
      EndTime: new Date(2021, 0, 15, 16, 0),
      CategoryColor: '#ea7a57'
    }, {
      Id: 24,
      Subject: 'Facts of Humming Birds',
      Location: 'California',
      StartTime: new Date(2021, 0, 16, 12, 30),
      EndTime: new Date(2021, 0, 16, 14, 30),
      CategoryColor: '#7fa900'
    }
  ];
  
  export let timelineData: Record<string, any>[] = [
    {
      Id: 25,
      Subject: 'Sky Gazers',
      StartTime: new Date(2021, 1, 15, 10, 30),
      EndTime: new Date(2021, 1, 15, 12, 0),
      CategoryColor: '#1aaa55'
    }, {
      Id: 26,
      Subject: 'The Cycle of Seasons',
      StartTime: new Date(2021, 1, 15, 11, 0),
      EndTime: new Date(2021, 1, 15, 12, 30),
      CategoryColor: '#7fa900'
    }, {
      Id: 27,
      Subject: 'Facts of Humming Birds',
      StartTime: new Date(2021, 1, 15, 12, 30),
      EndTime: new Date(2021, 1, 15, 14, 0),
      CategoryColor: '#ea7a57'
    }, {
      Id: 28,
      Subject: 'Myths of Andromeda Galaxy',
      StartTime: new Date(2021, 1, 15, 10, 0),
      EndTime: new Date(2021, 1, 15, 11, 30),
      CategoryColor: '#00bdae'
    }, {
      Id: 29,
      Subject: 'Croco World',
      StartTime: new Date(2021, 1, 15, 19, 0),
      EndTime: new Date(2021, 1, 15, 20, 30),
      CategoryColor: '#f57f17'
    }, {
      Id: 30,
      Subject: 'Explosion of Betelgeuse Star',
      StartTime: new Date(2021, 1, 15, 13, 30),
      EndTime: new Date(2021, 1, 15, 15, 0),
      CategoryColor: '#1aaa55'
    }
  ];
  
  export let zooEventsData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Story Time for Kids',
      StartTime: new Date(2021, 1, 14, 10, 0),
      EndTime: new Date(2021, 1, 14, 11, 30),
      CategoryColor: '#1aaa55'
    }, {
      Id: 2,
      Subject: 'Camping with Turtles',
      StartTime: new Date(2021, 1, 15, 12, 0),
      EndTime: new Date(2021, 1, 15, 14, 0),
      CategoryColor: '#357cd2'
    }, {
      Id: 3,
      Subject: 'Wildlife Warriors',
      StartTime: new Date(2021, 1, 16, 10, 0),
      EndTime: new Date(2021, 1, 16, 11, 30),
      CategoryColor: '#7fa900'
    }, {
      Id: 4,
      Subject: 'Parrot Talk',
      StartTime: new Date(2021, 1, 17, 9, 0),
      EndTime: new Date(2021, 1, 17, 10, 0),
      CategoryColor: '#ea7a57'
    }, {
      Id: 5,
      Subject: 'Birds of Prey',
      StartTime: new Date(2021, 1, 18, 10, 0),
      EndTime: new Date(2021, 1, 18, 11, 30),
      CategoryColor: '#00bdae'
    }, {
      Id: 6,
      Subject: 'Croco World',
      StartTime: new Date(2021, 1, 19, 12, 0),
      EndTime: new Date(2021, 1, 19, 14, 0),
      CategoryColor: '#f57f17'
    }, {
      Id: 7,
      Subject: 'Venomous Snake Hunt',
      StartTime: new Date(2021, 1, 20, 10, 0),
      EndTime: new Date(2021, 1, 20, 11, 30),
      CategoryColor: '#1aaa55'
    }, {
      Id: 8,
      Subject: 'Face Painting & Drawing events',
      StartTime: new Date(2021, 1, 22, 9, 30),
      EndTime: new Date(2021, 1, 22, 11, 0),
      CategoryColor: '#357cd2'
    }, {
      Id: 9,
      Subject: 'Pony Rides',
      StartTime: new Date(2021, 1, 24, 11, 0),
      EndTime: new Date(2021, 1, 24, 13, 0),
      CategoryColor: '#7fa900'
    }, {
      Id: 10,
      Subject: 'Feed the Giants',
      StartTime: new Date(2021, 1, 25, 9, 30),
      EndTime: new Date(2021, 1, 25, 11, 0),
      CategoryColor: '#ea7a57'
    }, {
      Id: 11,
      Subject: 'Jungle Treasure Hunt',
      StartTime: new Date(2021, 1, 12, 10, 0),
      EndTime: new Date(2021, 1, 12, 11, 30),
      CategoryColor: '#00bdae'
    }, {
      Id: 12,
      Subject: 'Endangered Species Program',
      StartTime: new Date(2021, 1, 10, 10, 30),
      EndTime: new Date(2021, 1, 10, 12, 30),
      CategoryColor: '#f57f17'
    }, {
      Id: 13,
      Subject: 'Black Cockatoos Playtime',
      StartTime: new Date(2021, 1, 8, 10, 0),
      EndTime: new Date(2021, 1, 8, 11, 30),
      CategoryColor: '#1aaa55'
    }, {
      Id: 14,
      Subject: 'Walk with Jungle King',
      StartTime: new Date(2021, 1, 17, 12, 0),
      EndTime: new Date(2021, 1, 17, 14, 0),
      CategoryColor: '#357cd2'
    }, {
      Id: 15,
      Subject: 'Trained Climbers',
      StartTime: new Date(2021, 1, 22, 13, 0),
      EndTime: new Date(2021, 1, 22, 14, 30),
      CategoryColor: '#7fa900'
    }, {
      Id: 16,
      Subject: 'Playtime with Chimpanzees',
      StartTime: new Date(2021, 1, 25, 13, 0),
      EndTime: new Date(2021, 1, 25, 14, 30),
      CategoryColor: '#ea7a57'
    }, {
      Id: 17,
      Subject: 'Story Time for Kids',
      StartTime: new Date(2021, 1, 16, 14, 30),
      EndTime: new Date(2021, 1, 16, 16, 0),
      CategoryColor: '#1aaa55'
    }, {
      Id: 18,
      Subject: 'Black Cockatoos Playtime',
      StartTime: new Date(2021, 1, 18, 14, 30),
      EndTime: new Date(2021, 1, 18, 16, 0),
      CategoryColor: '#7fa900'
    }
  ];
  
  export let eventsData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Server Maintenance',
      StartTime: new Date(2021, 1, 11, 10, 0),
      EndTime: new Date(2021, 1, 11, 11, 30),
      EventType: 'maintenance',
      City: 'Seattle',
      CategoryColor: '#1aaa55'
    }, {
      Id: 2,
      Subject: 'Art & Painting Gallery',
      StartTime: new Date(2021, 1, 12, 12, 0),
      EndTime: new Date(2021, 1, 12, 14, 0),
      EventType: 'public-event',
      City: 'Costa Rica',
      CategoryColor: '#357cd2'
    }, {
      Id: 3,
      Subject: 'Dany Birthday Celebration',
      StartTime: new Date(2021, 1, 13, 10, 0),
      EndTime: new Date(2021, 1, 13, 11, 30),
      EventType: 'family-event',
      City: 'Kirkland',
      CategoryColor: '#7fa900'
    }, {
      Id: 4,
      Subject: 'John Wedding Anniversary',
      StartTime: new Date(2021, 1, 14, 9, 0),
      EndTime: new Date(2021, 1, 14, 10, 0),
      EventType: 'family-event',
      City: 'Redmond',
      CategoryColor: '#ea7a57'
    }, {
      Id: 5,
      Subject: 'ISA Annual Conference',
      StartTime: new Date(2021, 1, 15, 10, 0),
      EndTime: new Date(2021, 1, 15, 11, 30),
      EventType: 'commercial-event',
      City: 'USA',
      CategoryColor: '#00bdae'
    }, {
      Id: 6,
      Subject: 'Equipment Maintenance',
      StartTime: new Date(2021, 1, 16, 12, 0),
      EndTime: new Date(2021, 1, 16, 14, 0),
      EventType: 'maintenance',
      City: 'Seattle',
      CategoryColor: '#f57f17'
    }, {
      Id: 7,
      Subject: 'Aircraft Maintenance',
      StartTime: new Date(2021, 1, 17, 10, 0),
      EndTime: new Date(2021, 1, 17, 11, 30),
      EventType: 'maintenance',
      City: 'Seattle',
      CategoryColor: '#1aaa55'
    }, {
      Id: 8,
      Subject: 'Facilities Maintenance',
      StartTime: new Date(2021, 1, 19, 9, 30),
      EndTime: new Date(2021, 1, 19, 11, 0),
      EventType: 'maintenance',
      City: 'Seattle',
      CategoryColor: '#357cd2'
    }, {
      Id: 9,
      Subject: 'Britto Birthday Celebration',
      StartTime: new Date(2021, 1, 21, 11, 0),
      EndTime: new Date(2021, 1, 21, 13, 0),
      EventType: 'family-event',
      City: 'Greenland',
      CategoryColor: '#7fa900'
    }, {
      Id: 10,
      Subject: 'Justin Wedding Anniversary',
      StartTime: new Date(2021, 1, 22, 9, 30),
      EndTime: new Date(2021, 1, 22, 11, 0),
      EventType: 'family-event',
      City: 'Finland',
      CategoryColor: '#ea7a57'
    }, {
      Id: 11,
      Subject: 'AIEA Annual Meet',
      StartTime: new Date(2021, 1, 9, 10, 0),
      EndTime: new Date(2021, 1, 9, 11, 30),
      EventType: 'commercial-event',
      City: 'USA',
      CategoryColor: '#00bdae'
    }, {
      Id: 12,
      Subject: 'AAN Conference',
      StartTime: new Date(2021, 1, 7, 10, 30),
      EndTime: new Date(2021, 1, 7, 12, 30),
      EventType: 'commercial-event',
      City: 'USA',
      CategoryColor: '#f57f17'
    }, {
      Id: 13,
      Subject: 'Photography Gallery',
      StartTime: new Date(2021, 1, 5, 10, 0),
      EndTime: new Date(2021, 1, 5, 11, 30),
      EventType: 'public-event',
      City: 'Chennai',
      CategoryColor: '#1aaa55'
    }, {
      Id: 14,
      Subject: 'Beach Clean-up',
      StartTime: new Date(2021, 1, 14, 12, 0),
      EndTime: new Date(2021, 1, 14, 14, 0),
      EventType: 'public-event',
      City: 'Mumbai',
      CategoryColor: '#357cd2'
    }, {
      Id: 15,
      Subject: 'Turtle Walk',
      StartTime: new Date(2021, 1, 19, 13, 0),
      EndTime: new Date(2021, 1, 19, 14, 30),
      EventType: 'public-event',
      City: 'Costa Rica',
      CategoryColor: '#7fa900'
    }, {
      Id: 16,
      Subject: 'Silent Walk for Cancer day',
      StartTime: new Date(2021, 1, 22, 13, 0),
      EndTime: new Date(2021, 1, 22, 14, 30),
      EventType: 'public-event',
      City: 'Chennai',
      CategoryColor: '#ea7a57'
    }, {
      Id: 17,
      Subject: 'Beach Clean-up',
      StartTime: new Date(2021, 1, 13, 14, 0),
      EndTime: new Date(2021, 1, 13, 16, 0),
      EventType: 'public-event',
      City: 'Mumbai',
      CategoryColor: '#357cd2'
    }, {
      Id: 18,
      Subject: 'Photography Gallery',
      StartTime: new Date(2021, 1, 15, 14, 0),
      EndTime: new Date(2021, 1, 15, 16, 0),
      EventType: 'public-event',
      City: 'Chennai',
      CategoryColor: '#1aaa55'
    }
  ];
  
  export let employeeEventData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Project Workflow Analysis',
      StartTime: new Date(2021, 1, 8, 9, 0),
      EndTime: new Date(2021, 1, 8, 11, 0),
      CategoryColor: '#1aaa55'
    }, {
      Id: 2,
      Subject: 'Project Requirement Planning',
      StartTime: new Date(2021, 1, 9, 11, 30),
      EndTime: new Date(2021, 1, 9, 14, 0),
      CategoryColor: '#357cd2'
    }, {
      Id: 3,
      Subject: 'Quality Analysis',
      StartTime: new Date(2021, 1, 10, 9, 30),
      EndTime: new Date(2021, 1, 10, 11, 0),
      CategoryColor: '#7fa900'
    }, {
      Id: 4,
      Subject: 'Timeline Estimation',
      StartTime: new Date(2021, 1, 10, 11, 30),
      EndTime: new Date(2021, 1, 10, 14, 0),
      CategoryColor: '#ea7a57'
    }, {
      Id: 5,
      Subject: 'Project Resource planning',
      StartTime: new Date(2021, 1, 11, 9, 30),
      EndTime: new Date(2021, 1, 11, 12, 0),
      CategoryColor: '#00bdae'
    }, {
      Id: 6,
      Subject: 'Meeting with Developers',
      StartTime: new Date(2021, 1, 12, 11, 0),
      EndTime: new Date(2021, 1, 12, 13, 0),
      CategoryColor: '#f57f17'
    }, {
      Id: 7,
      Subject: 'Task Assignment to Developers',
      StartTime: new Date(2021, 1, 15, 10, 0),
      EndTime: new Date(2021, 1, 15, 11, 30),
      CategoryColor: '#1aaa55'
    }, {
      Id: 8,
      Subject: 'Project Review - 1',
      StartTime: new Date(2021, 1, 16, 11, 0),
      EndTime: new Date(2021, 1, 16, 12, 30),
      CategoryColor: '#357cd2'
    }, {
      Id: 9,
      Subject: 'Project Review - 2',
      StartTime: new Date(2021, 1, 17, 12, 0),
      EndTime: new Date(2021, 1, 17, 13, 30),
      CategoryColor: '#7fa900'
    }, {
      Id: 10,
      Subject: 'Project Review - 3',
      StartTime: new Date(2021, 1, 18, 11, 0),
      EndTime: new Date(2021, 1, 18, 12, 30),
      CategoryColor: '#ea7a57'
    }, {
      Id: 11,
      Subject: 'Project Output Preview',
      StartTime: new Date(2021, 1, 19, 9, 30),
      EndTime: new Date(2021, 1, 19, 12, 0),
      CategoryColor: '#00bdae'
    }, {
      Id: 12,
      Subject: 'Testing Project Quality',
      StartTime: new Date(2021, 1, 22, 10, 0),
      EndTime: new Date(2021, 1, 22, 11, 30),
      CategoryColor: '#f57f17'
    }, {
      Id: 13,
      Subject: 'Draft Technical Documentation',
      StartTime: new Date(2021, 1, 23, 10, 0),
      EndTime: new Date(2021, 1, 23, 13, 0),
      CategoryColor: '#1aaa55'
    }, {
      Id: 14,
      Subject: 'Online Hosting of Project',
      StartTime: new Date(2021, 1, 24, 10, 0),
      EndTime: new Date(2021, 1, 24, 11, 30),
      CategoryColor: '#357cd2'
    }, {
      Id: 15,
      Subject: 'Project Submission to Client',
      StartTime: new Date(2021, 1, 25, 10, 0),
      EndTime: new Date(2021, 1, 25, 13, 0),
      CategoryColor: '#7fa900'
    }, {
      Id: 16,
      Subject: 'Review meeting with Client',
      StartTime: new Date(2021, 1, 26, 10, 0),
      EndTime: new Date(2021, 1, 26, 11, 30),
      CategoryColor: '#ea7a57'
    }
  ];
  
  export let leaveData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Casual Leave',
      StartTime: new Date(2021, 1, 12, 9, 0),
      EndTime: new Date(2021, 1, 12, 13, 0)
    }, {
      Id: 2,
      Subject: 'Sick Leave',
      StartTime: new Date(2021, 1, 15),
      EndTime: new Date(2021, 1, 16),
      IsAllDay: true
    }, {
      Id: 3,
      Subject: 'Time-off in lieu',
      StartTime: new Date(2021, 1, 16, 12, 0),
      EndTime: new Date(2021, 1, 16, 13, 0)
    }, {
      Id: 4,
      Subject: 'Time-off in lieu',
      StartTime: new Date(2021, 1, 13, 9, 0),
      EndTime: new Date(2021, 1, 13, 11, 0)
    }, {
      Id: 5,
      Subject: 'Time-off in lieu',
      StartTime: new Date(2021, 1, 20, 9, 0),
      EndTime: new Date(2021, 1, 20, 11, 0)
    }, {
      Id: 6,
      Subject: 'Casual Leave',
      StartTime: new Date(2021, 1, 22, 14, 0),
      EndTime: new Date(2021, 1, 24, 18, 0)
    }, {
      Id: 7,
      Subject: 'Training Session - Off-site',
      StartTime: new Date(2021, 1, 8, 14, 0),
      EndTime: new Date(2021, 1, 9, 3, 0),
      Location: 'San-Francisco'
    }, {
      Id: 8,
      Subject: 'Sick Leave',
      StartTime: new Date(2021, 1, 5, 9, 0),
      EndTime: new Date(2021, 1, 5, 13, 0)
    }, {
      Id: 9,
      Subject: 'Maternity leave',
      StartTime: new Date(2021, 2, 1),
      EndTime: new Date(2021, 7, 31),
      IsAllDay: true
    }, {
      Id: 10,
      Subject: 'Valentine\'s Day',
      StartTime: new Date(2021, 1, 14),
      EndTime: new Date(2021, 1, 15),
      IsAllDay: true
    }, {
      Id: 11,
      Subject: 'Presidents\' Day',
      StartTime: new Date(2021, 1, 19),
      EndTime: new Date(2021, 1, 20),
      IsAllDay: true
    }, {
      Id: 12,
      Subject: 'Daylight Saving Time starts',
      StartTime: new Date(2021, 2, 11),
      EndTime: new Date(2021, 2, 12),
      IsAllDay: true
    }, {
      Id: 13,
      Subject: 'Easter Sunday',
      StartTime: new Date(2021, 3, 1),
      EndTime: new Date(2021, 3, 2),
      IsAllDay: true
    }, {
      Id: 14,
      Subject: 'Time-off in lieu',
      StartTime: new Date(2021, 1, 14, 14, 0),
      EndTime: new Date(2021, 1, 14, 15, 0)
    }
  ];
  
  export let recurrenceData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Project demo meeting with Andrew',
      Location: 'Office',
      StartTime: new Date(2021, 1, 14, 12, 0),
      EndTime: new Date(2021, 1, 14, 13, 0),
      RecurrenceRule: 'FREQ=WEEKLY;INTERVAL=2;BYDAY=MO;COUNT=10',
      CategoryColor: '#1aaa55'
    }, {
      Id: 2,
      Subject: 'Scrum Meeting',
      Location: 'Office',
      StartTime: new Date(2021, 1, 12, 9, 30),
      EndTime: new Date(2021, 1, 12, 10, 30),
      RecurrenceRule: 'FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR;INTERVAL=1',
      CategoryColor: '#357cd2'
    }, {
      Id: 3,
      Subject: 'Meeting with Core team',
      Location: 'Office',
      StartTime: new Date(2021, 1, 16, 12, 0),
      EndTime: new Date(2021, 1, 16, 14, 0),
      RecurrenceRule: 'FREQ=WEEKLY;INTERVAL=1;BYDAY=FR',
      CategoryColor: '#7fa900'
    }, {
      Id: 4,
      Subject: 'Customer meeting – John Mackenzie',
      Location: 'Office',
      StartTime: new Date(2021, 1, 20, 11, 30),
      EndTime: new Date(2021, 1, 20, 13, 30),
      RecurrenceRule: 'FREQ=MONTHLY;BYMONTHDAY=20;INTERVAL=1;COUNT=5',
      CategoryColor: '#ea7a57'
    }, {
      Id: 5,
      Subject: 'Team Fun Activities',
      Location: 'Office',
      StartTime: new Date(2021, 1, 22),
      EndTime: new Date(2021, 1, 23),
      IsAllDay: true,
      RecurrenceRule: 'FREQ=YEARLY;BYDAY=TH;BYMONTH=2;BYSETPOS=4;INTERVAL=1;COUNT=10',
      CategoryColor: '#00bdae'
    }
  ];
  
  export let webinarData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Environment Day',
      Tags: 'Eco day, Forest conserving, Earth & its resources',
      Description: 'A day that creates awareness to promote the healthy planet and reduce the air pollution crisis on nature earth.',
      StartTime: new Date(2021, 1, 15, 9, 0),
      EndTime: new Date(2021, 1, 15, 14, 0),
      ImageName: 'environment-day',
      PrimaryColor: '#1aaa55',
      SecondaryColor: '#47bb76'
    }, {
      Id: 2,
      Subject: 'Health Day',
      Tags: 'Reduce mental stress, Follow good food habits',
      Description: 'A day that raises awareness on different health issues. It marks the anniversary of the foundation of WHO.',
      StartTime: new Date(2021, 1, 16, 9, 0),
      EndTime: new Date(2021, 1, 16, 14, 0),
      ImageName: 'health-day',
      PrimaryColor: '#357cd2',
      SecondaryColor: '#5d96db'
    }, {
      Id: 3,
      Subject: 'Cancer Day',
      Tags: 'Life threatening cancer effects, Palliative care',
      Description: 'A day that raises awareness on cancer and its preventive measures. Early detection saves life.',
      StartTime: new Date(2021, 1, 17, 9, 0),
      EndTime: new Date(2021, 1, 17, 14, 0),
      ImageName: 'cancer-day',
      PrimaryColor: '#7fa900',
      SecondaryColor: '#a4c932'
    }, {
      Id: 4,
      Subject: 'Happiness Day',
      Tags: 'Stress-free, Smile, Resolve frustration and bring happiness',
      Description: 'A general idea is to promote happiness and smile around the world.',
      StartTime: new Date(2021, 1, 18, 9, 0),
      EndTime: new Date(2021, 1, 18, 14, 0),
      ImageName: 'happiness-day',
      PrimaryColor: '#ea7a57',
      SecondaryColor: '#ee9478'
    }, {
      Id: 5,
      Subject: 'Tourism Day',
      Tags: 'Diverse cultural heritage, strengthen peace',
      Description: 'A day that raises awareness on the role of tourism and its effect on social and economic values.',
      StartTime: new Date(2021, 1, 19, 9, 0),
      EndTime: new Date(2021, 1, 19, 14, 0),
      ImageName: 'tourism-day',
      PrimaryColor: '#00bdae',
      SecondaryColor: '#32cabe'
    }
  ];
  
  export let doctorsEventData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Surgery - Andrew',
      EventType: 'Confirmed',
      StartTime: new Date(2021, 1, 15, 9, 0),
      EndTime: new Date(2021, 1, 15, 10, 0)
    }, {
      Id: 2,
      Subject: 'Consulting - John',
      EventType: 'Confirmed',
      StartTime: new Date(2021, 1, 15, 10, 0),
      EndTime: new Date(2021, 1, 15, 11, 30)
    }, {
      Id: 3,
      Subject: 'Therapy - Robert',
      EventType: 'Requested',
      StartTime: new Date(2021, 1, 15, 11, 30),
      EndTime: new Date(2021, 1, 15, 12, 30)
    }, {
      Id: 4,
      Subject: 'Observation - Steven',
      EventType: 'Confirmed',
      StartTime: new Date(2021, 1, 15, 12, 30),
      EndTime: new Date(2021, 1, 15, 13, 30)
    }, {
      Id: 5,
      Subject: 'Extraction - Nancy',
      EventType: 'Confirmed',
      StartTime: new Date(2021, 1, 15, 13, 30),
      EndTime: new Date(2021, 1, 15, 15, 0)
    }, {
      Id: 6,
      Subject: 'Surgery - Paul',
      EventType: 'New',
      StartTime: new Date(2021, 1, 16, 9, 0),
      EndTime: new Date(2021, 1, 16, 10, 0)
    }, {
      Id: 7,
      Subject: 'Extraction - Josephs',
      EventType: 'Confirmed',
      StartTime: new Date(2021, 1, 16, 10, 0),
      EndTime: new Date(2021, 1, 16, 11, 0)
    }, {
      Id: 8,
      Subject: 'Consulting - Mario',
      EventType: 'Confirmed',
      StartTime: new Date(2021, 1, 16, 11, 0),
      EndTime: new Date(2021, 1, 16, 12, 0)
    }, {
      Id: 9,
      Subject: 'Therapy - Saveley',
      EventType: 'Requested',
      StartTime: new Date(2021, 1, 16, 12, 0),
      EndTime: new Date(2021, 1, 16, 13, 30)
    }, {
      Id: 10,
      Subject: 'Observation - Cartrain',
      EventType: 'Confirmed',
      StartTime: new Date(2021, 1, 16, 13, 30),
      EndTime: new Date(2021, 1, 16, 15, 30)
    }, {
      Id: 11,
      Subject: 'Consulting - Yang',
      EventType: 'New',
      StartTime: new Date(2021, 1, 17, 9, 0),
      EndTime: new Date(2021, 1, 17, 10, 0)
    }, {
      Id: 12,
      Subject: 'Observation - Michael',
      EventType: 'New',
      StartTime: new Date(2021, 1, 17, 10, 0),
      EndTime: new Date(2021, 1, 17, 11, 30)
    }, {
      Id: 13,
      Subject: 'Surgery - Roland',
      EventType: 'Confirmed',
      StartTime: new Date(2021, 1, 17, 11, 30),
      EndTime: new Date(2021, 1, 17, 12, 30)
    }, {
      Id: 14,
      Subject: 'Extraction - Francisco',
      EventType: 'Requested',
      StartTime: new Date(2021, 1, 17, 12, 30),
      EndTime: new Date(2021, 1, 17, 13, 30)
    }, {
      Id: 15,
      Subject: 'Therapy - Henriette',
      EventType: 'Confirmed',
      StartTime: new Date(2021, 1, 17, 13, 30),
      EndTime: new Date(2021, 1, 17, 15, 0)
    }, {
      Id: 16,
      Subject: 'Observation - Bernardo',
      EventType: 'Confirmed',
      StartTime: new Date(2021, 1, 18, 9, 0),
      EndTime: new Date(2021, 1, 18, 10, 0)
    }, {
      Id: 17,
      Subject: 'Therapy - Wilson',
      EventType: 'Confirmed',
      StartTime: new Date(2021, 1, 18, 10, 0),
      EndTime: new Date(2021, 1, 18, 11, 0)
    }, {
      Id: 18,
      Subject: 'Consulting - Horst',
      EventType: 'Confirmed',
      StartTime: new Date(2021, 1, 18, 11, 0),
      EndTime: new Date(2021, 1, 18, 12, 0)
    }, {
      Id: 19,
      Subject: 'Surgery - Limeira',
      EventType: 'Requested',
      StartTime: new Date(2021, 1, 18, 12, 0),
      EndTime: new Date(2021, 1, 18, 13, 30)
    }, {
      Id: 20,
      Subject: 'Observation - Victoria',
      EventType: 'Requested',
      StartTime: new Date(2021, 1, 18, 13, 30),
      EndTime: new Date(2021, 1, 18, 15, 30)
    }, {
      Id: 21,
      Subject: 'Extraction - Afonso',
      EventType: 'Confirmed',
      StartTime: new Date(2021, 1, 19, 9, 0),
      EndTime: new Date(2021, 1, 19, 10, 0)
    }, {
      Id: 22,
      Subject: 'Extraction - Paula',
      EventType: 'New',
      StartTime: new Date(2021, 1, 19, 10, 0),
      EndTime: new Date(2021, 1, 19, 11, 0)
    }, {
      Id: 23,
      Subject: 'Observation - George',
      EventType: 'Requested',
      StartTime: new Date(2021, 1, 19, 11, 0),
      EndTime: new Date(2021, 1, 19, 12, 0)
    }, {
      Id: 24,
      Subject: 'Therapy - Smith',
      EventType: 'New',
      StartTime: new Date(2021, 1, 19, 12, 0),
      EndTime: new Date(2021, 1, 19, 13, 30)
    }, {
      Id: 25,
      Subject: 'Surgery - Jennifer',
      EventType: 'New',
      StartTime: new Date(2021, 1, 19, 13, 30),
      EndTime: new Date(2021, 1, 19, 15, 30)
    }
  ];
  
  export let resourceData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Workflow Analysis',
      StartTime: new Date(2021, 3, 1, 9, 30),
      EndTime: new Date(2021, 3, 1, 12, 0),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 2
    }, {
      Id: 2,
      Subject: 'Requirement planning',
      StartTime: new Date(2021, 3, 1, 12, 30),
      EndTime: new Date(2021, 3, 1, 14, 45),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 3,
      Subject: 'Quality Analysis',
      StartTime: new Date(2021, 3, 2, 10, 0),
      EndTime: new Date(2021, 3, 2, 12, 30),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 4,
      Subject: 'Resource planning',
      StartTime: new Date(2021, 3, 2, 13, 0),
      EndTime: new Date(2021, 3, 2, 15, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 5,
      Subject: 'Timeline estimation',
      StartTime: new Date(2021, 3, 3, 9, 0),
      EndTime: new Date(2021, 3, 3, 11, 30),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 6,
      Subject: 'Developers Meeting',
      StartTime: new Date(2021, 3, 3, 14, 0),
      EndTime: new Date(2021, 3, 3, 16, 45),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 2
    }, {
      Id: 7,
      Subject: 'Project Review',
      StartTime: new Date(2021, 3, 4, 11, 15),
      EndTime: new Date(2021, 3, 4, 13, 0),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 1
    }, {
      Id: 8,
      Subject: 'Manual testing',
      StartTime: new Date(2021, 3, 4, 9, 15),
      EndTime: new Date(2021, 3, 4, 11, 45),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 2
    }, {
      Id: 9,
      Subject: 'Project Preview',
      StartTime: new Date(2021, 3, 5, 9, 30),
      EndTime: new Date(2021, 3, 5, 12, 45),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 1
    }, {
      Id: 10,
      Subject: 'Cross-browser testing',
      StartTime: new Date(2021, 3, 5, 13, 45),
      EndTime: new Date(2021, 3, 5, 16, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 11,
      Subject: 'Bug Automation',
      StartTime: new Date(2021, 3, 6, 10, 0),
      EndTime: new Date(2021, 3, 6, 12, 15),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 12,
      Subject: 'Functionality testing',
      StartTime: new Date(2021, 3, 6, 9, 0),
      EndTime: new Date(2021, 3, 6, 11, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 13,
      Subject: 'Resolution-based testing',
      StartTime: new Date(2021, 3, 7, 13, 0),
      EndTime: new Date(2021, 3, 7, 15, 15),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 1
    }, {
      Id: 14,
      Subject: 'Test report validation',
      StartTime: new Date(2021, 3, 7, 9),
      EndTime: new Date(2021, 3, 7, 11),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 15,
      Subject: 'Test case correction',
      StartTime: new Date(2021, 3, 8, 9, 45),
      EndTime: new Date(2021, 3, 8, 11, 30),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 16,
      Subject: 'Run test cases',
      StartTime: new Date(2021, 3, 8, 10, 30),
      EndTime: new Date(2021, 3, 8, 13, 0),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 17,
      Subject: 'Quality Analysis',
      StartTime: new Date(2021, 3, 9, 12),
      EndTime: new Date(2021, 3, 9, 15, 30),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 18,
      Subject: 'Debugging',
      StartTime: new Date(2021, 3, 9, 9, 0),
      EndTime: new Date(2021, 3, 9, 11, 15),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 19,
      Subject: 'Exception handling',
      StartTime: new Date(2021, 3, 10, 10, 10),
      EndTime: new Date(2021, 3, 10, 13, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 20,
      Subject: 'Decoding',
      StartTime: new Date(2021, 3, 10, 10, 30),
      EndTime: new Date(2021, 3, 10, 12, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 21,
      Subject: 'Workflow Analysis',
      StartTime: new Date(2021, 3, 11, 9, 30),
      EndTime: new Date(2021, 3, 11, 11, 30),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 22,
      Subject: 'Requirement planning',
      StartTime: new Date(2021, 3, 11, 12, 30),
      EndTime: new Date(2021, 3, 11, 14, 45),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 2
    }, {
      Id: 23,
      Subject: 'Quality Analysis',
      StartTime: new Date(2021, 3, 12, 10),
      EndTime: new Date(2021, 3, 12, 12, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 1
    }, {
      Id: 24,
      Subject: 'Resource planning',
      StartTime: new Date(2021, 3, 12, 13),
      EndTime: new Date(2021, 3, 12, 14, 30),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 2
    }, {
      Id: 25,
      Subject: 'Timeline estimation',
      StartTime: new Date(2021, 3, 13, 9),
      EndTime: new Date(2021, 3, 13, 11),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 26,
      Subject: 'Developers Meeting',
      StartTime: new Date(2021, 3, 13, 14),
      EndTime: new Date(2021, 3, 13, 15, 45),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 2
    }, {
      Id: 27,
      Subject: 'Project Review',
      StartTime: new Date(2021, 3, 14, 11),
      EndTime: new Date(2021, 3, 14, 13),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 1
    }, {
      Id: 28,
      Subject: 'Manual testing',
      StartTime: new Date(2021, 3, 14, 9),
      EndTime: new Date(2021, 3, 14, 11, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 29,
      Subject: 'Project Preview',
      StartTime: new Date(2021, 3, 15, 9, 30),
      EndTime: new Date(2021, 3, 15, 11),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 1
    }, {
      Id: 30,
      Subject: 'Cross-browser testing',
      StartTime: new Date(2021, 3, 15, 14),
      EndTime: new Date(2021, 3, 15, 16, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 31,
      Subject: 'Bug Automation',
      StartTime: new Date(2021, 3, 16, 10),
      EndTime: new Date(2021, 3, 16, 11),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 32,
      Subject: 'Functionality testing',
      StartTime: new Date(2021, 3, 16, 9),
      EndTime: new Date(2021, 3, 16, 11, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 33,
      Subject: 'Resolution-based testing',
      StartTime: new Date(2021, 3, 17, 14),
      EndTime: new Date(2021, 3, 17, 15),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 1
    }, {
      Id: 34,
      Subject: 'Test report validation',
      StartTime: new Date(2021, 3, 17, 9),
      EndTime: new Date(2021, 3, 17, 11),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 2
    }, {
      Id: 35,
      Subject: 'Test case correction',
      StartTime: new Date(2021, 3, 18, 10),
      EndTime: new Date(2021, 3, 18, 11, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 1
    }, {
      Id: 36,
      Subject: 'Run test cases',
      StartTime: new Date(2021, 3, 18, 10),
      EndTime: new Date(2021, 3, 18, 10, 30),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 2
    }, {
      Id: 37,
      Subject: 'Bug fixing',
      StartTime: new Date(2021, 3, 9, 10),
      EndTime: new Date(2021, 3, 9, 10, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 1
    }, {
      Id: 38,
      Subject: 'Debugging',
      StartTime: new Date(2021, 3, 19, 9),
      EndTime: new Date(2021, 3, 19, 10, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 39,
      Subject: 'Exception handling',
      StartTime: new Date(2021, 3, 20, 10),
      EndTime: new Date(2021, 3, 20, 11),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 40,
      Subject: 'Decoding',
      StartTime: new Date(2021, 3, 20, 10, 30),
      EndTime: new Date(2021, 3, 20, 12, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 41,
      Subject: 'Workflow Analysis',
      StartTime: new Date(2021, 3, 21, 9, 30),
      EndTime: new Date(2021, 3, 21, 11, 30),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 42,
      Subject: 'Requirement planning',
      StartTime: new Date(2021, 3, 21, 12, 30),
      EndTime: new Date(2021, 3, 21, 13, 45),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 2
    }, {
      Id: 43,
      Subject: 'Quality Analysis',
      StartTime: new Date(2021, 3, 22, 10),
      EndTime: new Date(2021, 3, 22, 11, 30),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 44,
      Subject: 'Resource planning',
      StartTime: new Date(2021, 3, 4, 10),
      EndTime: new Date(2021, 3, 4, 12, 30),
      IsAllDay: false,
      ProjectId: 3,
      TaskId: 2
    }, {
      Id: 45,
      Subject: 'Timeline estimation',
      StartTime: new Date(2021, 3, 4, 9),
      EndTime: new Date(2021, 3, 4, 11),
      IsAllDay: false,
      ProjectId: 3,
      TaskId: 1
    }, {
      Id: 46,
      Subject: 'Developers Meeting',
      StartTime: new Date(2021, 3, 4, 14, 30),
      EndTime: new Date(2021, 3, 4, 16, 30),
      IsAllDay: false,
      ProjectId: 3,
      TaskId: 2
    }, {
      Id: 47,
      Subject: 'Project Review',
      StartTime: new Date(2021, 3, 4, 14),
      EndTime: new Date(2021, 3, 4, 16),
      IsAllDay: false,
      ProjectId: 3,
      TaskId: 1
    }, {
      Id: 48,
      Subject: 'Manual testing',
      StartTime: new Date(2021, 3, 4, 17, 30),
      EndTime: new Date(2021, 3, 4, 19, 30),
      IsAllDay: false,
      ProjectId: 3,
      TaskId: 2
    }, {
      Id: 49,
      Subject: 'Project Preview',
      StartTime: new Date(2021, 3, 4, 18, 0),
      EndTime: new Date(2021, 3, 4, 20),
      IsAllDay: false,
      ProjectId: 3,
      TaskId: 1
    }, {
      Id: 50,
      Subject: 'Cross-browser testing',
      StartTime: new Date(2021, 3, 25, 14),
      EndTime: new Date(2021, 3, 25, 15, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 51,
      Subject: 'Bug Automation',
      StartTime: new Date(2021, 3, 26, 10),
      EndTime: new Date(2021, 3, 26, 11),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 52,
      Subject: 'Functionality testing',
      StartTime: new Date(2021, 3, 26, 9),
      EndTime: new Date(2021, 3, 26, 11, 30),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 2
    }, {
      Id: 53,
      Subject: 'Resolution-based testing',
      StartTime: new Date(2021, 3, 27, 14),
      EndTime: new Date(2021, 3, 27, 15),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 1
    }, {
      Id: 54,
      Subject: 'Test report validation',
      StartTime: new Date(2021, 3, 27, 9),
      EndTime: new Date(2021, 3, 27, 11),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 55,
      Subject: 'Test case correction',
      StartTime: new Date(2021, 3, 28, 10),
      EndTime: new Date(2021, 3, 28, 11, 30),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 56,
      Subject: 'Run test cases',
      StartTime: new Date(2021, 3, 28, 10),
      EndTime: new Date(2021, 3, 28, 10, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 57,
      Subject: 'Bug fixing',
      StartTime: new Date(2021, 3, 29, 12),
      EndTime: new Date(2021, 3, 29, 12, 30),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 58,
      Subject: 'Debugging',
      StartTime: new Date(2021, 3, 29, 9),
      EndTime: new Date(2021, 3, 29, 10, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 59,
      Subject: 'Exception handling',
      StartTime: new Date(2021, 3, 30, 10),
      EndTime: new Date(2021, 3, 30, 11),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 1
    }, {
      Id: 60,
      Subject: 'Decoding',
      StartTime: new Date(2021, 3, 30, 10, 30),
      EndTime: new Date(2021, 3, 30, 12, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }
  ];
  
  export let timelineResourceData: Record<string, any>[] = [
    {
      Id: 61,
      Subject: 'Decoding',
      StartTime: new Date(2021, 3, 4, 9, 30),
      EndTime: new Date(2021, 3, 4, 10, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 2
    }, {
      Id: 62,
      Subject: 'Bug Automation',
      StartTime: new Date(2021, 3, 4, 16, 0),
      EndTime: new Date(2021, 3, 4, 20, 0),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 1
    }, {
      Id: 63,
      Subject: 'Functionality testing',
      StartTime: new Date(2021, 3, 4, 9),
      EndTime: new Date(2021, 3, 4, 10, 30),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 64,
      Subject: 'Resolution-based testing',
      StartTime: new Date(2021, 3, 4, 12),
      EndTime: new Date(2021, 3, 4, 15, 0),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 4
    }, {
      Id: 65,
      Subject: 'Test report validation',
      StartTime: new Date(2021, 3, 4, 15),
      EndTime: new Date(2021, 3, 4, 18),
      IsAllDay: false,
      ProjectId: 1,
      TaskId: 1
    }, {
      Id: 66,
      Subject: 'Test case correction',
      StartTime: new Date(2021, 3, 4, 14),
      EndTime: new Date(2021, 3, 4, 16),
      IsAllDay: false,
      ProjectId: 3,
      TaskId: 6
    }, {
      Id: 67,
      Subject: 'Bug fixing',
      StartTime: new Date(2021, 3, 4, 14, 30),
      EndTime: new Date(2021, 3, 4, 18, 30),
      IsAllDay: false,
      ProjectId: 3,
      TaskId: 5
    }, {
      Id: 68,
      Subject: 'Run test cases',
      StartTime: new Date(2021, 3, 4, 17, 30),
      EndTime: new Date(2021, 3, 4, 19, 30),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 4
    }, {
      Id: 70,
      Subject: 'Bug Automation',
      StartTime: new Date(2021, 3, 4, 16, 0),
      EndTime: new Date(2021, 3, 4, 20, 0),
      IsAllDay: false,
      ProjectId: 2,
      TaskId: 3
    }
  ];
  
  export let resourceTeamData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Developers Meeting',
      StartTime: new Date(2021, 5, 1, 10, 0),
      EndTime: new Date(2021, 5, 1, 11, 0),
      RecurrenceRule: 'FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,TU,WE,TH,FR',
      ProjectId: 1,
      CategoryId: 1
    }, {
      Id: 2,
      Subject: 'Test report validation',
      StartTime: new Date(2021, 5, 2, 10, 30),
      EndTime: new Date(2021, 5, 2, 13, 0),
      RecurrenceRule: 'FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,WE,FR',
      ProjectId: 1,
      CategoryId: 2
    }, {
      Id: 3,
      Subject: 'Requirement planning',
      StartTime: new Date(2021, 5, 4, 9, 30),
      EndTime: new Date(2021, 5, 4, 10, 45),
      ProjectId: 2,
      CategoryId: 1
    }, {
      Id: 4,
      Subject: 'Bug Automation',
      StartTime: new Date(2021, 5, 2, 11, 0),
      EndTime: new Date(2021, 5, 2, 13, 0),
      RecurrenceRule: 'FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,WE,FR',
      ProjectId: 2,
      CategoryId: 2
    }, {
      Id: 5,
      Subject: 'Timeline estimation',
      StartTime: new Date(2021, 5, 3, 10, 0),
      EndTime: new Date(2021, 5, 3, 12, 0),
      ProjectId: 1,
      CategoryId: 1
    }, {
      Id: 6,
      Subject: 'Timeline estimation',
      StartTime: new Date(2021, 5, 3, 13, 0),
      EndTime: new Date(2021, 5, 3, 15, 0),
      ProjectId: 2,
      CategoryId: 1
    }, {
      Id: 7,
      Subject: 'Functionality testing',
      StartTime: new Date(2021, 5, 4, 14, 0),
      EndTime: new Date(2021, 5, 4, 15, 30),
      ProjectId: 1,
      CategoryId: 2
    }, {
      Id: 8,
      Subject: 'Functionality testing',
      StartTime: new Date(2021, 5, 4, 19, 0),
      EndTime: new Date(2021, 5, 4, 21, 0),
      ProjectId: 2,
      CategoryId: 2
    }, {
      Id: 9,
      Subject: 'Workflow Analysis',
      StartTime: new Date(2021, 5, 5, 14, 0),
      EndTime: new Date(2021, 5, 5, 15, 30),
      ProjectId: 1,
      CategoryId: 1
    }, {
      Id: 10,
      Subject: 'Quality Analysis',
      StartTime: new Date(2021, 5, 5, 13, 0),
      EndTime: new Date(2021, 5, 5, 16, 0),
      ProjectId: 2,
      CategoryId: 1
    }, {
      Id: 11,
      Subject: 'Cross-browser testing',
      StartTime: new Date(2021, 5, 5, 14, 45),
      EndTime: new Date(2021, 5, 5, 16, 15),
      ProjectId: 1,
      CategoryId: 2
    }, {
      Id: 12,
      Subject: 'Resolution-based testing',
      StartTime: new Date(2021, 5, 5, 15, 0),
      EndTime: new Date(2021, 5, 5, 17, 30),
      ProjectId: 2,
      CategoryId: 2
    }, {
      Id: 13,
      Subject: 'Project Preview',
      StartTime: new Date(2021, 5, 8, 16, 0),
      EndTime: new Date(2021, 5, 8, 18, 0),
      ProjectId: 1,
      CategoryId: 1
    }, {
      Id: 14,
      Subject: 'Project Preview',
      StartTime: new Date(2021, 5, 8, 15, 0),
      EndTime: new Date(2021, 5, 8, 17, 30),
      ProjectId: 2,
      CategoryId: 1
    }, {
      Id: 15,
      Subject: 'Test report validation',
      StartTime: new Date(2021, 5, 8, 15, 30),
      EndTime: new Date(2021, 5, 8, 17, 45),
      ProjectId: 1,
      CategoryId: 2
    }, {
      Id: 16,
      Subject: 'Test report validation',
      StartTime: new Date(2021, 5, 8, 15, 0),
      EndTime: new Date(2021, 5, 8, 17, 0),
      ProjectId: 2,
      CategoryId: 2
    }, {
      Id: 17,
      Subject: 'Resource planning',
      StartTime: new Date(2021, 5, 6, 15, 0),
      EndTime: new Date(2021, 5, 6, 18, 0),
      ProjectId: 1,
      CategoryId: 1
    }, {
      Id: 18,
      Subject: 'Resource planning',
      StartTime: new Date(2021, 5, 7, 16, 0),
      EndTime: new Date(2021, 5, 7, 17, 0),
      ProjectId: 2,
      CategoryId: 1
    }, {
      Id: 19,
      Subject: 'Run test cases',
      StartTime: new Date(2021, 5, 7, 14, 0),
      EndTime: new Date(2021, 5, 7, 18, 0),
      ProjectId: 1,
      CategoryId: 2
    }, {
      Id: 20,
      Subject: 'Run test cases',
      StartTime: new Date(2021, 5, 6, 14, 0),
      EndTime: new Date(2021, 5, 6, 17, 30),
      ProjectId: 2,
      CategoryId: 2
    }, {
      Id: 21,
      Subject: 'Resource planning',
      StartTime: new Date(2021, 5, 7, 9, 30),
      EndTime: new Date(2021, 5, 7, 11, 30),
      ProjectId: 2,
      CategoryId: 1
    }, {
      Id: 22,
      Subject: 'Developers Meeting',
      StartTime: new Date(2021, 5, 1, 12, 0),
      EndTime: new Date(2021, 5, 1, 13, 0),
      RecurrenceRule: 'FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,TU,WE,TH,FR',
      ProjectId: 2,
      CategoryId: 1
    }
  ];
  
  export let resourceConferenceData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Burning Man',
      StartTime: new Date(2021, 5, 1, 15, 0),
      EndTime: new Date(2021, 5, 1, 17, 0),
      ConferenceId: [1, 2, 3]
    }, {
      Id: 2,
      Subject: 'Data-Driven Economy',
      StartTime: new Date(2021, 5, 2, 12, 0),
      EndTime: new Date(2021, 5, 2, 14, 0),
      ConferenceId: [1, 2]
    }, {
      Id: 3,
      Subject: 'Techweek',
      StartTime: new Date(2021, 5, 2, 15, 0),
      EndTime: new Date(2021, 5, 2, 17, 0),
      ConferenceId: [2, 3]
    }, {
      Id: 4,
      Subject: 'Content Marketing World',
      StartTime: new Date(2021, 5, 2, 18, 0),
      EndTime: new Date(2021, 5, 2, 20, 0),
      ConferenceId: [1, 3]
    }, {
      Id: 5,
      Subject: 'B2B Marketing Forum',
      StartTime: new Date(2021, 5, 3, 10, 0),
      EndTime: new Date(2021, 5, 3, 12, 0),
      ConferenceId: [1, 2, 3]
    }, {
      Id: 6,
      Subject: 'Business Innovation Factory',
      StartTime: new Date(2021, 5, 3, 13, 0),
      EndTime: new Date(2021, 5, 3, 15, 0),
      ConferenceId: [1, 2]
    }, {
      Id: 7,
      Subject: 'Grow Conference',
      StartTime: new Date(2021, 5, 3, 16, 0),
      EndTime: new Date(2021, 5, 3, 18, 0),
      ConferenceId: [2, 3]
    }, {
      Id: 8,
      Subject: 'Journalism Interactive',
      StartTime: new Date(2021, 5, 3, 19, 0),
      EndTime: new Date(2021, 5, 3, 21, 0),
      ConferenceId: [1, 3]
    }, {
      Id: 9,
      Subject: 'Blogcademy',
      StartTime: new Date(2021, 5, 4, 10, 0),
      EndTime: new Date(2021, 5, 4, 11, 30),
      ConferenceId: [1, 2, 3]
    }, {
      Id: 10,
      Subject: 'Sustainable Brands',
      StartTime: new Date(2021, 5, 4, 13, 0),
      EndTime: new Date(2021, 5, 4, 15, 30),
      ConferenceId: [1, 2]
    }, {
      Id: 11,
      Subject: 'Fashion Confidential',
      StartTime: new Date(2021, 5, 4, 9, 0),
      EndTime: new Date(2021, 5, 4, 9, 45),
      ConferenceId: [2, 3]
    }, {
      Id: 12,
      Subject: 'Mobile World Conference',
      StartTime: new Date(2021, 5, 5, 12, 0),
      EndTime: new Date(2021, 5, 5, 14, 0),
      ConferenceId: [1, 3]
    }, {
      Id: 13,
      Subject: 'The Human Gathering',
      StartTime: new Date(2021, 5, 5, 15, 0),
      EndTime: new Date(2021, 5, 5, 17, 0),
      ConferenceId: [1, 2, 3]
    }, {
      Id: 14,
      Subject: 'Web Summit',
      StartTime: new Date(2021, 5, 5, 18, 0),
      EndTime: new Date(2021, 5, 5, 20, 0),
      ConferenceId: [1, 2]
    }, {
      Id: 15,
      Subject: 'Funnel Hacking Live',
      StartTime: new Date(2021, 5, 6, 12, 0),
      EndTime: new Date(2021, 5, 6, 14, 0),
      ConferenceId: [1, 3]
    }, {
      Id: 16,
      Subject: 'Data Science Conference',
      StartTime: new Date(2021, 5, 6, 15, 0),
      EndTime: new Date(2021, 5, 6, 17, 0),
      ConferenceId: [2, 3]
    }, {
      Id: 17,
      Subject: 'Powerful Living Experience',
      StartTime: new Date(2021, 5, 6, 21, 0),
      EndTime: new Date(2021, 5, 6, 23, 30),
      ConferenceId: [1, 2, 3]
    }, {
      Id: 18,
      Subject: 'World Domination Summit',
      StartTime: new Date(2021, 5, 7, 12, 0),
      EndTime: new Date(2021, 5, 7, 14, 0),
      ConferenceId: [2, 3]
    }, {
      Id: 19,
      Subject: 'Burning Man',
      StartTime: new Date(2021, 5, 7, 15, 0),
      EndTime: new Date(2021, 5, 7, 17, 0),
      ConferenceId: [1, 3]
    }, {
      Id: 20,
      Subject: 'Data-Driven Economy',
      StartTime: new Date(2021, 5, 7, 18, 0),
      EndTime: new Date(2021, 5, 7, 20, 0),
      ConferenceId: [1, 2]
    }, {
      Id: 21,
      Subject: 'Techweek',
      StartTime: new Date(2021, 5, 8, 12, 0),
      EndTime: new Date(2021, 5, 8, 14, 0),
      ConferenceId: [1, 2, 3]
    }, {
      Id: 22,
      Subject: 'Content Marketing World',
      StartTime: new Date(2021, 5, 8, 15, 0),
      EndTime: new Date(2021, 5, 8, 17, 0),
      ConferenceId: [1, 2, 3]
    }, {
      Id: 23,
      Subject: 'B2B Marketing Forum',
      StartTime: new Date(2021, 5, 8, 20, 30),
      EndTime: new Date(2021, 5, 8, 21, 30),
      ConferenceId: [1, 3]
    }, {
      Id: 24,
      Subject: 'Business Innovation Factory',
      StartTime: new Date(2021, 5, 9, 12, 0),
      EndTime: new Date(2021, 5, 9, 14, 0),
      ConferenceId: [2, 3]
    }, {
      Id: 25,
      Subject: 'Grow Conference',
      StartTime: new Date(2021, 5, 9, 15, 0),
      EndTime: new Date(2021, 5, 9, 17, 0),
      ConferenceId: [1, 2]
    }, {
      Id: 26,
      Subject: 'Journalism Interactive',
      StartTime: new Date(2021, 5, 9, 18, 0),
      EndTime: new Date(2021, 5, 9, 20, 0),
      ConferenceId: [1, 2, 3]
    }, {
      Id: 27,
      Subject: 'Blogcademy',
      StartTime: new Date(2021, 5, 10, 12, 0),
      EndTime: new Date(2021, 5, 10, 14, 0),
      ConferenceId: [1, 3]
    }, {
      Id: 28,
      Subject: 'Sustainable Brands',
      StartTime: new Date(2021, 5, 10, 15, 0),
      EndTime: new Date(2021, 5, 10, 17, 0),
      ConferenceId: [2, 3]
    }, {
      Id: 29,
      Subject: 'Fashion Confidential',
      StartTime: new Date(2021, 5, 10, 18, 0),
      EndTime: new Date(2021, 5, 10, 20, 0),
      ConferenceId: [1, 2]
    }, {
      Id: 30,
      Subject: 'Mobile World Conference',
      StartTime: new Date(2021, 5, 11, 12, 0),
      EndTime: new Date(2021, 5, 11, 14, 0),
      ConferenceId: [1, 2, 3]
    }, {
      Id: 31,
      Subject: 'The Human Gathering',
      StartTime: new Date(2021, 5, 11, 15, 0),
      EndTime: new Date(2021, 5, 11, 17, 0),
      ConferenceId: [1, 2, 3]
    }, {
      Id: 32,
      Subject: 'Web Summit',
      StartTime: new Date(2021, 5, 11, 18, 0),
      EndTime: new Date(2021, 5, 11, 20, 0),
      ConferenceId: [3]
    }, {
      Id: 33,
      Subject: 'Funnel Hacking Live',
      StartTime: new Date(2021, 5, 12, 14, 0),
      EndTime: new Date(2021, 5, 12, 16, 0),
      ConferenceId: [1]
    }, {
      Id: 34,
      Subject: 'Data Science Conference',
      StartTime: new Date(2021, 5, 12, 14, 0),
      EndTime: new Date(2021, 5, 12, 16, 0),
      ConferenceId: [2]
    }, {
      Id: 35,
      Subject: 'Powerful Living Experience',
      StartTime: new Date(2021, 5, 12, 18, 0),
      EndTime: new Date(2021, 5, 12, 20, 0),
      ConferenceId: [1, 2]
    }, {
      Id: 36,
      Subject: 'World Domination Summit',
      StartTime: new Date(2021, 5, 12, 18, 0),
      EndTime: new Date(2021, 5, 12, 20, 0),
      ConferenceId: [3]
    }, {
      Id: 37,
      Subject: 'Burning Man',
      StartTime: new Date(2021, 5, 13, 14, 0),
      EndTime: new Date(2021, 5, 13, 16, 0),
      ConferenceId: [1, 3]
    }, {
      Id: 38,
      Subject: 'Data-Driven Economy',
      StartTime: new Date(2021, 5, 13, 14, 0),
      EndTime: new Date(2021, 5, 13, 16, 0),
      ConferenceId: [1]
    }, {
      Id: 39,
      Subject: 'Techweek',
      StartTime: new Date(2021, 5, 13, 18, 0),
      EndTime: new Date(2021, 5, 13, 20, 0),
      ConferenceId: [2, 3]
    }, {
      Id: 40,
      Subject: 'Content Marketing World',
      StartTime: new Date(2021, 5, 13, 18, 0),
      EndTime: new Date(2021, 5, 13, 20, 0),
      ConferenceId: [1, 2]
    }, {
      Id: 41,
      Subject: 'B2B Marketing Forum',
      StartTime: new Date(2021, 5, 14, 14, 0),
      EndTime: new Date(2021, 5, 14, 16, 0),
      ConferenceId: [1, 2, 3]
    }, {
      Id: 42,
      Subject: 'Business Innovation Factory',
      StartTime: new Date(2021, 5, 14, 14, 0),
      EndTime: new Date(2021, 5, 14, 16, 0),
      ConferenceId: [2, 3]
    }, {
      Id: 43,
      Subject: 'Grow Conference',
      StartTime: new Date(2021, 5, 14, 18, 0),
      EndTime: new Date(2021, 5, 14, 20, 0),
      ConferenceId: [3]
    }, {
      Id: 44,
      Subject: 'Journalism Interactive',
      StartTime: new Date(2021, 5, 14, 18, 0),
      EndTime: new Date(2021, 5, 14, 20, 0),
      ConferenceId: [1, 2, 3]
    }, {
      Id: 45,
      Subject: 'Blogcademy',
      StartTime: new Date(2021, 5, 15, 14, 0),
      EndTime: new Date(2021, 5, 15, 16, 0),
      ConferenceId: [1, 3]
    }, {
      Id: 46,
      Subject: 'Sustainable Brands',
      StartTime: new Date(2021, 5, 15, 14, 0),
      EndTime: new Date(2021, 5, 15, 16, 0),
      ConferenceId: [1, 3]
    }, {
      Id: 47,
      Subject: 'Fashion Confidential',
      StartTime: new Date(2021, 5, 15, 18, 0),
      EndTime: new Date(2021, 5, 15, 20, 0),
      ConferenceId: [1, 2]
    }, {
      Id: 48,
      Subject: 'Mobile World Conference',
      StartTime: new Date(2021, 5, 15, 18, 0),
      EndTime: new Date(2021, 5, 15, 20, 0),
      ConferenceId: [2, 3]
    }
  ];
  
  export let holidayData: Record<string, any>[] = [
    {
      Id: 401,
      Subject: 'Global Family Day',
      StartTime: new Date(2021, 0, 1),
      EndTime: new Date(2021, 0, 2),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 402,
      Subject: 'World Braille Day',
      StartTime: new Date(2021, 0, 4),
      EndTime: new Date(2021, 0, 5),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 403,
      Subject: 'World Literary Day',
      StartTime: new Date(2021, 0, 8),
      EndTime: new Date(2021, 0, 9),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 404,
      Subject: 'International Thank-You Day',
      StartTime: new Date(2021, 0, 11),
      EndTime: new Date(2021, 0, 12),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 405,
      Subject: 'World Leprosy Day',
      StartTime: new Date(2021, 0, 30),
      EndTime: new Date(2021, 0, 31),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 406,
      Subject: 'Darwin Day',
      StartTime: new Date(2021, 1, 12),
      EndTime: new Date(2021, 1, 13),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 407,
      Subject: 'International Mother Language Day',
      StartTime: new Date(2021, 1, 21),
      EndTime: new Date(2021, 1, 22),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 408,
      Subject: 'World Thinking Day',
      StartTime: new Date(2021, 1, 22),
      EndTime: new Date(2021, 1, 23),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 409,
      Subject: 'International Day of the Seal',
      StartTime: new Date(2021, 2, 1),
      EndTime: new Date(2021, 2, 2),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 410,
      Subject: 'International Women’s Day',
      StartTime: new Date(2021, 2, 8),
      EndTime: new Date(2021, 2, 9),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 411,
      Subject: 'World Book Day',
      StartTime: new Date(2021, 2, 14),
      EndTime: new Date(2021, 2, 15),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 412,
      Subject: 'World Frog Day',
      StartTime: new Date(2021, 2, 20),
      EndTime: new Date(2021, 2, 21),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 413,
      Subject: 'World Down Syndrome Day',
      StartTime: new Date(2021, 2, 21),
      EndTime: new Date(2021, 2, 22),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 414,
      Subject: 'World Day for Water',
      StartTime: new Date(2021, 2, 22),
      EndTime: new Date(2021, 2, 23),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 415,
      Subject: 'World Meteorological Day',
      StartTime: new Date(2021, 2, 23),
      EndTime: new Date(2021, 2, 24),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 416,
      Subject: 'International Children’s Book Day',
      StartTime: new Date(2021, 3, 2),
      EndTime: new Date(2021, 3, 3),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 417,
      Subject: 'World Health Day',
      StartTime: new Date(2021, 3, 7),
      EndTime: new Date(2021, 3, 8),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 418,
      Subject: 'International Special Librarian’s',
      StartTime: new Date(2021, 3, 13),
      EndTime: new Date(2021, 3, 14),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 419,
      Subject: 'International Creativity and Innovation Day',
      StartTime: new Date(2021, 3, 21),
      EndTime: new Date(2021, 3, 22),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 420,
      Subject: 'Earth Day',
      StartTime: new Date(2021, 3, 22),
      EndTime: new Date(2021, 3, 23),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 421,
      Subject: 'World Copyright Day',
      StartTime: new Date(2021, 3, 23),
      EndTime: new Date(2021, 3, 24),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 422,
      Subject: 'World Penguin Day',
      StartTime: new Date(2021, 3, 25),
      EndTime: new Date(2021, 3, 26),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 423,
      Subject: 'World Press Freedom Day',
      StartTime: new Date(2021, 4, 3),
      EndTime: new Date(2021, 4, 4),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 424,
      Subject: 'International Midwives Day',
      StartTime: new Date(2021, 4, 5),
      EndTime: new Date(2021, 4, 5),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 425,
      Subject: 'World Red Cross Day',
      StartTime: new Date(2021, 4, 8),
      EndTime: new Date(2021, 4, 9),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 426,
      Subject: 'World Lupus Day',
      StartTime: new Date(2021, 4, 10),
      EndTime: new Date(2021, 4, 11),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 427,
      Subject: 'International Nurses Day',
      StartTime: new Date(2021, 4, 12),
      EndTime: new Date(2021, 4, 12),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 428,
      Subject: 'IEEE Global Engineering Day',
      StartTime: new Date(2021, 4, 13),
      EndTime: new Date(2021, 4, 14),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 429,
      Subject: 'International Day of Families',
      StartTime: new Date(2021, 4, 15),
      EndTime: new Date(2021, 4, 16),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 430,
      Subject: 'International Museum Day',
      StartTime: new Date(2021, 4, 18),
      EndTime: new Date(2021, 4, 19),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 431,
      Subject: 'World Turtle Day',
      StartTime: new Date(2021, 4, 23),
      EndTime: new Date(2021, 4, 24),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 432,
      Subject: 'World No-Tobacco Day',
      StartTime: new Date(2021, 4, 31),
      EndTime: new Date(2021, 5, 1),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 433,
      Subject: 'World Ocean Day',
      StartTime: new Date(2021, 5, 8),
      EndTime: new Date(2021, 5, 9),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 434,
      Subject: 'World Blood Donor Day',
      StartTime: new Date(2021, 5, 14),
      EndTime: new Date(2021, 5, 15),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 435,
      Subject: 'World Day to Combat Desertification & Drought',
      StartTime: new Date(2021, 5, 17),
      EndTime: new Date(2021, 5, 18),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 436,
      Subject: 'World Refugee Day',
      StartTime: new Date(2021, 5, 20),
      EndTime: new Date(2021, 5, 21),
      IsAllDay: true,
      CalendarId: 4
    }, {
      Id: 437,
      Subject: 'International Day Against Drug Abuse & Trafficking',
      StartTime: new Date(2021, 5, 26),
      EndTime: new Date(2021, 5, 27),
      IsAllDay: true,
      CalendarId: 4
    }
  ];
  
  export let birthdayData: Record<string, any>[] = [
    {
      Id: 301,
      Subject: 'Gladys Spellman',
      StartTime: new Date(2021, 2, 1),
      EndTime: new Date(2021, 2, 2),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 302,
      Subject: 'Susanna Salter',
      StartTime: new Date(2021, 2, 2),
      EndTime: new Date(2021, 2, 3),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 303,
      Subject: 'Dora Marsden',
      StartTime: new Date(2021, 2, 5),
      EndTime: new Date(2021, 2, 6),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 304,
      Subject: 'Anne Bonny',
      StartTime: new Date(2021, 2, 8),
      EndTime: new Date(2021, 2, 9),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 305,
      Subject: 'Clare Boothe Luce',
      StartTime: new Date(2021, 2, 10),
      EndTime: new Date(2021, 2, 11),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 306,
      Subject: 'Ethel Anderson',
      StartTime: new Date(2021, 2, 16),
      EndTime: new Date(2021, 2, 17),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 307,
      Subject: 'Louise Otto-Peters',
      StartTime: new Date(2021, 2, 26),
      EndTime: new Date(2021, 2, 27),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 308,
      Subject: 'Faith Leech',
      StartTime: new Date(2021, 2, 31),
      EndTime: new Date(2021, 3, 1),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 309,
      Subject: 'Wilhelmine Reichard',
      StartTime: new Date(2021, 3, 2),
      EndTime: new Date(2021, 3, 3),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 310,
      Subject: 'Janet Rowley',
      StartTime: new Date(2021, 3, 5),
      EndTime: new Date(2021, 3, 6),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 311,
      Subject: 'Kathleen Major',
      StartTime: new Date(2021, 3, 10),
      EndTime: new Date(2021, 3, 11),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 312,
      Subject: 'Kasturba Gandhi',
      StartTime: new Date(2021, 3, 11),
      EndTime: new Date(2021, 3, 12),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 313,
      Subject: 'Elizabeth Huckaby',
      StartTime: new Date(2021, 3, 14),
      EndTime: new Date(2021, 3, 15),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 314,
      Subject: 'Helene Hanff',
      StartTime: new Date(2021, 3, 15),
      EndTime: new Date(2021, 3, 16),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 315,
      Subject: 'Caresse Crosby',
      StartTime: new Date(2021, 3, 20),
      EndTime: new Date(2021, 3, 21),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 316,
      Subject: 'Angela Burdett-Coutts',
      StartTime: new Date(2021, 3, 21),
      EndTime: new Date(2021, 3, 22),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 317,
      Subject: 'Pandita Ramabai',
      StartTime: new Date(2021, 3, 23),
      EndTime: new Date(2021, 3, 24),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 318,
      Subject: 'Melissa Hayden',
      StartTime: new Date(2021, 3, 25),
      EndTime: new Date(2021, 3, 26),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 319,
      Subject: 'Mary Wollstonecraft',
      StartTime: new Date(2021, 3, 27),
      EndTime: new Date(2021, 3, 28),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 320,
      Subject: 'Mary Petty',
      StartTime: new Date(2021, 3, 29),
      EndTime: new Date(2021, 3, 30),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 321,
      Subject: 'Doris Fisher',
      StartTime: new Date(2021, 4, 2),
      EndTime: new Date(2021, 4, 3),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 322,
      Subject: 'Kay Petre',
      StartTime: new Date(2021, 4, 10),
      EndTime: new Date(2021, 4, 11),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 323,
      Subject: 'Williamina Fleming',
      StartTime: new Date(2021, 4, 15),
      EndTime: new Date(2021, 4, 16),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 324,
      Subject: 'Ondina Valla',
      StartTime: new Date(2021, 4, 20),
      EndTime: new Date(2021, 4, 21),
      IsAllDay: true,
      CalendarId: 3
    }, {
      Id: 325,
      Subject: 'Marie Menken',
      StartTime: new Date(2021, 4, 25),
      EndTime: new Date(2021, 4, 26),
      IsAllDay: true,
      CalendarId: 3
    }
  ];
  
  export let companyData: Record<string, any>[] = [
    {
      Id: 201,
      Subject: 'Conference meeting',
      StartTime: new Date(2021, 2, 1),
      EndTime: new Date(2021, 2, 2),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 202,
      Subject: 'Product discussion',
      StartTime: new Date(2021, 2, 4),
      EndTime: new Date(2021, 2, 5),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 203,
      Subject: 'Companys growth related discussion',
      StartTime: new Date(2021, 2, 8),
      EndTime: new Date(2021, 2, 9),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 204,
      Subject: 'Customer issues',
      StartTime: new Date(2021, 2, 11),
      EndTime: new Date(2021, 2, 12),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 205,
      Subject: 'Development related chat',
      StartTime: new Date(2021, 2, 13),
      EndTime: new Date(2021, 2, 14),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 206,
      Subject: 'Product meeting',
      StartTime: new Date(2021, 2, 18),
      EndTime: new Date(2021, 2, 19),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 207,
      Subject: 'General discussion',
      StartTime: new Date(2021, 2, 21),
      EndTime: new Date(2021, 2, 22),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 208,
      Subject: 'Hike discussion',
      StartTime: new Date(2021, 2, 24),
      EndTime: new Date(2021, 2, 25),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 209,
      Subject: 'Customer meeting',
      StartTime: new Date(2021, 2, 28),
      EndTime: new Date(2021, 2, 29),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 210,
      Subject: 'New launch discussion',
      StartTime: new Date(2021, 2, 30),
      EndTime: new Date(2021, 2, 31),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 211,
      Subject: 'Conference Meeting',
      StartTime: new Date(2021, 3, 1),
      EndTime: new Date(2021, 3, 2),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 212,
      Subject: 'Product Discussion',
      StartTime: new Date(2021, 3, 3),
      EndTime: new Date(2021, 3, 4),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 213,
      Subject: 'Companys growth related issues',
      StartTime: new Date(2021, 3, 7),
      EndTime: new Date(2021, 3, 8),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 214,
      Subject: 'Customer issues',
      StartTime: new Date(2021, 3, 12),
      EndTime: new Date(2021, 3, 13),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 215,
      Subject: 'Development related chat',
      StartTime: new Date(2021, 3, 15),
      EndTime: new Date(2021, 3, 16),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 216,
      Subject: 'Product meeting',
      StartTime: new Date(2021, 3, 18),
      EndTime: new Date(2021, 3, 19),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 217,
      Subject: 'General discussion',
      StartTime: new Date(2021, 3, 21),
      EndTime: new Date(2021, 3, 22),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 218,
      Subject: 'Hike discussion',
      StartTime: new Date(2021, 3, 24),
      EndTime: new Date(2021, 3, 25),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 219,
      Subject: 'Customer meeting',
      StartTime: new Date(2021, 3, 26),
      EndTime: new Date(2021, 3, 27),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 220,
      Subject: 'New launch discussion',
      StartTime: new Date(2021, 3, 29),
      EndTime: new Date(2021, 3, 30),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 221,
      Subject: 'Conference Meeting',
      StartTime: new Date(2021, 4, 1),
      EndTime: new Date(2021, 4, 2),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 222,
      Subject: 'Product Discussion',
      StartTime: new Date(2021, 4, 3),
      EndTime: new Date(2021, 4, 4),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 223,
      Subject: 'Companys growth related issues',
      StartTime: new Date(2021, 4, 9),
      EndTime: new Date(2021, 4, 10),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 224,
      Subject: 'Customer issues',
      StartTime: new Date(2021, 4, 13),
      EndTime: new Date(2021, 4, 14),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 225,
      Subject: 'Development related chat',
      StartTime: new Date(2021, 4, 15),
      EndTime: new Date(2021, 4, 16),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 226,
      Subject: 'Product meeting',
      StartTime: new Date(2021, 4, 18),
      EndTime: new Date(2021, 4, 19),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 227,
      Subject: 'General discussion',
      StartTime: new Date(2021, 4, 21),
      EndTime: new Date(2021, 4, 22),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 228,
      Subject: 'Hike discussion',
      StartTime: new Date(2021, 4, 24),
      EndTime: new Date(2021, 4, 25),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 229,
      Subject: 'Customer meeting',
      StartTime: new Date(2021, 4, 26),
      EndTime: new Date(2021, 4, 27),
      IsAllDay: true,
      CalendarId: 2
    }, {
      Id: 230,
      Subject: 'New launch discussion',
      StartTime: new Date(2021, 4, 29),
      EndTime: new Date(2021, 4, 30),
      IsAllDay: true,
      CalendarId: 2
    }
  ];
  
  export let personalData: Record<string, any>[] = [
    {
      Id: 101,
      Subject: 'Father Birthday',
      StartTime: new Date(2021, 2, 1),
      EndTime: new Date(2021, 2, 2),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 102,
      Subject: 'Engagement day',
      StartTime: new Date(2021, 2, 4),
      EndTime: new Date(2021, 2, 5),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 103,
      Subject: 'Wedding day',
      StartTime: new Date(2021, 2, 8),
      EndTime: new Date(2021, 2, 9),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 104,
      Subject: 'Mother Birthday',
      StartTime: new Date(2021, 2, 11),
      EndTime: new Date(2021, 2, 12),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 105,
      Subject: 'Peter`s Wedding Day',
      StartTime: new Date(2021, 2, 13),
      EndTime: new Date(2021, 2, 14),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 106,
      Subject: 'Family Trip',
      StartTime: new Date(2021, 2, 18),
      EndTime: new Date(2021, 2, 19),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 107,
      Subject: 'Cousin Wedding Ceremony',
      StartTime: new Date(2021, 2, 21),
      EndTime: new Date(2021, 2, 22),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 108,
      Subject: 'Family Meetup',
      StartTime: new Date(2021, 2, 24),
      EndTime: new Date(2021, 2, 25),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 109,
      Subject: 'Grandfather Birthday',
      StartTime: new Date(2021, 2, 28),
      EndTime: new Date(2021, 2, 29),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 110,
      Subject: 'Sister-in-law Wedding Ceremony',
      StartTime: new Date(2021, 2, 30),
      EndTime: new Date(2021, 2, 31),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 111,
      Subject: 'Family Meetup',
      StartTime: new Date(2021, 3, 1),
      EndTime: new Date(2021, 3, 2),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 112,
      Subject: 'Grandparent Wedding Day',
      StartTime: new Date(2021, 3, 3),
      EndTime: new Date(2021, 3, 4),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 113,
      Subject: 'Cousin Wedding Ceremony',
      StartTime: new Date(2021, 3, 7),
      EndTime: new Date(2021, 3, 8),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 114,
      Subject: 'Family Vacation Trip',
      StartTime: new Date(2021, 3, 12),
      EndTime: new Date(2021, 3, 13),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 115,
      Subject: 'Brother-in-law Birthday',
      StartTime: new Date(2021, 3, 15),
      EndTime: new Date(2021, 3, 16),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 116,
      Subject: 'Brother`s Birthday',
      StartTime: new Date(2021, 3, 18),
      EndTime: new Date(2021, 3, 19),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 117,
      Subject: 'Sister Wedding Anniversary',
      StartTime: new Date(2021, 3, 21),
      EndTime: new Date(2021, 3, 22),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 118,
      Subject: 'Family Vacation Trip',
      StartTime: new Date(2021, 3, 24),
      EndTime: new Date(2021, 3, 25),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 119,
      Subject: 'Wedding Anniversary',
      StartTime: new Date(2021, 3, 26),
      EndTime: new Date(2021, 3, 27),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 120,
      Subject: 'Month end trip',
      StartTime: new Date(2021, 3, 29),
      EndTime: new Date(2021, 3, 30),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 121,
      Subject: 'John Birthday',
      StartTime: new Date(2021, 4, 1),
      EndTime: new Date(2021, 4, 2),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 122,
      Subject: 'Vishnu Birthday',
      StartTime: new Date(2021, 4, 3),
      EndTime: new Date(2021, 4, 4),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 123,
      Subject: 'Family Trip',
      StartTime: new Date(2021, 4, 9),
      EndTime: new Date(2021, 4, 10),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 124,
      Subject: 'Revanth Wedding Anniversary',
      StartTime: new Date(2021, 4, 13),
      EndTime: new Date(2021, 4, 14),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 125,
      Subject: 'Family Meetup',
      StartTime: new Date(2021, 4, 15),
      EndTime: new Date(2021, 4, 16),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 126,
      Subject: 'Family get-together',
      StartTime: new Date(2021, 4, 18),
      EndTime: new Date(2021, 4, 19),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 127,
      Subject: 'Friends Reunion',
      StartTime: new Date(2021, 4, 21),
      EndTime: new Date(2021, 4, 22),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 128,
      Subject: 'Rahul Wedding Anniversary Celebration',
      StartTime: new Date(2021, 4, 24),
      EndTime: new Date(2021, 4, 25),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 129,
      Subject: 'Vacation Trip with friends',
      StartTime: new Date(2021, 4, 26),
      EndTime: new Date(2021, 4, 27),
      IsAllDay: true,
      CalendarId: 1
    }, {
      Id: 130,
      Subject: 'Friends Reunion',
      StartTime: new Date(2021, 4, 29),
      EndTime: new Date(2021, 4, 30),
      IsAllDay: true,
      CalendarId: 1
    }
  ];
  
  export let doctorData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Echocardiogram',
      StartTime: new Date(2021, 3, 1, 9, 30),
      EndTime: new Date(2021, 3, 1, 11, 30),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 2,
      Subject: 'Lumbar punctures',
      StartTime: new Date(2021, 3, 2, 9, 30),
      EndTime: new Date(2021, 3, 2, 10, 45),
      IsAllDay: false,
      DoctorId: 2
    }, {
      Id: 3,
      Subject: 'Osteoarthritis',
      StartTime: new Date(2021, 3, 1, 8),
      EndTime: new Date(2021, 3, 1, 10, 30),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 4,
      Subject: 'Ambulatory ECG',
      StartTime: new Date(2021, 3, 2, 12),
      EndTime: new Date(2021, 3, 2, 12, 30),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 5,
      Subject: 'Osteoporosis',
      StartTime: new Date(2021, 3, 2, 11),
      EndTime: new Date(2021, 3, 2, 11, 50),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 6,
      Subject: 'Neuromuscular',
      StartTime: new Date(2021, 3, 5, 11, 30),
      EndTime: new Date(2021, 3, 5, 13, 30),
      IsAllDay: false,
      DoctorId: 2
    }, {
      Id: 7,
      Subject: 'Rheumatoid arthritis',
      StartTime: new Date(2021, 3, 5, 13, 40),
      EndTime: new Date(2021, 3, 5, 14, 40),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 8,
      Subject: 'Cardiac Catheterization',
      StartTime: new Date(2021, 3, 5, 11, 30),
      EndTime: new Date(2021, 3, 5, 13),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 9,
      Subject: 'Growth abnormalities',
      StartTime: new Date(2021, 3, 6, 14),
      EndTime: new Date(2021, 3, 6, 15, 30),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 10,
      Subject: 'Sleep disorders',
      StartTime: new Date(2021, 3, 7, 12),
      EndTime: new Date(2021, 3, 7, 14),
      IsAllDay: false,
      DoctorId: 2
    }, {
      Id: 11,
      Subject: 'Torn ligaments',
      StartTime: new Date(2021, 3, 7, 13, 30),
      EndTime: new Date(2021, 3, 7, 14, 45),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 12,
      Subject: 'Coronary angiogram',
      StartTime: new Date(2021, 3, 6, 8),
      EndTime: new Date(2021, 3, 6, 9, 30),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 13,
      Subject: 'Blood pressure',
      StartTime: new Date(2021, 3, 8, 12),
      EndTime: new Date(2021, 3, 8, 12, 30),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 14,
      Subject: 'Radiculopathy',
      StartTime: new Date(2021, 3, 9, 15, 45),
      EndTime: new Date(2021, 3, 9, 16, 30),
      IsAllDay: false,
      DoctorId: 2
    }, {
      Id: 15,
      Subject: 'Sprains and strains',
      StartTime: new Date(2021, 3, 8, 14),
      EndTime: new Date(2021, 3, 8, 15, 30),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 16,
      Subject: 'Cardiac stress testing',
      StartTime: new Date(2021, 3, 9, 10),
      EndTime: new Date(2021, 3, 9, 10, 30),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 17,
      Subject: 'Tendon injuries',
      StartTime: new Date(2021, 3, 9, 14),
      EndTime: new Date(2021, 3, 9, 15, 30),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 18,
      Subject: 'Dementia',
      StartTime: new Date(2021, 3, 12, 15),
      EndTime: new Date(2021, 3, 12, 17),
      IsAllDay: false,
      DoctorId: 2
    }, {
      Id: 19,
      Subject: 'Pulled muscles',
      StartTime: new Date(2021, 3, 12, 13, 30),
      EndTime: new Date(2021, 3, 12, 15, 50),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 20,
      Subject: 'Coronary angiogram',
      StartTime: new Date(2021, 3, 12, 10, 30),
      EndTime: new Date(2021, 3, 12, 12, 30),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 21,
      Subject: 'Back pain',
      StartTime: new Date(2021, 3, 13, 10, 30),
      EndTime: new Date(2021, 3, 13, 11, 30),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 22,
      Subject: 'Neuropathy',
      StartTime: new Date(2021, 3, 14, 12, 30),
      EndTime: new Date(2021, 3, 14, 13, 45),
      IsAllDay: false,
      DoctorId: 2
    }, {
      Id: 23,
      Subject: 'Ruptured disks',
      StartTime: new Date(2021, 3, 14, 13),
      EndTime: new Date(2021, 3, 14, 15, 50),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 24,
      Subject: 'Atherosclerosis',
      StartTime: new Date(2021, 3, 13, 10),
      EndTime: new Date(2021, 3, 13, 12, 30),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 25,
      Subject: 'Arthroplasty',
      StartTime: new Date(2021, 3, 15, 9),
      EndTime: new Date(2021, 3, 15, 10),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 26,
      Subject: 'Hyperactivity disorder',
      StartTime: new Date(2021, 3, 16, 14),
      EndTime: new Date(2021, 3, 16, 15, 45),
      IsAllDay: false,
      DoctorId: 2
    }, {
      Id: 27,
      Subject: 'Muscular dystrophy',
      StartTime: new Date(2021, 3, 15, 13, 10),
      EndTime: new Date(2021, 3, 15, 15, 20),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 28,
      Subject: 'Consulting',
      StartTime: new Date(2021, 3, 16, 9, 20),
      EndTime: new Date(2021, 3, 16, 10, 30),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 29,
      Subject: 'Hand surgery',
      StartTime: new Date(2021, 3, 16, 13, 20),
      EndTime: new Date(2021, 3, 16, 15, 22),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 30,
      Subject: 'Neuromuscular',
      StartTime: new Date(2021, 3, 19, 14),
      EndTime: new Date(2021, 3, 19, 15, 40),
      IsAllDay: false,
      DoctorId: 2
    }, {
      Id: 31,
      Subject: 'Spine surgery',
      StartTime: new Date(2021, 3, 19, 12, 18),
      EndTime: new Date(2021, 3, 19, 14, 23),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 32,
      Subject: 'Fibrinogen',
      StartTime: new Date(2021, 3, 19, 9),
      EndTime: new Date(2021, 3, 19, 12, 30),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 33,
      Subject: 'Bone tumors',
      StartTime: new Date(2021, 3, 20, 10, 45),
      EndTime: new Date(2021, 3, 20, 12, 20),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 34,
      Subject: 'Neuromuscular',
      StartTime: new Date(2021, 3, 21, 13),
      EndTime: new Date(2021, 3, 21, 17),
      IsAllDay: false,
      DoctorId: 2
    }, {
      Id: 35,
      Subject: 'Osteoporosis',
      StartTime: new Date(2021, 3, 21, 11, 45),
      EndTime: new Date(2021, 3, 21, 14, 30),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 36,
      Subject: 'Triglyceride',
      StartTime: new Date(2021, 3, 20, 9, 30),
      EndTime: new Date(2021, 3, 20, 10, 45),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 37,
      Subject: 'Fibrinogen',
      StartTime: new Date(2021, 3, 22, 8),
      EndTime: new Date(2021, 3, 22, 12, 30),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 38,
      Subject: 'Head trauma',
      StartTime: new Date(2021, 3, 23, 12),
      EndTime: new Date(2021, 3, 23, 15),
      IsAllDay: false,
      DoctorId: 2
    }, {
      Id: 39,
      Subject: 'Arthroplasty',
      StartTime: new Date(2021, 3, 22, 12, 18),
      EndTime: new Date(2021, 3, 22, 13, 22),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 40,
      Subject: 'Echocardiogram',
      StartTime: new Date(2021, 3, 23, 10, 30),
      EndTime: new Date(2021, 3, 23, 12, 40),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 41,
      Subject: 'Skull reconstruction',
      StartTime: new Date(2021, 3, 23, 13, 20),
      EndTime: new Date(2021, 3, 23, 15, 45),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 42,
      Subject: 'Dementia',
      StartTime: new Date(2021, 3, 26, 12, 30),
      EndTime: new Date(2021, 3, 26, 16, 45),
      IsAllDay: false,
      DoctorId: 2
    }, {
      Id: 43,
      Subject: 'Orthopedic trauma',
      StartTime: new Date(2021, 3, 26, 10, 18),
      EndTime: new Date(2021, 3, 26, 12, 20),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 44,
      Subject: 'Blood pressure',
      StartTime: new Date(2021, 3, 26, 10, 50),
      EndTime: new Date(2021, 3, 26, 12, 30),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 45,
      Subject: 'Ruptured disks',
      StartTime: new Date(2021, 3, 27, 12, 50),
      EndTime: new Date(2021, 3, 27, 15, 20),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 46,
      Subject: 'Head trauma',
      StartTime: new Date(2021, 3, 28, 11, 50),
      EndTime: new Date(2021, 3, 28, 12, 45),
      IsAllDay: false,
      DoctorId: 2
    }, {
      Id: 47,
      Subject: 'Cerebral palsy',
      StartTime: new Date(2021, 3, 28, 14, 50),
      EndTime: new Date(2021, 3, 28, 15, 50),
      IsAllDay: false,
      DoctorId: 3
    }, {
      Id: 48,
      Subject: 'Consulting',
      StartTime: new Date(2021, 3, 27, 9),
      EndTime: new Date(2021, 3, 27, 11, 30),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 49,
      Subject: 'Electrocardiogram',
      StartTime: new Date(2021, 3, 30, 9, 30),
      EndTime: new Date(2021, 3, 30, 11, 50),
      IsAllDay: false,
      DoctorId: 1
    }, {
      Id: 50,
      Subject: 'Radiculopathy',
      StartTime: new Date(2021, 3, 30, 14),
      EndTime: new Date(2021, 3, 30, 15, 30),
      IsAllDay: false,
      DoctorId: 2
    }, {
      Id: 51,
      Subject: 'Skull reconstruction',
      StartTime: new Date(2021, 3, 30, 14),
      EndTime: new Date(2021, 3, 30, 16),
      IsAllDay: false,
      DoctorId: 3
    }
  ];
  
  export let resAirlinesData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: '#SG 208 Greenville - Washington',
      StartTime: new Date(2021, 3, 2, 10, 0),
      EndTime: new Date(2021, 3, 2, 12, 30),
      IsAllDay: false,
      AirlineId: 1
    }, {
      Id: 2,
      Subject: '#IT 188 Washington - Arizona',
      StartTime: new Date(2021, 3, 2, 4, 0),
      EndTime: new Date(2021, 3, 2, 5, 0),
      IsAllDay: false,
      AirlineId: 3
    }, {
      Id: 3,
      Subject: '#SG 300 Chicago - Nevada',
      StartTime: new Date(2021, 3, 2, 11, 0),
      EndTime: new Date(2021, 3, 2, 13, 0),
      IsAllDay: false,
      AirlineId: 2
    }, {
      Id: 4,
      Subject: '#IT 306 Washington - Newport',
      StartTime: new Date(2021, 3, 4, 4, 0),
      EndTime: new Date(2021, 3, 4, 5, 0),
      IsAllDay: false,
      AirlineId: 1
    }, {
      Id: 5,
      Subject: '#AI 520 Washington - Chicago',
      StartTime: new Date(2021, 3, 3, 10, 30),
      EndTime: new Date(2021, 3, 3, 12, 30),
      IsAllDay: false,
      AirlineId: 3
    }, {
      Id: 6,
      Subject: '#SG 345 Renfrewshire - Lancashire',
      StartTime: new Date(2021, 3, 5, 6, 30),
      EndTime: new Date(2021, 3, 5, 7, 30),
      IsAllDay: false,
      AirlineId: 2
    }
  ];
  
  export let fifaEventsData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'RUSSIA vs SAUDI ARABIA',
      Description: 'Group A',
      StartTime: new Date(2021, 5, 14, 15, 0),
      EndTime: new Date(2021, 5, 14, 17, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Moscow',
      CategoryColor: '#1aaa55',
      GroupId: 1
    }, {
      Id: 2,
      Subject: 'EGYPT vs URUGUAY',
      Description: 'Group A',
      StartTime: new Date(2021, 5, 15, 12, 0),
      EndTime: new Date(2021, 5, 15, 14, 0),
      StartTimezone: 'Asia/Yekaterinburg',
      EndTimezone: 'Asia/Yekaterinburg',
      City: 'Ekaterinburg',
      CategoryColor: '#1aaa55',
      GroupId: 1
    }, {
      Id: 3,
      Subject: 'MOROCCO vs IR IRAN',
      Description: 'Group B',
      StartTime: new Date(2021, 5, 15, 15, 0),
      EndTime: new Date(2021, 5, 15, 17, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Saint Petersburg',
      CategoryColor: '#357cd2',
      GroupId: 2
    }, {
      Id: 4,
      Subject: 'PORTUGAL vs SPAIN',
      Description: 'Group B',
      StartTime: new Date(2021, 5, 15, 18, 0),
      EndTime: new Date(2021, 5, 15, 20, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Sochi',
      CategoryColor: '#357cd2',
      GroupId: 2
    }, {
      Id: 5,
      Subject: 'FRANCE vs AUSTRALIA',
      Description: 'Group C',
      StartTime: new Date(2021, 5, 16, 10, 0),
      EndTime: new Date(2021, 5, 16, 12, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Kazan',
      CategoryColor: '#7fa900',
      GroupId: 3
    }, {
      Id: 6,
      Subject: 'ARGENTINA vs ICELAND',
      Description: 'Group D',
      StartTime: new Date(2021, 5, 16, 13, 0),
      EndTime: new Date(2021, 5, 16, 15, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Moscow',
      CategoryColor: '#ea7a57',
      GroupId: 4
    }, {
      Id: 7,
      Subject: 'PERU vs DENMARK',
      Description: 'Group C',
      StartTime: new Date(2021, 5, 16, 16, 0),
      EndTime: new Date(2021, 5, 16, 18, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Saransk',
      CategoryColor: '#7fa900',
      GroupId: 3
    }, {
      Id: 8,
      Subject: 'CROATIA vs NIGERIA',
      Description: 'Group D',
      StartTime: new Date(2021, 5, 16, 19, 0),
      EndTime: new Date(2021, 5, 16, 21, 0),
      StartTimezone: 'Europe/Kaliningrad',
      EndTimezone: 'Europe/Kaliningrad',
      City: 'Kaliningrad',
      CategoryColor: '#ea7a57',
      GroupId: 4
    }, {
      Id: 9,
      Subject: 'COSTA RICA vs SERBIA',
      Description: 'Group E',
      StartTime: new Date(2021, 5, 17, 12, 0),
      EndTime: new Date(2021, 5, 17, 14, 0),
      StartTimezone: 'Europe/Samara',
      EndTimezone: 'Europe/Samara',
      City: 'Samara',
      CategoryColor: '#00bdae',
      GroupId: 5
    }, {
      Id: 10,
      Subject: 'GERMANY vs MEXICO',
      Description: 'Group F',
      StartTime: new Date(2021, 5, 17, 15, 0),
      EndTime: new Date(2021, 5, 17, 17, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Moscow',
      CategoryColor: '#f57f17',
      GroupId: 6
    }, {
      Id: 11,
      Subject: 'BRAZIL vs SWITZERLAND',
      Description: 'Group E',
      StartTime: new Date(2021, 5, 17, 18, 0),
      EndTime: new Date(2021, 5, 17, 20, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Rostov-On-Don',
      CategoryColor: '#00bdae',
      GroupId: 5
    }, {
      Id: 12,
      Subject: 'SWEDEN vs KOREA REPUBLIC',
      Description: 'Group F',
      StartTime: new Date(2021, 5, 18, 12, 0),
      EndTime: new Date(2021, 5, 18, 14, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Nizhny Novgorod',
      CategoryColor: '#f57f17',
      GroupId: 6
    }, {
      Id: 13,
      Subject: 'BELGIUM vs PANAMA',
      Description: 'Group G',
      StartTime: new Date(2021, 5, 18, 15, 0),
      EndTime: new Date(2021, 5, 18, 17, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Sochi',
      CategoryColor: '#8e24aa',
      GroupId: 7
    }, {
      Id: 14,
      Subject: 'TUNISIA vs ENGLAND',
      Description: 'Group G',
      StartTime: new Date(2021, 5, 18, 18, 0),
      EndTime: new Date(2021, 5, 18, 20, 0),
      StartTimezone: 'Europe/Volgograd',
      EndTimezone: 'Europe/Volgograd',
      City: 'Volgograd',
      CategoryColor: '#8e24aa',
      GroupId: 7
    }, {
      Id: 15,
      Subject: 'COLOMBIA vs JAPAN',
      Description: 'Group H',
      StartTime: new Date(2021, 5, 19, 12, 0),
      EndTime: new Date(2021, 5, 19, 14, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Saransk',
      CategoryColor: '#7fa900',
      GroupId: 8
    }, {
      Id: 16,
      Subject: 'POLAND vs SENEGAL',
      Description: 'Group H',
      StartTime: new Date(2021, 5, 19, 15, 0),
      EndTime: new Date(2021, 5, 19, 17, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Moscow',
      CategoryColor: '#7fa900',
      GroupId: 8
    }, {
      Id: 17,
      Subject: 'RUSSIA vs EGYPT',
      Description: 'Group A',
      StartTime: new Date(2021, 5, 19, 18, 0),
      EndTime: new Date(2021, 5, 19, 20, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Saint Petersburg',
      CategoryColor: '#1aaa55',
      GroupId: 1
    }, {
      Id: 18,
      Subject: 'PORTUGAL vs MOROCCO',
      Description: 'Group B',
      StartTime: new Date(2021, 5, 20, 12, 0),
      EndTime: new Date(2021, 5, 20, 14, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Rostov-On-Don',
      CategoryColor: '#357cd2',
      GroupId: 2
    }, {
      Id: 19,
      Subject: 'URUGUAY vs SAUDI ARABIA',
      Description: 'Group A',
      StartTime: new Date(2021, 5, 20, 15, 0),
      EndTime: new Date(2021, 5, 20, 17, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Moscow',
      CategoryColor: '#1aaa55',
      GroupId: 1
    }, {
      Id: 20,
      Subject: 'IR IRAN vs SPAIN',
      Description: 'Group B',
      StartTime: new Date(2021, 5, 20, 18, 0),
      EndTime: new Date(2021, 5, 20, 20, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Kazan',
      CategoryColor: '#357cd2',
      GroupId: 2
    }, {
      Id: 21,
      Subject: 'DENMARK vs AUSTRALIA',
      Description: 'Group C',
      StartTime: new Date(2021, 5, 21, 12, 0),
      EndTime: new Date(2021, 5, 21, 14, 0),
      StartTimezone: 'Europe/Samara',
      EndTimezone: 'Europe/Samara',
      City: 'Samara',
      CategoryColor: '#7fa900',
      GroupId: 3
    }, {
      Id: 22,
      Subject: 'FRANCE vs PERU',
      Description: 'Group D',
      StartTime: new Date(2021, 5, 21, 15, 0),
      EndTime: new Date(2021, 5, 21, 17, 0),
      StartTimezone: 'Asia/Yekaterinburg',
      EndTimezone: 'Asia/Yekaterinburg',
      City: 'Ekaterinburg',
      CategoryColor: '#ea7a57',
      GroupId: 4
    }, {
      Id: 23,
      Subject: 'ARGENTINA vs CROATIA',
      Description: 'Group D',
      StartTime: new Date(2021, 5, 21, 18, 0),
      EndTime: new Date(2021, 5, 21, 20, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Nizhny Novgorod',
      CategoryColor: '#ea7a57',
      GroupId: 4
    }, {
      Id: 24,
      Subject: 'BRAZIL vs COSTA RICA',
      Description: 'Group E',
      StartTime: new Date(2021, 5, 22, 12, 0),
      EndTime: new Date(2021, 5, 22, 14, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Saint Petersburg',
      CategoryColor: '#00bdae',
      GroupId: 5
    }, {
      Id: 25,
      Subject: 'NIGERIA vs ICELAND',
      Description: 'Group D',
      StartTime: new Date(2021, 5, 22, 15, 0),
      EndTime: new Date(2021, 5, 22, 17, 0),
      StartTimezone: 'Europe/Volgograd',
      EndTimezone: 'Europe/Volgograd',
      City: 'Volgograd',
      CategoryColor: '#ea7a57',
      GroupId: 4
    }, {
      Id: 26,
      Subject: 'SERBIA vs SWITZERLAND',
      Description: 'Group E',
      StartTime: new Date(2021, 5, 22, 18, 0),
      EndTime: new Date(2021, 5, 22, 20, 0),
      StartTimezone: 'Europe/Kaliningrad',
      EndTimezone: 'Europe/Kaliningrad',
      City: 'Kaliningrad',
      CategoryColor: '#00bdae',
      GroupId: 5
    }, {
      Id: 27,
      Subject: 'BELGIUM vs TUNISIA',
      Description: 'Group G',
      StartTime: new Date(2021, 5, 23, 12, 0),
      EndTime: new Date(2021, 5, 23, 14, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Moscow',
      CategoryColor: '#8e24aa',
      GroupId: 7
    }, {
      Id: 28,
      Subject: 'KOREA REPUBLIC vs MEXICO',
      Description: 'Group F',
      StartTime: new Date(2021, 5, 23, 15, 0),
      EndTime: new Date(2021, 5, 23, 17, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Rostov-On-Don',
      CategoryColor: '#f57f17',
      GroupId: 6
    }, {
      Id: 29,
      Subject: 'GERMANY vs SWEDEN',
      Description: 'Group F',
      StartTime: new Date(2021, 5, 23, 18, 0),
      EndTime: new Date(2021, 5, 23, 20, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Sochi',
      CategoryColor: '#f57f17',
      GroupId: 6
    }, {
      Id: 30,
      Subject: 'ENGLAND vs PANAMA',
      Description: 'Group G',
      StartTime: new Date(2021, 5, 24, 12, 0),
      EndTime: new Date(2021, 5, 24, 14, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Nizhny Novgorod',
      CategoryColor: '#8e24aa',
      GroupId: 7
    }, {
      Id: 31,
      Subject: 'JAPAN vs SENEGAL',
      Description: 'Group H',
      StartTime: new Date(2021, 5, 24, 15, 0),
      EndTime: new Date(2021, 5, 24, 17, 0),
      StartTimezone: 'Asia/Yekaterinburg',
      EndTimezone: 'Asia/Yekaterinburg',
      City: 'Ekaterinburg',
      CategoryColor: '#7fa900',
      GroupId: 8
    }, {
      Id: 32,
      Subject: 'POLAND vs COLOMBIA',
      Description: 'Group H',
      StartTime: new Date(2021, 5, 24, 18, 0),
      EndTime: new Date(2021, 5, 24, 20, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Kazan',
      CategoryColor: '#7fa900',
      GroupId: 8
    }, {
      Id: 33,
      Subject: 'URUGUAY vs RUSSIA',
      Description: 'Group A',
      StartTime: new Date(2021, 5, 25, 14, 0),
      EndTime: new Date(2021, 5, 25, 16, 0),
      StartTimezone: 'Europe/Samara',
      EndTimezone: 'Europe/Samara',
      City: 'Samara',
      CategoryColor: '#1aaa55',
      GroupId: 1
    }, {
      Id: 34,
      Subject: 'SAUDI ARABIA vs EGYPT',
      Description: 'Group A',
      StartTime: new Date(2021, 5, 25, 14, 0),
      EndTime: new Date(2021, 5, 25, 16, 0),
      StartTimezone: 'Europe/Volgograd',
      EndTimezone: 'Europe/Volgograd',
      City: 'Volgograd',
      CategoryColor: '#1aaa55',
      GroupId: 1
    }, {
      Id: 35,
      Subject: 'IR IRAN vs PORTUGAL',
      Description: 'Group B',
      StartTime: new Date(2021, 5, 25, 18, 0),
      EndTime: new Date(2021, 5, 25, 20, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Saransk',
      CategoryColor: '#357cd2',
      GroupId: 2
    }, {
      Id: 36,
      Subject: 'SPAIN vs MOROCCO',
      Description: 'Group B',
      StartTime: new Date(2021, 5, 25, 18, 0),
      EndTime: new Date(2021, 5, 25, 20, 0),
      StartTimezone: 'Europe/Kaliningrad',
      EndTimezone: 'Europe/Kaliningrad',
      City: 'Kaliningrad',
      CategoryColor: '#357cd2',
      GroupId: 2
    }, {
      Id: 37,
      Subject: 'DENMARK vs FRANCE',
      Description: 'Group C',
      StartTime: new Date(2021, 5, 26, 14, 0),
      EndTime: new Date(2021, 5, 26, 16, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Moscow',
      CategoryColor: '#7fa900',
      GroupId: 3
    }, {
      Id: 38,
      Subject: 'AUSTRALIA vs PERU',
      Description: 'Group C',
      StartTime: new Date(2021, 5, 26, 14, 0),
      EndTime: new Date(2021, 5, 26, 16, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Sochi',
      CategoryColor: '#7fa900',
      GroupId: 3
    }, {
      Id: 39,
      Subject: 'NIGERIA vs ARGENTINA',
      Description: 'Group D',
      StartTime: new Date(2021, 5, 26, 18, 0),
      EndTime: new Date(2021, 5, 26, 20, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Saint Petersburg',
      CategoryColor: '#ea7a57',
      GroupId: 4
    }, {
      Id: 40,
      Subject: 'ICELAND vs CROATIA',
      Description: 'Group D',
      StartTime: new Date(2021, 5, 26, 18, 0),
      EndTime: new Date(2021, 5, 26, 20, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Rostov-On-Don',
      CategoryColor: '#ea7a57',
      GroupId: 4
    }, {
      Id: 41,
      Subject: 'MEXICO vs SWEDEN',
      Description: 'Group F',
      StartTime: new Date(2021, 5, 27, 14, 0),
      EndTime: new Date(2021, 5, 27, 16, 0),
      StartTimezone: 'Asia/Yekaterinburg',
      EndTimezone: 'Asia/Yekaterinburg',
      City: 'Ekaterinburg',
      CategoryColor: '#f57f17',
      GroupId: 6
    }, {
      Id: 42,
      Subject: 'KOREA REPUBLIC vs GERMANY',
      Description: 'Group F',
      StartTime: new Date(2021, 5, 27, 14, 0),
      EndTime: new Date(2021, 5, 27, 16, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Kazan',
      CategoryColor: '#f57f17',
      GroupId: 6
    }, {
      Id: 43,
      Subject: 'SERBIA vs BRAZIL',
      Description: 'Group E',
      StartTime: new Date(2021, 5, 27, 18, 0),
      EndTime: new Date(2021, 5, 27, 20, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Moscow',
      CategoryColor: '#00bdae',
      GroupId: 5
    }, {
      Id: 44,
      Subject: 'SWITZERLAND vs COSTA RICA',
      Description: 'Group E',
      StartTime: new Date(2021, 5, 27, 18, 0),
      EndTime: new Date(2021, 5, 27, 20, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Nizhny Novgorod',
      CategoryColor: '#00bdae',
      GroupId: 5
    }, {
      Id: 45,
      Subject: 'JAPAN vs POLAND',
      Description: 'Group H',
      StartTime: new Date(2021, 5, 28, 14, 0),
      EndTime: new Date(2021, 5, 28, 16, 0),
      StartTimezone: 'Europe/Volgograd',
      EndTimezone: 'Europe/Volgograd',
      City: 'Volgograd',
      CategoryColor: '#7fa900',
      GroupId: 8
    }, {
      Id: 46,
      Subject: 'SENEGAL vs COLOMBIA',
      Description: 'Group H',
      StartTime: new Date(2021, 5, 28, 14, 0),
      EndTime: new Date(2021, 5, 28, 16, 0),
      StartTimezone: 'Europe/Samara',
      EndTimezone: 'Europe/Samara',
      City: 'Samara',
      CategoryColor: '#7fa900',
      GroupId: 8
    }, {
      Id: 47,
      Subject: 'PANAMA vs TUNISIA',
      Description: 'Group G',
      StartTime: new Date(2021, 5, 28, 18, 0),
      EndTime: new Date(2021, 5, 28, 20, 0),
      StartTimezone: 'Europe/Moscow',
      EndTimezone: 'Europe/Moscow',
      City: 'Saransk',
      CategoryColor: '#8e24aa',
      GroupId: 4
    }, {
      Id: 48,
      Subject: 'ENGLAND vs BELGIUM',
      Description: 'Group G',
      StartTime: new Date(2021, 5, 28, 18, 0),
      EndTime: new Date(2021, 5, 28, 20, 0),
      StartTimezone: 'Europe/Kaliningrad',
      EndTimezone: 'Europe/Kaliningrad',
      City: 'Kaliningrad',
      CategoryColor: '#8e24aa',
      GroupId: 4
    }
  ];
  
  const msPerDay = 86400000;
  const msPerHour = 3600000;
  const currentTime: number = new Date().setMinutes(0, 0, 0);
  export let readonlyEventsData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Project Workflow Analysis',
      StartTime: new Date(currentTime + msPerDay * -2 + msPerHour * 2),
      EndTime: new Date(currentTime + msPerDay * -2 + msPerHour * 4),
      IsReadonly: true
    }, {
      Id: 2,
      Subject: 'Project Requirement Planning',
      StartTime: new Date(currentTime + msPerDay * -1 + msPerHour * 2),
      EndTime: new Date(currentTime + msPerDay * -1 + msPerHour * 4),
      IsReadonly: true
    }, {
      Id: 3,
      Subject: 'Meeting with Developers',
      StartTime: new Date(currentTime + msPerDay * -1 + msPerHour * -3),
      EndTime: new Date(currentTime + msPerDay * -1 + msPerHour * -1),
      IsReadonly: true
    }, {
      Id: 4,
      Subject: 'Team Fun Activities',
      StartTime: new Date(currentTime + msPerHour * -4),
      EndTime: new Date(currentTime + msPerHour * -2),
      IsReadonly: true
    }, {
      Id: 5,
      Subject: 'Quality Analysis',
      StartTime: new Date(currentTime + msPerHour * 1),
      EndTime: new Date(currentTime + msPerHour * 3),
      IsReadonly: true
    }, {
      Id: 6,
      Subject: 'Customer meeting – John Mackenzie',
      StartTime: new Date(currentTime + msPerHour * 5),
      EndTime: new Date(currentTime + msPerHour * 6),
      IsReadonly: false
    }, {
      Id: 7,
      Subject: 'Meeting with Core team',
      StartTime: new Date(currentTime + msPerHour * 9),
      EndTime: new Date(currentTime + msPerHour * 10),
      IsReadonly: false
    }, {
      Id: 8,
      Subject: 'Project Review',
      StartTime: new Date(currentTime + msPerDay * 1 + msPerHour * 3),
      EndTime: new Date(currentTime + msPerDay * 1 + msPerHour * 5),
      IsReadonly: false
    }, {
      Id: 9,
      Subject: 'Project demo meeting with Andrew',
      StartTime: new Date(currentTime + msPerDay * 1 + msPerHour * -4),
      EndTime: new Date(currentTime + msPerDay * 1 + msPerHour * -3),
      IsReadonly: false
    }, {
      Id: 10,
      Subject: 'Online Hosting of Project',
      StartTime: new Date(currentTime + msPerDay * 2 + msPerHour * 4),
      EndTime: new Date(currentTime + msPerDay * 2 + msPerHour * 6),
      IsReadonly: false
    }
  ];
  
  export function getReminderEvents(): Record<string, any>[] {
    const today: number = new Date().getTime();
  
    const data: Record<string, any>[] = [
      {
        Id: 1,
        Subject: 'Explosion of Betelgeuse Star',
        Location: 'Space Centre USA',
        StartTime: new Date(today + 5000),
        EndTime: new Date(today + (msPerHour * 2) + 5000),
        StartTimezone: "UTC",
        EndTimezone: "UTC"
      }, {
        Id: 2,
        Subject: 'Thule Air Crash Report',
        Location: 'Newyork City',
        StartTime: new Date(today - msPerDay - (msPerHour * 2)),
        EndTime: new Date(today - msPerDay),
        StartTimezone: "UTC",
        EndTimezone: "UTC"
      }, {
        Id: 3,
        Subject: 'Milky Way as Melting pot',
        Location: 'Space Centre USA',
        StartTime: new Date(today - msPerDay),
        EndTime: new Date(today - msPerDay + (msPerHour * 2)),
        StartTimezone: "UTC",
        EndTimezone: "UTC"
      }, {
        Id: 4,
        Subject: 'Blue Moon Eclipse',
        Location: 'Space Centre USA',
        StartTime: new Date(today + msPerDay + (msPerHour * 2)),
        EndTime: new Date(today + msPerDay + (msPerHour * 4)),
        StartTimezone: "UTC",
        EndTimezone: "UTC"
      }, {
        Id: 5,
        Subject: 'Mysteries of Bermuda Triangle',
        Location: 'Bermuda',
        StartTime: new Date(today + msPerDay),
        EndTime: new Date(today + msPerDay + (msPerHour * 2)),
        StartTimezone: "UTC",
        EndTimezone: "UTC"
      }
    ];
    return data;
  }
  
  // tslint:disable-next-line:max-line-length
  export function generateObject(start: number = new Date(2020, 6, 1).getTime(), end: number = new Date(2022, 11, 31).getTime(), isWeekDaysOnly: boolean = false): Record<string, any>[] {
    const data: Record<string, any>[] = [];
    const names: string[] = [
      'Story Time for Kids', 'Camping with Turtles', 'Wildlife Warriors', 'Parrot Talk', 'Birds of Prey', 'Croco World',
      'Venomous Snake Hunt', 'Face Painting & Drawing events', 'Pony Rides', 'Feed the Giants', 'Jungle Treasure Hunt',
      'Endangered Species Program', 'Black Cockatoos Playtime', 'Walk with Jungle King', 'Trained Climbers', 'Playtime with Chimpanzees',
      'Meet a small Mammal', 'Amazon Fish Feeding', 'Elephant Ride'
    ];
    const dayCount: number = 1000 * 60 * 60;
    const appCount: number = isWeekDaysOnly ? 1 : 9;
    for (let a: number = start, id = 1; a < end; a += (dayCount * 24)) {
      const count: number = Math.floor((Math.random() * appCount) + 1);
      for (let b = 0; b < count; b++) {
        const hour: number = Math.floor(Math.random() * 100) % 24;
        const minutes: number = Math.round((Math.floor(Math.random() * 100) % 60) / 5) * 5;
        const nCount: number = Math.floor(Math.random() * names.length);
        const startDate: Date = new Date(new Date(a).setHours(hour, minutes));
        const endDate: Date = new Date(startDate.getTime() + (dayCount * 2.5));
  
        if (isWeekDaysOnly && [0, 6].indexOf(startDate.getDay()) > -1 || [0, 6].indexOf(endDate.getDay()) > -1) {
          continue;
        }
  
        data.push({
          Id: id,
          Subject: names[nCount],
          StartTime: startDate,
          EndTime: endDate,
          IsAllDay: (id % 10) ? false : true
        });
        id++;
      }
    }
    return data;
  }
  
  export let roomData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Board Meeting',
      Description: 'Meeting to discuss business goal of 2021.',
      StartTime: new Date(2021, 6, 30, 9, 0),
      EndTime: new Date(2021, 6, 30, 11, 0),
      RoomId: 1
    },
    {
      Id: 2,
      Subject: 'Training session on JSP',
      Description: 'Knowledge sharing on JSP topics.',
      StartTime: new Date(2021, 6, 30, 15, 0),
      EndTime: new Date(2021, 6, 30, 17, 0),
      RoomId: 5
    },
    {
      Id: 3,
      Subject: 'Sprint Planning with Team members',
      Description: 'Planning tasks for sprint.',
      StartTime: new Date(2021, 6, 30, 9, 30),
      EndTime: new Date(2021, 6, 30, 11, 0),
      RoomId: 3
    },
    {
      Id: 4,
      Subject: 'Meeting with Client',
      Description: 'Customer meeting to discuss features.',
      StartTime: new Date(2021, 6, 30, 11, 0),
      EndTime: new Date(2021, 6, 30, 13, 0),
      RoomId: 4
    },
    {
      Id: 5,
      Subject: 'Support Meeting with Managers',
      Description: 'Meeting to discuss support plan.',
      StartTime: new Date(2021, 6, 30, 16, 0),
      EndTime: new Date(2021, 6, 30, 17, 30),
      RoomId: 5
    },
    {
      Id: 6, Subject: 'Client Meeting',
      Description: 'Meeting to discuss client requirements.',
      StartTime: new Date(2021, 6, 30, 10, 30),
      EndTime: new Date(2021, 6, 30, 13, 0),
      RoomId: 6
    },
    {
      Id: 7,
      Subject: 'Appraisal Meeting',
      Description: 'Meeting to discuss employee appraisals.',
      StartTime: new Date(2021, 6, 30, 15, 0),
      EndTime: new Date(2021, 6, 30, 16, 30),
      RoomId: 7
    },
    {
      Id: 8,
      Subject: 'HR Meeting',
      Description: 'Meeting to discuss HR plans.',
      StartTime: new Date(2021, 6, 30, 8, 0),
      EndTime: new Date(2021, 6, 30, 9, 0),
      RoomId: 4
    },
    {
      Id: 9,
      Subject: 'Customer Meeting',
      Description: 'Meeting to discuss customer reported issues.',
      StartTime: new Date(2021, 6, 30, 10, 0),
      EndTime: new Date(2021, 6, 30, 12, 0),
      RoomId: 8
    },
    {
      Id: 10,
      Subject: 'Board Meeting',
      Description: 'Meeting to discuss business plans.',
      StartTime: new Date(2021, 6, 30, 14, 30),
      EndTime: new Date(2021, 6, 30, 17, 0),
      RoomId: 9
    },
    {
      Id: 11,
      Subject: 'Training session on Vue',
      Description: 'Knowledge sharing on Vue concepts.',
      StartTime: new Date(2021, 6, 30, 9, 0),
      EndTime: new Date(2021, 6, 30, 10, 30),
      RoomId: 10
    },
    {
      Id: 12,
      Subject: 'Meeting with Team members',
      Description: 'Meeting to discuss on work report.',
      StartTime: new Date(2021, 6, 30, 11, 30),
      EndTime: new Date(2021, 6, 30, 12, 0),
      RoomId: 5
    },
    {
      Id: 13,
      Subject: 'Meeting with General Manager',
      Description: 'Meeting to discuss support plan.',
      StartTime: new Date(2021, 6, 30, 14, 0),
      EndTime: new Date(2021, 6, 30, 16, 0),
      RoomId: 5
    },
    {
      Id: 14,
      Subject: 'Board Meeting',
      Description: 'Meeting to discuss business goal of 2021.',
      StartTime: new Date(2021, 6, 31, 9, 0),
      EndTime: new Date(2021, 6, 31, 11, 0),
      RoomId: 1
    },
    {
      Id: 15,
      Subject: 'Training session on JSP',
      Description: 'Knowledge sharing on JSP topics.',
      StartTime: new Date(2021, 6, 31, 14, 0),
      EndTime: new Date(2021, 6, 31, 17, 0),
      RoomId: 6
    },
    {
      Id: 16,
      Subject: 'Sprint Planning with Team members',
      Description: 'Planning tasks for sprint.',
      StartTime: new Date(2021, 6, 31, 9, 30),
      EndTime: new Date(2021, 6, 31, 11, 0),
      RoomId: 2
    },
    {
      Id: 17,
      Subject: 'Meeting with Client',
      Description: 'Customer meeting to discuss features.',
      StartTime: new Date(2021, 6, 31, 11, 0),
      EndTime: new Date(2021, 6, 31, 13, 0),
      RoomId: 7
    },
    {
      Id: 18,
      Subject: 'Support Meeting with Managers',
      Description: 'Meeting to discuss support plan.',
      StartTime: new Date(2021, 6, 31, 16, 0),
      EndTime: new Date(2021, 6, 31, 17, 30),
      RoomId: 2
    },
    {
      Id: 19,
      Subject: 'Training session on C#',
      Description: 'Training session',
      StartTime: new Date(2021, 6, 31, 14, 30),
      EndTime: new Date(2021, 6, 31, 16, 0),
      RoomId: 9
    },
    {
      Id: 20,
      Subject: 'Client Meeting',
      Description: 'Meeting to discuss client requirements.',
      StartTime: new Date(2021, 6, 31, 10, 30),
      EndTime: new Date(2021, 6, 31, 13, 0),
      RoomId: 3
    },
    {
      Id: 21,
      Subject: 'Appraisal Meeting',
      Description: 'Meeting to discuss employee appraisals.',
      StartTime: new Date(2021, 6, 31, 15, 0),
      EndTime: new Date(2021, 6, 31, 16, 30),
      RoomId: 3
    },
    {
      Id: 22,
      Subject: 'HR Meeting',
      Description: 'Meeting to discuss HR plans.',
      StartTime: new Date(2021, 6, 31, 8, 0),
      EndTime: new Date(2021, 6, 31, 9, 0),
      RoomId: 4
    },
    {
      Id: 23,
      Subject: 'Customer Meeting',
      Description: 'Meeting to discuss customer reported issues.',
      StartTime: new Date(2021, 6, 31, 10, 0),
      EndTime: new Date(2021, 6, 31, 12, 0),
      RoomId: 4
    },
    {
      Id: 24,
      Subject: 'Board Meeting',
      Description: 'Meeting to discuss business plans.',
      StartTime: new Date(2021, 7, 2, 16, 30),
      EndTime: new Date(2021, 7, 2, 18, 0),
      RoomId: 10
    },
    {
      Id: 25,
      Subject: 'Training session on Vue',
      Description: 'Knowledge sharing on Vue concepts.',
      StartTime: new Date(2021, 6, 31, 9, 0),
      EndTime: new Date(2021, 6, 31, 10, 30),
      RoomId: 5
    },
    {
      Id: 26,
      Subject: 'Meeting with Team members',
      Description: 'Meeting to discuss on work report.',
      StartTime: new Date(2021, 6, 31, 11, 30),
      EndTime: new Date(2021, 6, 31, 12, 0),
      RoomId: 5
    },
    {
      Id: 27,
      Subject: 'Meeting with General Manager',
      Description: 'Meeting to discuss support plan.',
      StartTime: new Date(2021, 6, 31, 14, 0),
      EndTime: new Date(2021, 6, 31, 16, 0),
      RoomId: 10
    },
  
    {
      Id: 28,
      Subject: 'Board Meeting',
      Description: 'Meeting to discuss business goal of 2021.',
      StartTime: new Date(2021, 7, 2, 9, 0),
      EndTime: new Date(2021, 7, 2, 11, 0),
      RoomId: 1
    },
    {
      Id: 29,
      Subject: 'Training session on JSP',
      Description: 'Knowledge sharing on JSP topics.',
      StartTime: new Date(2021, 7, 2, 17, 0),
      EndTime: new Date(2021, 7, 2, 20, 0),
      RoomId: 6
    },
    {
      Id: 30,
      Subject: 'Sprint Planning with Team members',
      Description: 'Planning tasks for sprint.',
      StartTime: new Date(2021, 7, 2, 10, 30),
      EndTime: new Date(2021, 7, 2, 12, 0),
      RoomId: 2
    },
    {
      Id: 31,
      Subject: 'Meeting with Client',
      Description: 'Customer meeting to discuss features.',
      StartTime: new Date(2021, 7, 2, 18, 0),
      EndTime: new Date(2021, 7, 2, 20, 0),
      RoomId: 8
    },
    {
      Id: 32,
      Subject: 'Support Meeting with Managers',
      Description: 'Meeting to discuss support plan.',
      StartTime: new Date(2021, 7, 2, 16, 0),
      EndTime: new Date(2021, 7, 2, 17, 30),
      RoomId: 7
    },
    {
      Id: 33,
      Subject: 'Training session on C#',
      Description: 'Training session',
      StartTime: new Date(2021, 7, 2, 14, 30),
      EndTime: new Date(2021, 7, 2, 16, 0),
      RoomId: 2
    },
    {
      Id: 34,
      Subject: 'Client Meeting',
      Description: 'Meeting to discuss client requirements.',
      StartTime: new Date(2021, 7, 2, 10, 30),
      EndTime: new Date(2021, 7, 2, 13, 0),
      RoomId: 3
    },
    {
      Id: 35,
      Subject: 'Appraisal Meeting',
      Description: 'Meeting to discuss employee appraisals.',
      StartTime: new Date(2021, 7, 2, 15, 0),
      EndTime: new Date(2021, 7, 2, 16, 30),
      RoomId: 8
    },
    {
      Id: 36,
      Subject: 'HR Meeting',
      Description: 'Meeting to discuss HR plans.',
      StartTime: new Date(2021, 7, 2, 9, 30),
      EndTime: new Date(2021, 7, 2, 11, 30),
      RoomId: 4
    },
    {
      Id: 37,
      Subject: 'Customer Meeting',
      Description: 'Meeting to discuss customer reported issues.',
      StartTime: new Date(2021, 7, 2, 10, 0),
      EndTime: new Date(2021, 7, 2, 12, 0),
      RoomId: 9
    },
    {
      Id: 38,
      Subject: 'Board Meeting',
      Description: 'Meeting to discuss business plans.',
      StartTime: new Date(2021, 7, 2, 15, 0),
      EndTime: new Date(2021, 7, 2, 17, 0),
      RoomId: 4
    },
    {
      Id: 39,
      Subject: 'Training session on Vue',
      Description: 'Knowledge sharing on Vue concepts.',
      StartTime: new Date(2021, 7, 2, 9, 0),
      EndTime: new Date(2021, 7, 2, 10, 30),
      RoomId: 5
    },
    {
      Id: 40,
      Subject: 'Meeting with Team members',
      Description: 'Meeting to discuss on work report.',
      StartTime: new Date(2021, 7, 2, 11, 30),
      EndTime: new Date(2021, 7, 2, 12, 30),
      RoomId: 5
    },
    {
      Id: 41,
      Subject: 'Meeting with General Manager',
      Description: 'Meeting to discuss support plan.',
      StartTime: new Date(2021, 7, 2, 14, 0),
      EndTime: new Date(2021, 7, 2, 16, 0),
      RoomId: 10
    },
    {
      Id: 43,
      Subject: 'HR Meeting',
      Description: 'Meeting to discuss HR plans.',
      StartTime: new Date(2021, 7, 2, 18, 0),
      EndTime: new Date(2021, 7, 2, 20, 0),
      RoomId: 2
    },
    {
      Id: 44,
      Subject: 'HR Meeting',
      Description: 'Meeting to discuss HR plans.',
      StartTime: new Date(2021, 7, 2, 17, 30),
      EndTime: new Date(2021, 7, 2, 20, 0),
      RoomId: 1
    },
    {
      Id: 45,
      Subject: 'Client Meeting',
      Description: 'Meeting to discuss client requirements.',
      StartTime: new Date(2021, 7, 2, 16, 30),
      EndTime: new Date(2021, 7, 2, 18, 0),
      RoomId: 3
    },
    {
      Id: 46,
      Subject: 'Board Meeting',
      Description: 'Meeting to discuss business plans.',
      StartTime: new Date(2021, 7, 2, 18, 30),
      EndTime: new Date(2021, 7, 2, 20, 0),
      RoomId: 4
    },
    {
      Id: 47,
      Subject: 'Board Meeting',
      Description: 'Meeting to discuss business plans.',
      StartTime: new Date(2021, 7, 2, 15, 30),
      EndTime: new Date(2021, 7, 2, 18, 0),
      RoomId: 5
    },
    {
      Id: 48,
      Subject: 'HR Meeting',
      Description: 'Meeting to discuss HR plans.',
      StartTime: new Date(2021, 7, 2, 18, 30),
      EndTime: new Date(2021, 7, 2, 20, 0),
      RoomId: 5
    },
    {
      Id: 49,
      Subject: 'HR Meeting',
      Description: 'Meeting to discuss HR plans.',
      StartTime: new Date(2021, 7, 2, 14, 30),
      EndTime: new Date(2021, 7, 2, 16, 0),
      RoomId: 6
    },
    {
      Id: 50,
      Subject: 'Board Meeting',
      Description: 'Meeting to discuss business plans.',
      StartTime: new Date(2021, 7, 2, 9, 30),
      EndTime: new Date(2021, 7, 2, 12, 0),
      RoomId: 6
    },
    {
      Id: 51,
      Subject: 'Client Meeting',
      Description: 'Meeting to discuss client requirements.',
      StartTime: new Date(2021, 7, 2, 10, 30),
      EndTime: new Date(2021, 7, 2, 12, 0),
      RoomId: 7
    },
    {
      Id: 52,
      Subject: 'Appraisal Meeting',
      Description: 'Meeting to discuss employee appraisals.',
      StartTime: new Date(2021, 7, 2, 18, 0),
      EndTime: new Date(2021, 7, 2, 19, 30),
      RoomId: 7
    },
    {
      Id: 53,
      Subject: 'Support Meeting with Managers',
      Description: 'Meeting to discuss support plan.',
      StartTime: new Date(2021, 7, 2, 15, 30),
      EndTime: new Date(2021, 7, 2, 17, 0),
      RoomId: 9
    },
    {
      Id: 54,
      Subject: 'Support Meeting with Managers',
      Description: 'Meeting to discuss support plan.',
      StartTime: new Date(2021, 7, 2, 11, 0),
      EndTime: new Date(2021, 7, 2, 12, 30),
      RoomId: 8
    },
    {
      Id: 55,
      Subject: 'Support Meeting with Managers',
      Description: 'Meeting to discuss support plan.',
      StartTime: new Date(2021, 7, 2, 11, 0),
      EndTime: new Date(2021, 7, 2, 12, 30),
      RoomId: 10
    },
    {
      Id: 56,
      Subject: 'Lunch Break',
      StartTime: new Date(2021, 7, 2, 13, 0),
      EndTime: new Date(2021, 7, 2, 14, 0),
      RecurrenceRule: 'FREQ=DAILY;INTERVAL=1;',
      IsBlock: true,
      RoomId: 1
    },
    {
      Id: 57,
      Subject: 'Lunch Break',
      StartTime: new Date(2021, 7, 2, 13, 0),
      EndTime: new Date(2021, 7, 2, 14, 0),
      RecurrenceRule: 'FREQ=DAILY;INTERVAL=1;',
      IsBlock: true,
      RoomId: 2
    },
    {
      Id: 58,
      Subject: 'Lunch Break',
      StartTime: new Date(2021, 7, 2, 13, 0),
      EndTime: new Date(2021, 7, 2, 14, 0),
      RecurrenceRule: 'FREQ=DAILY;INTERVAL=1;',
      IsBlock: true,
      RoomId: 3
    },
    {
      Id: 59,
      Subject: 'Lunch Break',
      StartTime: new Date(2021, 7, 2, 13, 0),
      EndTime: new Date(2021, 7, 2, 14, 0),
      RecurrenceRule: 'FREQ=DAILY;INTERVAL=1;',
      IsBlock: true,
      RoomId: 4
    },
    {
      Id: 60,
      Subject: 'Lunch Break',
      StartTime: new Date(2021, 7, 2, 13, 0),
      EndTime: new Date(2021, 7, 2, 14, 0),
      RecurrenceRule: 'FREQ=DAILY;INTERVAL=1;',
      IsBlock: true,
      RoomId: 5
    },
    {
      Id: 61,
      Subject: 'Lunch Break',
      StartTime: new Date(2021, 7, 2, 13, 0),
      EndTime: new Date(2021, 7, 2, 14, 0),
      RecurrenceRule: 'FREQ=DAILY;INTERVAL=1;',
      IsBlock: true,
      RoomId: 6
    },
    {
      Id: 62,
      Subject: 'Lunch Break',
      StartTime: new Date(2021, 7, 2, 13, 0),
      EndTime: new Date(2021, 7, 2, 14, 0),
      RecurrenceRule: 'FREQ=DAILY;INTERVAL=1;',
      IsBlock: true,
      RoomId: 7
    },
    {
      Id: 63,
      Subject: 'Lunch Break',
      StartTime: new Date(2021, 7, 2, 13, 0),
      EndTime: new Date(2021, 7, 2, 14, 0),
      RecurrenceRule: 'FREQ=DAILY;INTERVAL=1;',
      IsBlock: true,
      RoomId: 8
    },
    {
      Id: 64,
      Subject: 'Lunch Break',
      StartTime: new Date(2021, 7, 2, 13, 0),
      EndTime: new Date(2021, 7, 2, 14, 0),
      RecurrenceRule: 'FREQ=DAILY;INTERVAL=1;',
      IsBlock: true,
      RoomId: 9
    },
    {
      Id: 65,
      Subject: 'Lunch Break',
      StartTime: new Date(2021, 7, 2, 13, 0),
      EndTime: new Date(2021, 7, 2, 14, 0),
      RecurrenceRule: 'FREQ=DAILY;INTERVAL=1;',
      IsBlock: true,
      RoomId: 10
    }
  ];
  
  export let headerRowData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Story Time for Kids',
      StartTime: new Date(2021, 0, 1, 9, 0),
      EndTime: new Date(2021, 0, 3, 11, 0),
      CategoryColor: '#df5286'
    },
    {
      Id: 2,
      Subject: 'Camping with Turtles',
      StartTime: new Date(2021, 0, 2, 15, 0),
      EndTime: new Date(2021, 0, 3, 17, 0),
      CategoryColor: '#7fa900'
    },
    {
      Id: 3,
      Subject: 'Wildlife Warriors',
      StartTime: new Date(2021, 0, 3, 9, 30),
      EndTime: new Date(2021, 0, 4, 11, 0),
      CategoryColor: '#ea7a57'
    },
    {
      Id: 4,
      Subject: 'Parrot Talk',
      StartTime: new Date(2021, 0, 4, 11, 0),
      EndTime: new Date(2021, 0, 6, 13, 0),
      CategoryColor: '#1aaa55'
    },
    {
      Id: 6,
      Subject: 'Croco World',
      StartTime: new Date(2021, 0, 5, 16, 0),
      EndTime: new Date(2021, 0, 8, 17, 30),
      CategoryColor: '#fec200'
    },
    {
      Id: 7,
      Subject: 'Venomous Snake Hunt',
      StartTime: new Date(2021, 0, 6, 15, 0),
      EndTime: new Date(2021, 0, 7, 16, 30),
      CategoryColor: '#5978ee'
    },
    {
      Id: 8,
      Subject: 'Face Painting & Drawing events',
      StartTime: new Date(2021, 0, 7, 8, 0),
      EndTime: new Date(2021, 0, 10, 9, 0),
      IsAllDay: true,
      CategoryColor: '#00bdae'
    },
    {
      Id: 11,
      Subject: 'Jungle Treasure Hunt',
      StartTime: new Date(2021, 0, 11),
      EndTime: new Date(2021, 0, 14),
      IsAllDay: true,
      CategoryColor: '#7FA900'
    },
    {
      Id: 12,
      Subject: 'Endangered Species Program',
      StartTime: new Date(2021, 0, 12, 11, 30),
      EndTime: new Date(2021, 0, 15, 12, 0),
      CategoryColor: '#1aaa55'
    },
    {
      Id: 13,
      Subject: 'Black Cockatoos Playtime',
      StartTime: new Date(2021, 0, 13),
      EndTime: new Date(2021, 0, 17),
      IsAllDay: true,
      CategoryColor: '#ea7a57'
    },
    {
      Id: 14,
      Subject: 'Walk with Jungle King',
      StartTime: new Date(2021, 0, 17, 9, 0),
      EndTime: new Date(2021, 0, 21, 11, 0),
      CategoryColor: '#fec200'
    },
    {
      Id: 15,
      Subject: 'Trained Climbers',
      StartTime: new Date(2021, 0, 20),
      EndTime: new Date(2021, 0, 22),
      CategoryColor: '#1aaa55'
    },
    {
      Id: 16,
      Subject: 'Playtime with Chimpanzees',
      StartTime: new Date(2021, 0, 18, 9, 30),
      EndTime: new Date(2021, 0, 20, 11, 0),
      CategoryColor: '#df5286'
    },
    {
      Id: 17,
      Subject: 'Meet a small Mammal',
      StartTime: new Date(2021, 0, 23, 11, 0),
      EndTime: new Date(2021, 0, 25, 13, 0),
      CategoryColor: '#7fa900'
    },
    {
      Id: 18,
      Subject: 'Amazon Fish Feeding',
      StartTime: new Date(2021, 0, 22),
      EndTime: new Date(2021, 0, 24),
      IsAllDay: true,
      CategoryColor: '#1aaa55'
    },
    {
      Id: 19,
      Subject: 'Elephant Ride',
      StartTime: new Date(2021, 0, 24, 14, 30),
      EndTime: new Date(2021, 0, 27, 16, 0),
      CategoryColor: '#7fa900'
    },
    {
      Id: 20,
      Subject: 'Black Cockatoos Playtime',
      StartTime: new Date(2021, 0, 26),
      EndTime: new Date(2021, 0, 30),
      IsAllDay: true,
      CategoryColor: '#ea7a57'
    },
    {
      Id: 21,
      Subject: 'Endangered Species Program',
      StartTime: new Date(2021, 0, 27, 11, 30),
      EndTime: new Date(2021, 0, 29, 12, 0),
      CategoryColor: '#1aaa55'
    },
    {
      Id: 22,
      Subject: 'Feed the Giants',
      StartTime: new Date(2021, 0, 28, 14, 30),
      EndTime: new Date(2021, 0, 31, 17, 0),
      CategoryColor: '#00bdae'
    },
    {
      Id: 23,
      Subject: 'Birds of Prey',
      StartTime: new Date(2021, 1, 4, 16, 0),
      EndTime: new Date(2021, 1, 7, 17, 30),
      CategoryColor: '#865fcf'
    },
    {
      Id: 24,
      Subject: 'Trained Climbers',
      StartTime: new Date(2021, 0, 31),
      EndTime: new Date(2021, 1, 3),
      CategoryColor: '#1aaa55'
    },
    {
      Id: 25,
      Subject: 'Venomous Snake Hunt',
      StartTime: new Date(2021, 1, 2, 15, 0),
      EndTime: new Date(2021, 1, 5, 16, 30),
      CategoryColor: '#5978ee'
    },
    {
      Id: 26,
      Subject: 'Croco World',
      StartTime: new Date(2021, 1, 6, 16, 0),
      EndTime: new Date(2021, 1, 9, 17, 30),
      CategoryColor: '#7fa900'
    },
    {
      Id: 27,
      Subject: 'Amazon Fish Feeding',
      StartTime: new Date(2021, 1, 8),
      EndTime: new Date(2021, 1, 11),
      IsAllDay: true,
      CategoryColor: '#1aaa55'
    },
  
    {
      Id: 28,
      Subject: 'Playtime with Chimpanzees',
      StartTime: new Date(2021, 1, 10, 9, 30),
      EndTime: new Date(2021, 1, 13, 11, 0),
      CategoryColor: '#df5286'
    },
    {
      Id: 29,
      Subject: 'Meet a small Mammal',
      StartTime: new Date(2021, 1, 12, 11, 0),
      EndTime: new Date(2021, 1, 15, 13, 0),
      CategoryColor: '#7fa900'
    },
    {
      Id: 30,
      Subject: 'Black Cockatoos Playtime',
      StartTime: new Date(2021, 1, 13),
      EndTime: new Date(2021, 1, 17),
      IsAllDay: true,
      CategoryColor: '#ea7a57'
    }
  ];
  
  export let hospitalData: Record<string, any>[] = [
    {
      Id: 10,
      Name: 'David',
      StartTime: new Date(2021, 7, 2, 9, 0),
      EndTime: new Date(2021, 7, 2, 10, 0),
      Description: 'Health Checkup',
      DepartmentID: 1,
      ConsultantID: 1,
      DepartmentName: 'GENERAL'
    }, {
      Id: 11,
      Name: 'John',
      StartTime: new Date(2021, 7, 2, 10, 30),
      EndTime: new Date(2021, 7, 2, 11, 30),
      Description: 'Tooth Erosion',
      DepartmentID: 2,
      ConsultantID: 2,
      DepartmentName: 'DENTAL'
    }, {
      Id: 12,
      Name: 'Peter',
      StartTime: new Date(2021, 7, 2, 12, 0),
      EndTime: new Date(2021, 7, 2, 13, 0),
      Description: 'Eye and Spectacles Checkup',
      DepartmentID: 1,
      ConsultantID: 3,
      DepartmentName: 'GENERAL'
    }, {
      Id: 13,
      Name: 'Starc',
      StartTime: new Date(2021, 7, 2, 14, 0),
      EndTime: new Date(2021, 7, 2, 15, 0),
      Description: 'Toothaches',
      DepartmentID: 2,
      ConsultantID: 4,
      DepartmentName: 'DENTAL'
    }, {
      Id: 14,
      Name: 'James',
      StartTime: new Date(2021, 7, 2, 10, 0),
      EndTime: new Date(2021, 7, 2, 11, 0),
      Description: 'Surgery Appointment',
      DepartmentID: 1,
      ConsultantID: 5,
      DepartmentName: 'GENERAL'
    }, {
      Id: 15,
      Name: 'Jercy',
      StartTime: new Date(2021, 7, 2, 9, 30),
      EndTime: new Date(2021, 7, 2, 10, 30),
      Description: 'Tooth Sensitivity',
      DepartmentID: 2,
      ConsultantID: 6,
      DepartmentName: 'DENTAL'
    }, {
      Id: 16,
      Name: 'Albert',
      StartTime: new Date(2021, 7, 3, 10, 0),
      EndTime: new Date(2021, 7, 3, 11, 30),
      Description: 'Skin care treatment',
      DepartmentID: 1,
      ConsultantID: 7,
      DepartmentName: 'GENERAL'
    }, {
      Id: 17,
      Name: 'Louis',
      StartTime: new Date(2021, 7, 3, 12, 30),
      EndTime: new Date(2021, 7, 3, 13, 45),
      Description: 'General Checkup',
      DepartmentID: 1,
      ConsultantID: 9,
      DepartmentName: 'GENERAL'
    }, {
      Id: 18,
      Name: 'Williams',
      StartTime: new Date(2021, 7, 3, 12, 0),
      EndTime: new Date(2021, 7, 3, 14, 0),
      Description: 'Mouth Sores',
      DepartmentID: 2,
      ConsultantID: 10,
      DepartmentName: 'DENTAL'
    },
    {
      Id: 19,
      Name: 'David',
      StartTime: new Date(2021, 7, 3, 16, 30),
      EndTime: new Date(2021, 7, 3, 18, 15),
      Description: 'Eye checkup and Treatment',
      DepartmentID: 1,
      ConsultantID: 1,
      DepartmentName: 'GENERAL'
    }, {
      Id: 20,
      Name: 'John',
      StartTime: new Date(2021, 7, 3, 19, 30),
      EndTime: new Date(2021, 7, 3, 21, 45),
      Description: 'Toothaches',
      DepartmentID: 2,
      ConsultantID: 2,
      DepartmentName: 'DENTAL'
    }, {
      Id: 21,
      Name: 'Peter',
      StartTime: new Date(2021, 7, 4, 17, 30),
      EndTime: new Date(2021, 7, 4, 19, 30),
      Description: 'Surgery Treatment',
      DepartmentID: 1,
      ConsultantID: 3,
      DepartmentName: 'GENERAL'
    }, {
      Id: 22,
      Name: 'Starc',
      StartTime: new Date(2021, 7, 5, 18, 30),
      EndTime: new Date(2021, 7, 5, 21, 30),
      Description: 'Tooth Decay',
      DepartmentID: 2,
      ConsultantID: 4,
      DepartmentName: 'DENTAL'
    }, {
      Id: 23,
      Name: 'James',
      StartTime: new Date(2021, 7, 4, 19, 0),
      EndTime: new Date(2021, 7, 4, 21, 0),
      Description: 'General Checkup',
      DepartmentID: 1,
      ConsultantID: 5,
      DepartmentName: 'GENERAL'
    }, {
      Id: 24,
      Name: 'Jercy',
      StartTime: new Date(2021, 7, 5, 20, 0),
      EndTime: new Date(2021, 7, 5, 22, 0),
      Description: 'Tooth Erosion',
      DepartmentID: 2,
      ConsultantID: 6,
      DepartmentName: 'DENTAL'
    }];
  
  export let waitingList: Record<string, any>[] = [
    {
      Id: 1,
      Name: 'Steven',
      StartTime: new Date(2021, 8, 4, 7, 30),
      EndTime: new Date(2021, 8, 4, 9, 30),
      Description: 'Consulting',
      DepartmentName: 'GENERAL'
    },
    {
      Id: 2,
      Name: 'Milan',
      StartTime: new Date(2021, 8, 5, 8, 30),
      EndTime: new Date(2021, 8, 5, 10, 30),
      Description: 'Bad Breath',
      DepartmentName: 'DENTAL'
    },
    {
      Id: 3,
      Name: 'Laura',
      StartTime: new Date(2021, 8, 5, 9, 30),
      EndTime: new Date(2021, 8, 5, 10, 30),
      Description: 'Eye Checkup',
      DepartmentName: 'GENERAL'
    },
    {
      Id: 4,
      Name: 'Janet',
      StartTime: new Date(2021, 8, 4, 11, 0),
      EndTime: new Date(2021, 8, 4, 12, 30),
      Description: 'Gum Disease',
      DepartmentName: 'DENTAL'
    },
    {
      Id: 5,
      Name: 'Adams',
      StartTime: new Date(2021, 8, 4, 11, 0),
      EndTime: new Date(2021, 8, 4, 12, 30),
      Description: 'Observation',
      DepartmentName: 'GENERAL'
    },
    {
      Id: 6,
      Name: 'John',
      StartTime: new Date(2021, 8, 4, 11, 0),
      EndTime: new Date(2021, 8, 4, 12, 30),
      Description: 'Mouth Sores',
      DepartmentName: 'DENTAL'
    }
  ];
  
  export let blockData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Not Available',
      StartTime: new Date(2021, 7, 2, 10, 0),
      EndTime: new Date(2021, 7, 2, 12, 0),
      IsAllDay: false,
      IsBlock: true,
      EmployeeId: 1
    }, {
      Id: 2,
      Subject: 'Not Available',
      StartTime: new Date(2021, 7, 2, 16, 0),
      EndTime: new Date(2021, 7, 2, 20, 0),
      IsAllDay: false,
      IsBlock: true,
      EmployeeId: 2
    }, {
      Id: 3,
      Subject: 'Not Available',
      StartTime: new Date(2021, 7, 2, 12, 0),
      EndTime: new Date(2021, 7, 2, 14, 0),
      IsAllDay: false,
      IsBlock: true,
      EmployeeId: 3
    }, {
      Id: 4,
      Subject: 'Not Available',
      StartTime: new Date(2021, 7, 5, 11, 0),
      EndTime: new Date(2021, 7, 6, 10, 0),
      IsAllDay: true,
      IsBlock: true,
      EmployeeId: 4
    }, {
      Id: 5,
      Subject: 'Not Available',
      StartTime: new Date(2021, 7, 11, 11, 0),
      EndTime: new Date(2021, 7, 13, 10, 0),
      IsAllDay: false,
      IsBlock: true,
      EmployeeId: 5
    }, {
      Id: 6,
      Subject: 'Not Available',
      StartTime: new Date(2021, 7, 9),
      EndTime: new Date(2021, 7, 12),
      IsAllDay: false,
      IsBlock: true,
      EmployeeId: 6
    }, {
      Id: 9,
      Subject: 'Client Meeting',
      StartTime: new Date(2021, 7, 4, 8, 0),
      EndTime: new Date(2021, 7, 4, 10, 30),
      IsAllDay: false,
      EmployeeId: 3
    }, {
      Id: 10,
      Subject: 'Conference',
      StartTime: new Date(2021, 7, 3, 13, 30),
      EndTime: new Date(2021, 7, 3, 15, 0),
      IsAllDay: false,
      EmployeeId: 4
    }, {
      Id: 11,
      Subject: 'Employee Recruitment',
      StartTime: new Date(2021, 7, 2, 10, 0),
      EndTime: new Date(2021, 7, 2, 13, 0),
      IsAllDay: false,
      EmployeeId: 5
    }, {
      Id: 12,
      Subject: 'Data Analyzing',
      StartTime: new Date(2021, 7, 2, 15, 0),
      EndTime: new Date(2021, 7, 2, 17, 0),
      IsAllDay: false,
      EmployeeId: 6
    }, {
      Id: 13,
      Subject: 'Content Writting',
      StartTime: new Date(2021, 7, 3, 14, 0),
      EndTime: new Date(2021, 7, 3, 16, 0),
      IsAllDay: false,
      EmployeeId: 1
    }, {
      Id: 14,
      Subject: 'Meeting',
      StartTime: new Date(2021, 7, 2, 9, 0),
      EndTime: new Date(2021, 7, 2, 11, 0),
      IsAllDay: false,
      EmployeeId: 4
    }, {
      Id: 15,
      Subject: 'Not Available',
      StartTime: new Date(2021, 7, 30, 11, 0),
      EndTime: new Date(2021, 8, 1, 10, 0),
      IsAllDay: false,
      IsBlock: true,
      EmployeeId: 4
    }, {
      Id: 16,
      Subject: 'Not Available',
      StartTime: new Date(2021, 7, 12),
      EndTime: new Date(2021, 7, 15),
      IsAllDay: false,
      IsBlock: true,
      EmployeeId: 3
    }
  ];
  
  export let resourceSampleData: Record<string, any>[] = [
    {
      Id: 1,
      Subject: 'Burning Man',
      StartTime: new Date(2021, 5, 4, 15, 0),
      EndTime: new Date(2021, 5, 4, 17, 30),
      OwnerId: 1
    }, {
      Id: 2,
      Subject: 'Marketing Forum',
      StartTime: new Date(2021, 5, 6, 10, 0),
      EndTime: new Date(2021, 5, 6, 11, 30),
      OwnerId: 2
    }, {
      Id: 3,
      Subject: 'Business Factory',
      StartTime: new Date(2021, 5, 6, 13, 30),
      EndTime: new Date(2021, 5, 6, 15, 0),
      OwnerId: 3
    }, {
      Id: 4,
      Subject: 'Burning Man',
      StartTime: new Date(2021, 5, 7, 11, 30),
      EndTime: new Date(2021, 5, 7, 13, 0),
      OwnerId: 1
    }, {
      Id: 5,
      Subject: 'Funnel Hacking',
      StartTime: new Date(2021, 5, 8, 9, 30),
      EndTime: new Date(2021, 5, 8, 11, 0),
      OwnerId: 3
    }, {
      Id: 6,
      Subject: 'The human gathering',
      StartTime: new Date(2021, 5, 8, 13, 0),
      EndTime: new Date(2021, 5, 8, 14, 30),
      OwnerId: 2
    }, {
      Id: 7,
      Subject: 'Techweek',
      StartTime: new Date(2021, 5, 9, 11, 0),
      EndTime: new Date(2021, 5, 9, 12, 30),
      OwnerId: 2
    }, {
      Id: 8,
      Subject: 'Grow Conference',
      StartTime: new Date(2021, 5, 10, 10, 0),
      EndTime: new Date(2021, 5, 10, 11, 30),
      OwnerId: 1
    }, {
      Id: 9,
      Subject: 'Data Science Conference',
      StartTime: new Date(2021, 5, 10, 13, 30),
      EndTime: new Date(2021, 5, 10, 15, 0),
      OwnerId: 1
    }, {
      Id: 10,
      Subject: 'Blogcademy',
      StartTime: new Date(2021, 5, 11, 12, 0),
      EndTime: new Date(2021, 5, 11, 13, 30),
      OwnerId: 3
    }, {
      Id: 11,
      Subject: 'World Domination Summit',
      StartTime: new Date(2021, 5, 12, 9, 30),
      EndTime: new Date(2021, 5, 12, 11, 0),
      OwnerId: 2
    }, {
      Id: 12,
      Subject: 'Content Marketing',
      StartTime: new Date(2021, 5, 12, 13, 0),
      EndTime: new Date(2021, 5, 12, 14, 30),
      OwnerId: 1
    }, {
      Id: 13,
      Subject: 'Mobile World Conference',
      StartTime: new Date(2021, 5, 18, 18, 0),
      EndTime: new Date(2021, 5, 18, 20, 0),
      OwnerId: 1
    }
  ];
  
  export let quickInfoTemplateData: Record<string, any>[] = [
    {
      RoomId: 10,
      Id: 1,
      Subject: 'Board Meeting',
      Description: 'Meeting to discuss business goal of 2020.',
      StartTime: '2021-01-03T04:00:00.000Z',
      EndTime: '2021-01-03T05:30:00.000Z'
    }, {
      RoomId: 8,
      Id: 2,
      Subject: 'Training session on JSP',
      Description: 'Knowledge sharing on JSP topics.',
      StartTime: '2021-01-05T04:00:00.000Z',
      EndTime: '2021-01-05T05:30:00.000Z'
    }, {
      RoomId: 3,
      Id: 3,
      Subject: 'Sprint Planning with Team members',
      Description: 'Planning tasks for sprint.',
      StartTime: '2021-01-07T04:00:00.000Z',
      EndTime: '2021-01-07T05:30:00.000Z'
    }, {
      RoomId: 2,
      Id: 4,
      Subject: 'Meeting with Client',
      Description: 'Customer meeting to discuss features.',
      StartTime: '2021-01-09T03:30:00.000Z',
      EndTime: '2021-01-09T05:00:00.000Z'
    }, {
      RoomId: 5,
      Id: 5,
      Subject: 'Support Meeting with Managers',
      Description: 'Meeting to discuss support plan.',
      StartTime: '2021-01-04T06:30:00.000Z',
      EndTime: '2021-01-04T08:00:00.000Z'
    }, {
      RoomId: 1,
      Id: 6,
      Subject: 'Client Meeting',
      Description: 'Meeting to discuss client requirements.',
      StartTime: '2021-01-06T06:00:00.000Z',
      EndTime: '2021-01-06T07:30:00.000Z'
    }, {
      RoomId: 7,
      Id: 7,
      Subject: 'Appraisal Meeting',
      Description: 'Meeting to discuss employee appraisals.',
      StartTime: '2021-01-08T05:30:00.000Z',
      EndTime: '2021-01-08T07:00:00.000Z'
    }, {
      RoomId: 6,
      Id: 8,
      Subject: 'HR Meeting',
      Description: 'Meeting to discuss HR plans.',
      StartTime: '2021-01-03T07:30:00.000Z',
      EndTime: '2021-01-03T09:00:00.000Z'
    }, {
      RoomId: 4,
      Id: 9,
      Subject: 'Customer Meeting',
      Description: 'Meeting to discuss customer reported issues.',
      StartTime: '2021-01-07T07:00:00.000Z',
      EndTime: '2021-01-07T08:30:00.000Z'
    }, {
      RoomId: 9,
      Id: 10,
      Subject: 'Board Meeting',
      Description: 'Meeting to discuss business plans.',
      StartTime: '2021-01-09T07:30:00.000Z',
      EndTime: '2021-01-09T09:00:00.000Z'
    }
  ];
</file>

<file path="src/app/shared/guard/auth.guard.spec.ts">
import { TestBed } from '@angular/core/testing';

import { AuthGuard } from './auth.guard';

describe('AuthGuard', () => {
  let guard: AuthGuard;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    guard = TestBed.inject(AuthGuard);
  });

  it('should be created', () => {
    expect(guard).toBeTruthy();
  });
});
</file>

<file path="src/app/shared/guard/auth.guard.ts">
import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from '@angular/router';
import { AuthService } from 'src/app/core/services/auth.service';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard {
  constructor(public authService: AuthService, public router: Router) {}
  canActivate(
    next: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): Observable<boolean> | Promise<boolean> | UrlTree | boolean {
    if (this.authService.isLoggedIn !== true) {
      this.router.navigate(['sign-in']);
    }
    return true;
  }
}
</file>

<file path="src/app/Utils/calendar-header.component.ts">
// import { Component, Input, Output, EventEmitter } from '@angular/core';
// import { CalendarView } from 'angular-calendar';

// @Component({
//   selector: 'mwl-demo-utils-calendar-header',
//   template: `
//     <div class="row text-center">
//       <div class="col-md-4">
//         <div class="btn-group">
//           <div
//             class="btn btn-primary"
//             mwlCalendarPreviousView
//             [view]="view"
//             [(viewDate)]="viewDate"
//             (viewDateChange)="viewDateChange.next(viewDate)"
//           >
//             Previous
//           </div>
//           <div
//             class="btn btn-outline-secondary"
//             mwlCalendarToday
//             [(viewDate)]="viewDate"
//             (viewDateChange)="viewDateChange.next(viewDate)"
//           >
//             Today
//           </div>
//           <div
//             class="btn btn-primary"
//             mwlCalendarNextView
//             [view]="view"
//             [(viewDate)]="viewDate"
//             (viewDateChange)="viewDateChange.next(viewDate)"
//           >
//             Next
//           </div>
//         </div>
//       </div>
//       <div class="col-md-4">
//         <h3>{{ viewDate | calendarDate: view + 'ViewTitle':locale }}</h3>
//       </div>
//       <div class="col-md-4">
//         <div class="btn-group">
//           <div
//             class="btn btn-primary"
//             (click)="viewChange.emit(CalendarView.Month)"
//             [class.active]="view === CalendarView.Month"
//           >
//             Month
//           </div>
//           <div
//             class="btn btn-primary"
//             (click)="viewChange.emit(CalendarView.Week)"
//             [class.active]="view === CalendarView.Week"
//           >
//             Week
//           </div>
//           <div
//             class="btn btn-primary"
//             (click)="viewChange.emit(CalendarView.Day)"
//             [class.active]="view === CalendarView.Day"
//           >
//             Day
//           </div>
//         </div>
//       </div>
//     </div>
//     <br />
//   `,
// })
// export class CalendarHeaderComponent {
//   @Input() view: CalendarView;

//   @Input() viewDate: Date;

//   @Input() locale: string = 'en';

//   @Output() viewChange = new EventEmitter<CalendarView>();

//   @Output() viewDateChange = new EventEmitter<Date>();

//   CalendarView = CalendarView;
// }
</file>

<file path="src/app/Utils/colors.ts">
export const colors: any = {
    red: {
      primary: '#ad2121',
      secondary: '#FAE3E3',
    },
    blue: {
      primary: '#1e90ff',
      secondary: '#D1E8FF',
    },
    yellow: {
      primary: '#e3bc08',
      secondary: '#FDF1BA',
    },
  };
</file>

<file path="src/app/Utils/date-adapter.ts">
import { DateAdapter as BaseDateAdapter } from 'calendar-utils/date-adapters/date-adapter';

export abstract class DateAdapter implements BaseDateAdapter {
  abstract addWeeks(date: Date | number, amount: number): Date;

  abstract addMonths(date: Date | number, amount: number): Date;

  abstract subDays(date: Date | number, amount: number): Date;

  abstract subWeeks(date: Date | number, amount: number): Date;

  abstract subMonths(date: Date | number, amount: number): Date;

  abstract getISOWeek(date: Date | number): number;

  abstract setDate(date: Date | number, dayOfMonth: number): Date;

  abstract setMonth(date: Date | number, month: number): Date;

  abstract setYear(date: Date | number, year: number): Date;

  abstract getDate(date: Date | number): number;

  abstract getMonth(date: Date | number): number;

  abstract getYear(date: Date | number): number;

  abstract addDays(date: Date | number, amount: number): Date;

  abstract addHours(date: Date | number, amount: number): Date;

  abstract addMinutes(date: Date | number, amount: number): Date;

  abstract addSeconds(date: Date | number, amount: number): Date;

  abstract differenceInDays(
    dateLeft: Date | number,
    dateRight: Date | number
  ): number;

  abstract differenceInMinutes(
    dateLeft: Date | number,
    dateRight: Date | number
  ): number;

  abstract differenceInSeconds(
    dateLeft: Date | number,
    dateRight: Date | number
  ): number;

  abstract endOfDay(date: Date | number): Date;

  abstract endOfMonth(date: Date | number): Date;

  abstract endOfWeek(
    date: Date | number,
    options?: { weekStartsOn?: number }
  ): Date;

  abstract getDay(date: Date | number): number;

  abstract isSameDay(
    dateLeft: Date | number,
    dateRight: Date | number
  ): boolean;

  abstract isSameMonth(
    dateLeft: Date | number,
    dateRight: Date | number
  ): boolean;

  abstract isSameSecond(
    dateLeft: Date | number,
    dateRight: Date | number
  ): boolean;

  abstract max(dates: (Date | number)[]): Date;

  abstract setHours(date: Date | number, hours: number): Date;

  abstract setMinutes(date: Date | number, minutes: number): Date;

  abstract startOfDay(date: Date | number): Date;

  abstract startOfMinute(date: Date | number): Date;

  abstract startOfMonth(date: Date | number): Date;

  abstract startOfWeek(
    date: Date | number,
    options?: { weekStartsOn?: number }
  ): Date;

  abstract getHours(date: Date | number): number;

  abstract getMinutes(date: Date | number): number;

  abstract getTimezoneOffset(date: Date | number): number;
}
</file>

<file path="src/app/Utils/module.ts">
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { CalendarModule } from 'angular-calendar';
//import { CalendarHeaderComponent } from './calendar-header.component';

@NgModule({
  imports: [CommonModule, FormsModule, CalendarModule],
 // declarations: [CalendarHeaderComponent],
  //exports: [CalendarHeaderComponent],
})
export class DemoUtilsModule {}
</file>

<file path="src/app/Utils/util.ts">
// import {
//     CalendarEvent,
//     WeekViewTimeEvent,
//     WeekViewHour,
//     WeekViewHourSegment,
//     validateEvents as validateEventsWithoutLog,
//     ViewPeriod,
//     WeekDay,
//     WeekViewAllDayEvent,
//   } from 'calendar-utils';
//   import { DateAdapter } from './date-adapter';
  
//   export const validateEvents = (events: CalendarEvent[]) => {
//    // const warn = (...args) => console.warn('angular-calendar', ...args);
//     return validateEventsWithoutLog(events, warn);
//   };
  
//   export function isInsideLeftAndRight(
//     outer: ClientRect,
//     inner: ClientRect
//   ): boolean {
//     return (
//       Math.floor(outer.left) <= Math.ceil(inner.left) &&
//       Math.floor(inner.left) <= Math.ceil(outer.right) &&
//       Math.floor(outer.left) <= Math.ceil(inner.right) &&
//       Math.floor(inner.right) <= Math.ceil(outer.right)
//     );
//   }
  
//   function isInsideTopAndBottom(outer: ClientRect, inner: ClientRect): boolean {
//     return (
//       Math.floor(outer.top) <= Math.ceil(inner.top) &&
//       Math.floor(inner.top) <= Math.ceil(outer.bottom) &&
//       Math.floor(outer.top) <= Math.ceil(inner.bottom) &&
//       Math.floor(inner.bottom) <= Math.ceil(outer.bottom)
//     );
//   }
  
//   export function isInside(outer: ClientRect, inner: ClientRect): boolean {
//     return (
//       isInsideLeftAndRight(outer, inner) && isInsideTopAndBottom(outer, inner)
//     );
//   }
  
//   export function roundToNearest(amount: number, precision: number) {
//     return Math.round(amount / precision) * precision;
//   }
  
//   export const trackByEventId = (index: number, event: CalendarEvent) =>
//     event.id ? event.id : event;
  
//   export const trackByWeekDayHeaderDate = (index: number, day: WeekDay) =>
//     day.date.toISOString();
  
//   export const trackByHourSegment = (
//     index: number,
//     segment: WeekViewHourSegment
//   ) => segment.date.toISOString();
  
//   export const trackByHour = (index: number, hour: WeekViewHour) =>
//     hour.segments[0].date.toISOString();
  
//   export const trackByWeekAllDayEvent = (
//     index: number,
//     weekEvent: WeekViewAllDayEvent
//   ) => (weekEvent.event.id ? weekEvent.event.id : weekEvent.event);
  
//   export const trackByWeekTimeEvent = (
//     index: number,
//     weekEvent: WeekViewTimeEvent
//   ) => (weekEvent.event.id ? weekEvent.event.id : weekEvent.event);
  
//   const MINUTES_IN_HOUR = 60;
  
//   function getPixelAmountInMinutes(
//     hourSegments: number,
//     hourSegmentHeight: number,
//     hourDuration?: number
//   ) {
//     return (hourDuration || MINUTES_IN_HOUR) / (hourSegments * hourSegmentHeight);
//   }
  
//   export function getMinutesMoved(
//     movedY: number,
//     hourSegments: number,
//     hourSegmentHeight: number,
//     eventSnapSize: number,
//     hourDuration?: number
//   ): number {
//     const draggedInPixelsSnapSize = roundToNearest(
//       movedY,
//       eventSnapSize || hourSegmentHeight
//     );
//     const pixelAmountInMinutes = getPixelAmountInMinutes(
//       hourSegments,
//       hourSegmentHeight,
//       hourDuration
//     );
//     return draggedInPixelsSnapSize * pixelAmountInMinutes;
//   }
  
//   export function getDefaultEventEnd(
//     dateAdapter: DateAdapter,
//     event: CalendarEvent,
//     minimumMinutes: number
//   ): Date {
//     if (event.end) {
//       return event.end;
//     } else {
//       return dateAdapter.addMinutes(event.start, minimumMinutes);
//     }
//   }
  
//   export function addDaysWithExclusions(
//     dateAdapter: DateAdapter,
//     date: Date,
//     days: number,
//     excluded: number[]
//   ): Date {
//     let daysCounter = 0;
//     let daysToAdd = 0;
//     const changeDays = days < 0 ? dateAdapter.subDays : dateAdapter.addDays;
//     let result = date;
//     while (daysToAdd <= Math.abs(days)) {
//       result = changeDays(date, daysCounter);
//       const day = dateAdapter.getDay(result);
//       if (excluded.indexOf(day) === -1) {
//         daysToAdd++;
//       }
//       daysCounter++;
//     }
//     return result;
//   }
  
//   export function isDraggedWithinPeriod(
//     newStart: Date,
//     newEnd: Date,
//     period: ViewPeriod
//   ): boolean {
//     const end = newEnd || newStart;
//     return (
//       (period.start <= newStart && newStart <= period.end) ||
//       (period.start <= end && end <= period.end)
//     );
//   }
  
//   export function shouldFireDroppedEvent(
//     dropEvent: { dropData?: { event?: CalendarEvent; calendarId?: symbol } },
//     date: Date,
//     allDay: boolean,
//     calendarId: symbol
//   ) {
//     return (
//       dropEvent.dropData &&
//       dropEvent.dropData.event &&
//       (dropEvent.dropData.calendarId !== calendarId ||
//         (dropEvent.dropData.event.allDay && !allDay) ||
//         (!dropEvent.dropData.event.allDay && allDay))
//     );
//   }
  
//   export function getWeekViewPeriod(
//     dateAdapter: DateAdapter,
//     viewDate: Date,
//     weekStartsOn: number,
//     excluded: number[] = [],
//     daysInWeek?: number
//   ): { viewStart: Date; viewEnd: Date } {
//     let viewStart = daysInWeek
//       ? dateAdapter.startOfDay(viewDate)
//       : dateAdapter.startOfWeek(viewDate, { weekStartsOn });
//     const endOfWeek = dateAdapter.endOfWeek(viewDate, { weekStartsOn });
//     while (
//       excluded.indexOf(dateAdapter.getDay(viewStart)) > -1 &&
//       viewStart < endOfWeek
//     ) {
//       viewStart = dateAdapter.addDays(viewStart, 1);
//     }
//     if (daysInWeek) {
//       const viewEnd = dateAdapter.endOfDay(
//         addDaysWithExclusions(dateAdapter, viewStart, daysInWeek - 1, excluded)
//       );
//       return { viewStart, viewEnd };
//     } else {
//       let viewEnd = endOfWeek;
//       while (
//         excluded.indexOf(dateAdapter.getDay(viewEnd)) > -1 &&
//         viewEnd > viewStart
//       ) {
//         viewEnd = dateAdapter.subDays(viewEnd, 1);
//       }
//       return { viewStart, viewEnd };
//     }
//   }
  
//   export function isWithinThreshold({ x, y }: { x: number; y: number }) {
//     const DRAG_THRESHOLD = 1;
//     return Math.abs(x) > DRAG_THRESHOLD || Math.abs(y) > DRAG_THRESHOLD;
//   }
</file>

<file path="src/custom-theme.scss">
@use '@angular/material' as mat;

@include mat.core();


$ShiftWorkFrontend-primary: mat.define-palette(mat.$indigo-palette);
$ShiftWorkFrontend-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);


$ShiftWorkFrontend-warn: mat.define-palette(mat.$red-palette);


$ShiftWorkFrontend-theme: mat.define-light-theme((
  color: (
    primary: $ShiftWorkFrontend-primary,
    accent: $ShiftWorkFrontend-accent,
    warn: $ShiftWorkFrontend-warn,
  ),
  typography: mat.define-typography-config(),
  density: 0
));


@include mat.all-component-themes($ShiftWorkFrontend-theme);
</file>

<file path="src/custom-webpack.config.ts">
import { EnvironmentPlugin } from 'webpack';
const Dotenv = require('dotenv-webpack');
module.exports = {
  plugins: [new Dotenv()],
};
</file>

<file path="src/environments/environment.prod.ts">
export const environment = {
  production: true,
  googleAnalyticsId: process.env["GOOGLE_ANALITYC_KEY"],
  apiUrl : process.env["BACKEND_URL"],
  myCompany: process.env["COMPANY_KEY"],
  auth:{
    domain: process.env["AUTH_DOMAIN"],
    clientId: process.env["AUTH_CLIENT"],
    redirectUri: window.location.origin,
  },
  firebase: {
    apiKey: process.env["FIREBASE_API_KEY"],
    authDomain: process.env["dev-ht5zjk2x.us.auth0.com"],
    projectId: process.env["FREBASE_PROJECT_ID"],
    storageBucket: process.env["STORAGE_BUCKET"],
    messagingSenderId: process.env["MESSAGING_SENDER_ID"],
    appId: process.env["FIREBASE_APP_ID"]
  }
};
</file>

<file path="src/index.html">
<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <title>ShiftWorkFrontend</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link bootstrap.css="">

  <link rel="manifest" href="manifest.webmanifest">
  <meta name="theme-color" content="#1976d2">
  <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>

<body class="mat-typography">
  <app-root></app-root>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa"
    crossorigin="anonymous"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBwL0YUb-yheFPml2qJ_Q4Js7dxgwAhrcM"></script>    
  <noscript>Please enable JavaScript to continue using this application.</noscript>
</body>

</html>
</file>

<file path="src/locale/messages.es.xlf">
<?xml version="1.0" encoding="UTF-8" ?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">
  <file source-language="es-SP" datatype="plaintext" original="ng2.template">
    <body>
      <trans-unit id="4022066031214545422" datatype="html">
        <source>Locations</source>
        <target>Localizacion</target>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">5</context>
        </context-group>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/locations/locations.component.html</context>
          <context context-type="linenumber">4</context>
        </context-group>
      </trans-unit>
      <trans-unit id="8620355743663763746" datatype="html">
        <source> Select Location </source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">10,12</context>
        </context-group>
      </trans-unit>
      <trans-unit id="2510301980491268755" datatype="html">
        <source>Location Name</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">22</context>
        </context-group>
      </trans-unit>
      <trans-unit id="6304432362546770951" datatype="html">
        <source>Address</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">27</context>
        </context-group>
      </trans-unit>
      <trans-unit id="2314075913167237221" datatype="html">
        <source>City</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">32</context>
        </context-group>
      </trans-unit>
      <trans-unit id="5911214550882917183" datatype="html">
        <source>State</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">37</context>
        </context-group>
      </trans-unit>
      <trans-unit id="1200737650075932684" datatype="html">
        <source>Zip code</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">42</context>
        </context-group>
      </trans-unit>
      <trans-unit id="516176798986294299" datatype="html">
        <source>Country</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">49</context>
        </context-group>
      </trans-unit>
      <trans-unit id="333698147271351026" datatype="html">
        <source>Latitude: <x id="INTERPOLATION" equiv-text="{{display?.lat}}"/></source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">61</context>
        </context-group>
      </trans-unit>
      <trans-unit id="9065233968776922120" datatype="html">
        <source>Longitude: <x id="INTERPOLATION" equiv-text="{{display?.lng}}"/></source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">62</context>
        </context-group>
      </trans-unit>
      <trans-unit id="7022070615528435141" datatype="html">
        <source>Delete</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">68</context>
        </context-group>
      </trans-unit>
      <trans-unit id="5674286808255988565" datatype="html">
        <source>Create</source>
        <target>Crear</target>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/locations/locations.component.html</context>
          <context context-type="linenumber">9</context>
        </context-group>
      </trans-unit>
    </body>
  </file>
</xliff>
</file>

<file path="src/locale/messages.xlf">
<?xml version="1.0" encoding="UTF-8" ?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">
  <file source-language="en-US" datatype="plaintext" original="ng2.template">
    <body>
      <trans-unit id="4022066031214545422" datatype="html">
        <source>Locations</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">5</context>
        </context-group>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/locations/locations.component.html</context>
          <context context-type="linenumber">4</context>
        </context-group>
      </trans-unit>
      <trans-unit id="8620355743663763746" datatype="html">
        <source> Select Location </source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">10,12</context>
        </context-group>
      </trans-unit>
      <trans-unit id="2510301980491268755" datatype="html">
        <source>Location Name</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">22</context>
        </context-group>
      </trans-unit>
      <trans-unit id="6304432362546770951" datatype="html">
        <source>Address</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">27</context>
        </context-group>
      </trans-unit>
      <trans-unit id="2314075913167237221" datatype="html">
        <source>City</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">32</context>
        </context-group>
      </trans-unit>
      <trans-unit id="5911214550882917183" datatype="html">
        <source>State</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">37</context>
        </context-group>
      </trans-unit>
      <trans-unit id="1200737650075932684" datatype="html">
        <source>Zip code</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">42</context>
        </context-group>
      </trans-unit>
      <trans-unit id="516176798986294299" datatype="html">
        <source>Country</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">49</context>
        </context-group>
      </trans-unit>
      <trans-unit id="333698147271351026" datatype="html">
        <source>Latitude: <x id="INTERPOLATION" equiv-text="{{display?.lat}}"/></source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">61</context>
        </context-group>
      </trans-unit>
      <trans-unit id="9065233968776922120" datatype="html">
        <source>Longitude: <x id="INTERPOLATION" equiv-text="{{display?.lng}}"/></source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">62</context>
        </context-group>
      </trans-unit>
      <trans-unit id="7022070615528435141" datatype="html">
        <source>Delete</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/location/location.component.html</context>
          <context context-type="linenumber">68</context>
        </context-group>
      </trans-unit>
      <trans-unit id="5674286808255988565" datatype="html">
        <source>Create</source>
        <context-group purpose="location">
          <context context-type="sourcefile">src/app/components/dashboard/locations/locations.component.html</context>
          <context context-type="linenumber">9</context>
        </context-group>
      </trans-unit>
    </body>
  </file>
</xliff>
</file>

<file path="src/main.ts">
import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));
</file>

<file path="src/manifest.webmanifest">
{
  "name": "ShiftWorkFrontend",
  "short_name": "ShiftWorkFrontend",
  "theme_color": "#1976d2",
  "background_color": "#fafafa",
  "display": "standalone",
  "scope": "./",
  "start_url": "./",
  "icons": [
    {
      "src": "assets/icons/icon-72x72.png",
      "sizes": "72x72",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "assets/icons/icon-96x96.png",
      "sizes": "96x96",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "assets/icons/icon-128x128.png",
      "sizes": "128x128",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "assets/icons/icon-144x144.png",
      "sizes": "144x144",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "assets/icons/icon-152x152.png",
      "sizes": "152x152",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "assets/icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "assets/icons/icon-384x384.png",
      "sizes": "384x384",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "assets/icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "maskable any"
    }
  ]
}
</file>

<file path="src/polyfills.ts">
/**
 * This file includes polyfills needed by Angular and is loaded before the app.
 * You can add your own extra polyfills to this file.
 *
 * This file is divided into 2 sections:
 *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
 *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
 *      file.
 *
 * The current setup is for so-called "evergreen" browsers; the last versions of browsers that
 * automatically update themselves. This includes recent versions of Safari, Chrome (including
 * Opera), Edge on the desktop, and iOS and Chrome on mobile.
 *
 * Learn more in https://angular.io/guide/browser-support
 */

/***************************************************************************************************
 * BROWSER POLYFILLS
 */

/**
 * By default, zone.js will patch all possible macroTask and DomEvents
 * user can disable parts of macroTask/DomEvents patch by setting following flags
 * because those flags need to be set before `zone.js` being loaded, and webpack
 * will put import in the top of bundle, so user need to create a separate file
 * in this directory (for example: zone-flags.ts), and put the following flags
 * into that file, and then add the following code before importing zone.js.
 * import './zone-flags';
 *
 * The flags allowed in zone-flags.ts are listed here.
 *
 * The following flags will work for all browsers.
 *
 * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
 * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick
 * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames
 *
 *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js
 *  with the following flag, it will bypass `zone.js` patch for IE/Edge
 *
 *  (window as any).__Zone_enable_cross_context_check = true;
 *
 */

/***************************************************************************************************
 * Zone JS is required by default for Angular itself.
 */
import 'zone.js';  // Included with Angular CLI.


/***************************************************************************************************
 * APPLICATION IMPORTS
 */
</file>

<file path="src/styles.css">
/* You can add global styles to this file, and also import other style files */
@import '../node_modules/bootstrap/dist/css/bootstrap.min.css';
@import '../node_modules/font-awesome/css/font-awesome.min.css';
@import '../node_modules/ngx-toastr/toastr.css';
@import "../node_modules/angular-calendar/css/angular-calendar.css";


* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

html,
body {
  margin: 0;
  padding: 0;
  font-weight: 400;
  width: 100%;
  height: 100%;
  font-family: "Poppins", sans-serif;
}

.feather {
  width: 16px;
  height: 16px;
  vertical-align: text-bottom;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 600;
}

.media-body h1 {
  font-weight: 300;
  margin-bottom: 20px;
}

.media-body h1 strong {
  font-weight: 600;
}

.media-body p {
  margin-bottom: 10px;
  font-weight: 300;
}

.media-body p strong {
  margin-bottom: 10px;
  font-weight: 600;
}

.px-logo {
  display: block;
  clear: both;
  margin: 0 auto 20px;
  width: 220px;
}

.px-logo a img {
  width: 100%;
}

.displayTable {
  display: table;
  width: 100%;
  height: 100%;
  background: #12056d;
}

.displayTableCell {
  display: table-cell;
  vertical-align: middle;
  width: 100%;
  height: 100%;
}

h3 {
  text-align: center;
  font-size: 22px;
  margin: 0 0 20px;
}

.authBlock {
  margin: 0 auto;
  max-width: 400px;
  background: white;
  padding: 30px 40px 10px;
  overflow: hidden;
  -webkit-box-shadow: 0 0 4px 0 rgba(0, 0, 0, 0.04);
  box-shadow: 0 0 4px 0 rgba(0, 0, 0, 0.04);
}

label {
  display: block;
  font-size: 13px;
  padding-bottom: 5px;
  font-weight: 600;
}

.formGroup {
  margin-bottom: 20px;
  float: left;
  width: 100%;
}

.formControl {
  width: 100%;
  display: block;
  padding: 15px 15px 14px;
  border: 2px solid #e7e7e7;
  outline: none;
  font-size: 15px;
  color: #444444;
  background: #fcfcfc;
}

.formControl:focus {
  border: 2px solid #d3d3d6;
}

input::-webkit-input-placeholder {
  color: #bbbbbb;
}

input::-moz-placeholder {
  color: #bbbbbb;
}

input:-ms-input-placeholder {
  color: #bbbbbb;
}

input:-moz-placeholder {
  color: #bbbbbb;
}

.displayTable .btn {
  width: 100%;
  border: none;
  font-size: 16px;
  font-weight: 600;
  padding: 15px 0;
  background: #f96ea8;
  color: #ffffff;
  cursor: pointer;
  outline: none;
}

.displayTable .btn:hover {
  opacity: 0.88;
}

.displayTable .btnSecondary {
  background: #eeeeee;
  color: #404040;
}

.displayTable .googleBtn {
  background: #4dd5fe;
}

.displayTable .facebookBtn {
  background: #4dd5fe;
}

.or {
  text-align: center;
  display: block;
  color: #a0a0a0;
  background: white;
  position: relative;
  margin: 5px 0 0px;
}

.orInner {
  background: white;
  display: inline-block;
  z-index: 4;
  position: relative;
  padding: 0 12px;
}

.or:before {
  position: absolute;
  content: "";
  left: 0;
  top: 11px;
  width: 100%;
  height: 1px;
  background: #e2e2e2;
}

.halfWidth {
  width: 48.5%;
}

.left {
  float: left;
}

.right {
  float: right;
}

.forgotPassword {
  text-align: center;
  margin: -12px 0 15px 0;
  float: left;
  width: 100%;
}

.forgotPassword span {
  color: #4dd5fe;
  font-size: 14px;
  font-weight: 400;
  cursor: pointer;
  display: inline-block;
  padding-top: 20px;
}

.redirectToLogin {
  padding: 15px 0 0;
  text-align: center;
  font-size: 14px;
  font-weight: 400;
  display: block;
  color: rgba(255, 255, 255, 0.6);
}

.redirectToLogin .redirect {
  cursor: pointer;
  color: #ffffff;
  text-decoration: underline;
}

/* * Sidebar */
.sidebar {
  top: 0;
  bottom: 0;
  left: 0;
  z-index: 100;
  padding: 48px 0 0;
  box-shadow: inset -1px 0 0 rgba(0, 0, 0, 0.1);
}

.sidebar-sticky {
  position: relative;
  top: 0;
  height: calc(100vh - 48px);
  padding-top: 0.5rem;
  overflow-x: hidden;
  overflow-y: auto;
}

@supports ((position: -webkit-sticky) or (position: sticky)) {
  .sidebar-sticky {
    position: -webkit-sticky;
    position: sticky;
  }
}

.sidebar .nav-link {
  font-weight: 500;
  color: #333;
}

.sidebar .nav-link .feather {
  margin-right: 4px;
  color: #999;
}

.sidebar-heading {
  font-size: 0.75rem;
  text-transform: uppercase;
}

.nav-link {
  padding: 1.5rem 1rem;
  border-bottom: 1px solid #dde0e2;
  cursor: pointer;
}

.sidebar .nav-link.active,
.sidebar a:hover,
a:not([href]):not([tabindex]):focus,
a:not([href]):not([tabindex]):hover {
  color: #e91e63;
  background: #efefef;
}

/* * Content */
[role="main"] {
  padding-top: 48px;
}

.dasboard-text {
  border-left: 1px solid rgb(255, 255, 255, 0.3);
  color: rgb(255, 255, 255, 0.5);
  display: inline-block;
  padding: 0 0 0 14px;
  font-size: 15px;
  margin-left: 15px;
  position: relative;
  top: -1px;
}

/* * Navbar */
.navbar-brand {
  padding-top: 0.75rem;
  padding-bottom: 0.75rem;
}

.navbar .form-control {
  padding: 0.75rem 1rem;
  border-width: 0;
  border-radius: 0;
}

.form-control-dark {
  color: #fff;
  background-color: rgba(255, 255, 255, 0.1);
  border-color: rgba(255, 255, 255, 0.1);
}

.form-control-dark:focus {
  border-color: transparent;
  box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.25);
}

.form-control:focus {
  border-color: #00bcd4;
  box-shadow: none;
}

.form-control {
  font-size: 14px;
}

.bg-dark {
  background-color: #3f51b5 !important;
}

.gap-right {
  margin-right: 10px;
}

i {
  width: 22px;
  text-align: center;
  margin-right: 5px;
}

.inner-adjust {
  padding: 0 20px;
}

.action-block {
  cursor: pointer;
}

.action-block .fa-edit:hover {
  color: #009688;
}

.action-block .fa-trash-alt:hover {
  color: #e91e63;
}

.btn-primary.focus,
.btn-primary:focus {
  box-shadow: none;
}

/* Pagination */
body pagination-template {
  padding: 0;
  margin: 8px 0 0;
  float: left;
  width: 100%;
  text-align: right;
}

body .ngx-pagination li:last-child {
  margin: 0;
}

body .ngx-pagination .current {
  background: #055af9;
}

.ngx-pagination a:hover,
.ngx-pagination button:hover {
  text-decoration: none;
}

/* Error */
.error {
  color: red;
  margin-top: 5px;
}

input.ng-invalid.ng-touched {
  border: 1px solid red;
}

.btn-success.disabled,
.btn-success:disabled {
  cursor: not-allowed;
}

/* Nav */
body .navbar {
  padding: 6px 0 !important;
}

body .navbar-brand {
  background: none;
}

.brand-logo {
  max-width: 85%;
}

.pt-3,
.py-3 {
  padding-top: 2.4rem !important;
}

.sidebar-sticky {
  padding-top: 1.2rem !important;
}

/* Form */
label {
  font-weight: 500;
}

.form-control {
  padding: 0.55rem 0.75rem;
}

/* Misc */
.no-data img {
  max-width: 420px;
  margin: 20px auto 0;
}

.nodata-msg {
  margin: 25px 0 15px;
  font-size: 28px;
  color: #a9a6c5;
  font-weight: 300;
  letter-spacing: 0.2px;
}

[role="main"] {
  padding-top: 65px;
}

.preloader {
  min-height: 400px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: -15px;
}

.custom-text {
  font-size: 15px;
  color: #5f5f5f;
  letter-spacing: 0.2px;
}

.navbar-dark .navbar-brand {
  margin-left: 6px;
}

.custom-text strong {
  color: #3a3a3a;
}

.mb-3,
.my-3 {
  margin-bottom: 1.4rem !important;
}

.custom-fa-plus {
  margin: 0;
  width: auto;
}

.user-image {
  width: 42px;
  height: 42px;
  display: inline-block;
  border-radius: 50%;
  vertical-align: middle;
  margin-right: 7px;
  background-size: cover;
  background-repeat: no-repeat;
  background-position: 0 0;
}

body .table thead th {
  background: #f3f5ff;
}

.pricing-header {
  padding-bottom: 50px;
}

.userImage {
  max-width: 125px;
}

.navbar-dark .navbar-nav .nav-link {
  color: rgba(255, 255, 255, 1);
}

.card {
  border: none;
}

.list-group-item {
  padding: 0 1.25rem 15px;
  border: none;
}

.fa-sign-out-alt {
  position: relative;
  top: 1px;
}

.logOutBtn {
  cursor: pointer;
}

.no-access {
  text-align: center;
  font-size: 26px;
  padding: 70px 0;
}

.rounded-circle {
  max-width: 150px;
}

/* Responsive */
@media (max-width: 767px) {
  .sidebar {
    position: static;
    padding: 40px 0 10px;
    height: auto;
  }

  [role="main"] {
    padding-top: 0;
  }

  .inner-adjust {
    padding: 0;
  }

  ul.nav.flex-column {
    flex-direction: inherit !important;
  }

  .pt-3,
  .py-3 {
    padding-top: 1.5rem !important;
  }

  .brand-logo {
    max-width: 175px;
    margin: 0 auto;
    display: block;
  }

  .dasboard-text {
    display: none !important;
  }

  .sidebar-sticky {
    padding-top: 1.9rem !important;
    height: auto;
  }

  .sidebar-sticky .nav li {
    width: 50%;
    text-align: center;
    border-right: 1px solid #c7ceff;
  }

  .sidebar-sticky .nav li:last-child {
    border: none;
  }

  .no-data img {
    max-width: 100%;
    margin-top: 0;
  }

  .nodata-msg,
  .h2,
  h2 {
    font-size: 1.4rem;
  }

  .custom-text {
    font-size: 14px;
  }

  .navbar-nav {
    float: right;
    width: 50%;
    text-align: right;
    display: inherit;
    margin: 0;
  }

  .navbar-dark .navbar-brand {
    margin: 0;
    width: 50%;
    float: left;
    display: inherit;
  }

  .sidebar {
    padding: 40px 0 0;
  }

  footer br {
    display: none;
  }

  .media {
    display: block;
  }

  .rounded-circle {
    max-width: 150px;
    margin: 0 auto 20px !important;
    display: block;
  }

  b,
  strong {
    display: block;
  }

  .displayTable {
    background: white;
  }

  .authBlock {
    box-shadow: none;
  }

  .px-logo {
    display: none;
  }
}

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }

  /* Component Styles */
  .my-list {
    background-color: #f0f0f0;
    padding: 16px;
  }
  
  .mat-list-item {
    border-bottom: 1px solid #ccc;
    padding: 10px;
  }
  
  .mat-list-item:hover {
    background-color: #8ee7e2;
  }
</file>

<file path="src/test.ts">
// This file is required by karma.conf.js and loads recursively all the .spec and framework files

import 'zone.js/testing';
import { getTestBed } from '@angular/core/testing';
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting(),
);
</file>

<file path="tsconfig.app.json">
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": ["node"],
  },
  "files": [
    "src/main.ts",
    "src/polyfills.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}
</file>

<file path="tsconfig.json">
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./dist/out-tsc",
    "forceConsistentCasingInFileNames": true,
    "strict": false,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": false,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "ES2022",
    "module": "es2020",
    "lib": [
      "es2020",
      "dom"
    ],
    "skipLibCheck": true,
    "useDefineForClassFields": false
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": false
  }
}
</file>

<file path="tsconfig.spec.json">
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine",
      "@angular/localize"
    ]
  },
  "files": [
    "src/test.ts",
    "src/polyfills.ts"
  ],
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}
</file>

</files>
